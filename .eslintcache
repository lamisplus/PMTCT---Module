[{"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\index.js":"1","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\App.js":"2","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\reportWebVitals.js":"3","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\context\\ThemeContext.js":"4","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js":"5","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\EnrollPatient.js":"6","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\UpdatePatientEnrollment.js":"7","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Home.js":"8","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\RegisterPatient.js":"9","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\context\\ThemeDemo.js":"10","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\SubMenu.js":"11","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\api.js":"12","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js":"13","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js":"14","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\ActiveANCPatientList.js":"15","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\PmtctPatients.js":"16","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\PmtctEnrollment.js":"17","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\LabourDelivery.js":"18","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\AncEnrollement.js":"19","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Consultation\\Index.js":"20","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Partners\\Index.js":"21","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\History\\RecentHistory.js":"22","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js":"23","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Infants\\Index.js":"24","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Partners\\AddNewPartner.js":"25","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Infants\\InfantRegistration.js":"26","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Index.js":"27","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\PmtctEntryPoint\\index.js":"28","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\BasicInfo.js":"29","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\PostTest.js":"30","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\RiskStratification.js":"31","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\RecencyTesting.js":"32","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Others.js":"33","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\PreTest.js":"34","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\HivTestResult.js":"35","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Elicitation\\Index.js":"36","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Elicitation\\IndexContactList.js":"37","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Elicitation\\AddIndexContact.js":"38","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Consultation\\InfantVisit.js":"39","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Consultation\\Home.js":"40","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\index.js":"41","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\App.js":"42","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\reportWebVitals.js":"43","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\context\\ThemeContext.js":"44","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\context\\ThemeDemo.js":"45","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Home.js":"46","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js":"47","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\UpdatePatientEnrollment.js":"48","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\EnrollPatient.js":"49","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\RegisterPatient.js":"50","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\ActiveANCPatientList.js":"51","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\PmtctPatients.js":"52","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js":"53","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\SubMenu.js":"54","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\api.js":"55","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js":"56","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\PmtctEnrollment.js":"57","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\LabourDelivery.js":"58","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\AncEnrollement.js":"59","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Partners\\AddNewPartner.js":"60","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Infants\\InfantRegistration.js":"61","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Index.js":"62","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Consultation\\Index.js":"63","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Infants\\Index.js":"64","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Partners\\Index.js":"65","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js":"66","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\History\\RecentHistory.js":"67","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\PmtctEntryPoint\\index.js":"68","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Consultation\\InfantVisit.js":"69","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Consultation\\Home.js":"70","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\RiskStratification.js":"71","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Others.js":"72","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\PostTest.js":"73","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\RecencyTesting.js":"74","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\HivTestResult.js":"75","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\PreTest.js":"76","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\BasicInfo.js":"77","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Elicitation\\Index.js":"78","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Elicitation\\IndexContactList.js":"79","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Elicitation\\AddIndexContact.js":"80"},{"size":729,"mtime":1701787775054,"results":"81","hashOfConfig":"82"},{"size":1644,"mtime":1702246245975,"results":"83","hashOfConfig":"82"},{"size":362,"mtime":1701787777194,"results":"84","hashOfConfig":"82"},{"size":8947,"mtime":1701787777214,"results":"85","hashOfConfig":"82"},{"size":8842,"mtime":1707833833872,"results":"86","hashOfConfig":"82"},{"size":46028,"mtime":1707227394162,"results":"87","hashOfConfig":"82"},{"size":40636,"mtime":1707834240448,"results":"88","hashOfConfig":"82"},{"size":3021,"mtime":1701805231244,"results":"89","hashOfConfig":"82"},{"size":105796,"mtime":1707838703271,"results":"90","hashOfConfig":"82"},{"size":2920,"mtime":1701787777224,"results":"91","hashOfConfig":"82"},{"size":4877,"mtime":1702653956009,"results":"92","hashOfConfig":"82"},{"size":424,"mtime":1708434836049,"results":"93","hashOfConfig":"82"},{"size":12743,"mtime":1702244718578,"results":"94","hashOfConfig":"82"},{"size":10946,"mtime":1701855036170,"results":"95","hashOfConfig":"82"},{"size":8931,"mtime":1707833334090,"results":"96","hashOfConfig":"82"},{"size":8815,"mtime":1701858232416,"results":"97","hashOfConfig":"82"},{"size":27935,"mtime":1707839080088,"results":"98","hashOfConfig":"82"},{"size":37364,"mtime":1707841622638,"results":"99","hashOfConfig":"82"},{"size":19610,"mtime":1707227640328,"results":"100","hashOfConfig":"82"},{"size":3429,"mtime":1702833669587,"results":"101","hashOfConfig":"82"},{"size":9522,"mtime":1701787815668,"results":"102","hashOfConfig":"82"},{"size":30482,"mtime":1707833246883,"results":"103","hashOfConfig":"82"},{"size":16388,"mtime":1702245813641,"results":"104","hashOfConfig":"82"},{"size":12327,"mtime":1702844147542,"results":"105","hashOfConfig":"82"},{"size":20327,"mtime":1702830557014,"results":"106","hashOfConfig":"82"},{"size":18048,"mtime":1702833185601,"results":"107","hashOfConfig":"82"},{"size":13505,"mtime":1701787815361,"results":"108","hashOfConfig":"82"},{"size":9534,"mtime":1707834536943,"results":"109","hashOfConfig":"82"},{"size":34572,"mtime":1701787815340,"results":"110","hashOfConfig":"82"},{"size":30282,"mtime":1701787815391,"results":"111","hashOfConfig":"82"},{"size":65944,"mtime":1701787815422,"results":"112","hashOfConfig":"82"},{"size":31414,"mtime":1701787815411,"results":"113","hashOfConfig":"82"},{"size":12541,"mtime":1701787815381,"results":"114","hashOfConfig":"82"},{"size":77391,"mtime":1701787815401,"results":"115","hashOfConfig":"82"},{"size":58967,"mtime":1701787815358,"results":"116","hashOfConfig":"82"},{"size":1966,"mtime":1701787815453,"results":"117","hashOfConfig":"82"},{"size":8405,"mtime":1701787815463,"results":"118","hashOfConfig":"82"},{"size":33346,"mtime":1701787815442,"results":"119","hashOfConfig":"82"},{"size":49081,"mtime":1702844476557,"results":"120","hashOfConfig":"82"},{"size":31014,"mtime":1707833241531,"results":"121","hashOfConfig":"82"},{"size":729,"mtime":1708945696028,"results":"122","hashOfConfig":"123"},{"size":1599,"mtime":1708945696021,"results":"124","hashOfConfig":"123"},{"size":362,"mtime":1708945699089,"results":"125","hashOfConfig":"123"},{"size":8947,"mtime":1708945699120,"results":"126","hashOfConfig":"123"},{"size":2920,"mtime":1708945699120,"results":"127","hashOfConfig":"123"},{"size":2925,"mtime":1708945734230,"results":"128","hashOfConfig":"123"},{"size":8559,"mtime":1708945735199,"results":"129","hashOfConfig":"123"},{"size":42243,"mtime":1709037560077,"results":"130","hashOfConfig":"123"},{"size":46411,"mtime":1709032882149,"results":"131","hashOfConfig":"123"},{"size":104842,"mtime":1709032800714,"results":"132","hashOfConfig":"123"},{"size":8706,"mtime":1708945735145,"results":"133","hashOfConfig":"123"},{"size":8593,"mtime":1708945735208,"results":"134","hashOfConfig":"123"},{"size":12400,"mtime":1708945735183,"results":"135","hashOfConfig":"123"},{"size":4726,"mtime":1708945735239,"results":"136","hashOfConfig":"123"},{"size":424,"mtime":1709108452187,"results":"137","hashOfConfig":"123"},{"size":10671,"mtime":1708945735208,"results":"138","hashOfConfig":"123"},{"size":33986,"mtime":1709117207438,"results":"139","hashOfConfig":"123"},{"size":38026,"mtime":1709061326089,"results":"140","hashOfConfig":"123"},{"size":20988,"mtime":1709033116456,"results":"141","hashOfConfig":"123"},{"size":20327,"mtime":1708945735324,"results":"142","hashOfConfig":"123"},{"size":39418,"mtime":1709027542060,"results":"143","hashOfConfig":"123"},{"size":13505,"mtime":1708945735023,"results":"144","hashOfConfig":"123"},{"size":3429,"mtime":1708945734261,"results":"145","hashOfConfig":"123"},{"size":11972,"mtime":1708945735302,"results":"146","hashOfConfig":"123"},{"size":9522,"mtime":1708945735324,"results":"147","hashOfConfig":"123"},{"size":15936,"mtime":1708945734384,"results":"148","hashOfConfig":"123"},{"size":29715,"mtime":1708945734400,"results":"149","hashOfConfig":"123"},{"size":9247,"mtime":1708945735340,"results":"150","hashOfConfig":"123"},{"size":48827,"mtime":1709111586920,"results":"151","hashOfConfig":"123"},{"size":30138,"mtime":1708945734246,"results":"152","hashOfConfig":"123"},{"size":65944,"mtime":1708945735086,"results":"153","hashOfConfig":"123"},{"size":12541,"mtime":1708945735039,"results":"154","hashOfConfig":"123"},{"size":30282,"mtime":1708945735054,"results":"155","hashOfConfig":"123"},{"size":31414,"mtime":1708945735070,"results":"156","hashOfConfig":"123"},{"size":58967,"mtime":1708945735008,"results":"157","hashOfConfig":"123"},{"size":77391,"mtime":1708945735054,"results":"158","hashOfConfig":"123"},{"size":34572,"mtime":1708945735008,"results":"159","hashOfConfig":"123"},{"size":1966,"mtime":1708945735108,"results":"160","hashOfConfig":"123"},{"size":8405,"mtime":1708945735108,"results":"161","hashOfConfig":"123"},{"size":33346,"mtime":1708945735101,"results":"162","hashOfConfig":"123"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"166"},"1bra3ro",{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"175","usedDeprecatedRules":"166"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":5,"source":"178","usedDeprecatedRules":"166"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":5,"source":"181","usedDeprecatedRules":"166"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"166"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":5,"source":"187","usedDeprecatedRules":"166"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"166"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"166"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"200","usedDeprecatedRules":"166"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"203","usedDeprecatedRules":"166"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"206","usedDeprecatedRules":"166"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"166"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"166"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"166"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"218","usedDeprecatedRules":"166"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"221","usedDeprecatedRules":"166"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"166"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"227","usedDeprecatedRules":"166"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"230","usedDeprecatedRules":"166"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"233","usedDeprecatedRules":"166"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"166"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"166"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"166"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"166"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"166"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"166"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":6,"source":"254","usedDeprecatedRules":"166"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"166"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"166"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"166"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"166"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"166"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"166"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"166"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":4,"source":"278","usedDeprecatedRules":"166"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"281"},"1if6n5j",{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"281"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"281"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"281"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"281"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"281"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"295","usedDeprecatedRules":"281"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":5,"source":"298","usedDeprecatedRules":"281"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":5,"source":"301","usedDeprecatedRules":"281"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":5,"source":"304","usedDeprecatedRules":"281"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"307","usedDeprecatedRules":"281"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"310","usedDeprecatedRules":"281"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"281"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"281"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"321","usedDeprecatedRules":"281"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"281"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"281"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"233","usedDeprecatedRules":"281"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"281"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"281"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"218","usedDeprecatedRules":"281"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"341","usedDeprecatedRules":"281"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"221","usedDeprecatedRules":"281"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"346","usedDeprecatedRules":"281"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"281"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"281"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":4,"source":"357","usedDeprecatedRules":"281"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"281"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"281"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"281"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":6,"source":"254","usedDeprecatedRules":"281"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"281"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"281"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"281"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"281"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"281"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"281"},"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\index.js",["378"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter, MemoryRouter as Router,} from 'react-router-dom';\n\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\nimport SimpleReactLightbox from \"simple-react-lightbox\";\nimport  ThemeContext  from \"./../src/main/webapp/context/ThemeContext\"; \n\nReactDOM.render(\n\t<React.StrictMode>\n\n            <SimpleReactLightbox>\n                <BrowserRouter basename='/'>\n                    <ThemeContext>\n                        <App />\n                    </ThemeContext>  \n                </BrowserRouter>\n            </SimpleReactLightbox>\n\n\t</React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n",["379","380"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\App.js",[],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js",["381","382","383"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport PatientCardDetail from \"./PatientCard\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SubMenu from \"./SubMenu\";\r\n//import RecentHistory from './../History/RecentHistory';\r\nimport ClinicVisit from \"../Consultation/Index\";\r\nimport PmtctEnrollment from \"./../PmtctServices/PmtctEnrollment\";\r\nimport AncEnrollement from \"./../PmtctServices/AncEnrollement\";\r\nimport LabourDelivery from \"./../PmtctServices/LabourDelivery\";\r\nimport PmtctHts from \"./../PMTCTHTSEnrollment/Index\";\r\nimport Partners from \"./../PmtctServices/Partners/Index\";\r\nimport Infants from \"./../PmtctServices/Infants/Index\";\r\nimport AddPartners from \"./../PmtctServices/Partners/AddNewPartner\";\r\nimport AddInfants from \"./../PmtctServices/Infants/InfantRegistration\";\r\nimport PatientHistory from \"./../History/PatientHistory\";\r\nimport RecentHistory from \"./../History/RecentHistory\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token as token } from \"./../../../api\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: \"bottom\",\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: \"center\",\r\n  },\r\n  column: {\r\n    flexBasis: \"20.33%\",\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: \"none\",\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction PatientCard(props) {\r\n  let history = useHistory();\r\n  const [art, setArt] = useState(false);\r\n  const [PersonInfo, setPersonInfo] = useState({});\r\n  const [deliveryInfo, setDeliveryInfo] = useState([]);\r\n  const [allEntryPoint, setAllEntryPoint] = useState([]);\r\n\r\n  const [activeContent, setActiveContent] = useState({\r\n    route: \"recent-history\",\r\n    id: \"\",\r\n    activeTab: \"home\",\r\n    actionType: \"create\",\r\n    obj: {},\r\n  });\r\n  const { classes } = props;\r\n  const patientObj =\r\n    history.location && history.location.state\r\n      ? history.location.state.patientObj\r\n      : {};\r\n\r\n  const RecentActivities = () => {\r\n    // if patient has ANC No\r\n    // if (props.patientObj.ancNo) {\r\n    //   axios\r\n    //     .get(`${baseUrl}${props.patientObj.ancNo}`, {\r\n    //       headers: { Authorization: `Bearer ${token}` },\r\n    //     })\r\n    //     .then((response) => {\r\n    //       setRecentActivities(response.data);\r\n    //     })\r\n    //     .catch((error) => {\r\n    //     });\r\n    // } else {\r\n    axios\r\n      .get(\r\n        `${baseUrl}pmtct/anc/getAllActivities/${\r\n          patientObj.person_uuid\r\n            ? patientObj.person_uuid\r\n            : patientObj.personUuid\r\n        }`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setDeliveryInfo(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n    // }\r\n  };\r\n\r\n  const POINT_ENTRY_PMTCT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PMTCT_ENTRY_POINT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setAllEntryPoint(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    RecentActivities();\r\n    axios\r\n      .get(`${baseUrl}patient/${patientObj?.id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPersonInfo(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n    POINT_ENTRY_PMTCT();\r\n  }, []);\r\n  console.log(patientObj);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div\r\n        className=\"row page-titles mx-0\"\r\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\r\n      >\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item active\">\r\n            <h4>\r\n              {\" \"}\r\n              <Link to={\"/\"}>PMTCT /</Link> Patient Dashboard\r\n            </h4>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n      <Card>\r\n        <CardContent>\r\n          {/* Patient Card Detail */}\r\n          <PatientCardDetail\r\n            patientObj={patientObj}\r\n            setArt={setArt}\r\n            setActiveContent={setActiveContent}\r\n          />\r\n          {/* Patient Dashboard menu */}\r\n          <SubMenu\r\n            patientObj={patientObj}\r\n            art={art}\r\n            setActiveContent={setActiveContent}\r\n            deliveryInfo={deliveryInfo}\r\n          />\r\n          <br />\r\n          {/* Patient dashboard menu route */}\r\n          {activeContent.route === \"recent-history\" && (\r\n            <RecentHistory\r\n              allEntryPoint={allEntryPoint}\r\n              patientObj={patientObj}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n              entrypointValue={\r\n                patientObj.ancNo\r\n                  ? \"PMTCT_ENTRY_POINT_ANC\"\r\n                  : patientObj.entryPoint\r\n              }\r\n            />\r\n          )}\r\n\r\n          {activeContent.route === \"consultation\" && (\r\n            <ClinicVisit\r\n              patientObj={patientObj}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n            />\r\n          )}\r\n          {activeContent.route === \"anc-pnc\" && (\r\n            <PmtctEnrollment\r\n              allEntryPoint={allEntryPoint}\r\n              entrypointValue={patientObj.entryPoint}\r\n              ancEntryType={patientObj.ancNo ? true : false}\r\n              patientObj={patientObj}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n              hideUpdateButton={true}\r\n            />\r\n          )}\r\n          {activeContent.route === \"anc-enrollment\" && (\r\n            <AncEnrollement\r\n              patientObj={patientObj}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n            />\r\n          )}\r\n          {activeContent.route === \"labour-delivery\" && (\r\n            <LabourDelivery\r\n              patientObj={patientObj}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n            />\r\n          )}\r\n          {activeContent.route === \"pmtct-hts\" && (\r\n            <PmtctHts\r\n              patientObj={patientObj}\r\n              patientAge={patientObj.age}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n            />\r\n          )}\r\n          {activeContent.route === \"partners\" && (\r\n            <Partners\r\n              patientObj={patientObj}\r\n              patientAge={patientObj.age}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n            />\r\n          )}\r\n          {activeContent.route === \"infants\" && (\r\n            <Infants\r\n              patientObj={patientObj}\r\n              patientAge={patientObj.age}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n            />\r\n          )}\r\n          {activeContent.route === \"add-partner\" && (\r\n            <AddPartners\r\n              patientObj={patientObj}\r\n              patientAge={patientObj.age}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n            />\r\n          )}\r\n          {activeContent.route === \"add-infant\" && (\r\n            <AddInfants\r\n              patientObj={patientObj}\r\n              patientAge={patientObj.age}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n            />\r\n          )}\r\n          {activeContent.route === \"patient-history\" && (\r\n            <PatientHistory\r\n              patientObj={patientObj}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n            />\r\n          )}\r\n          {/* History Pages */}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\EnrollPatient.js",["384","385","386","387","388","389","390","391","392","393","394"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { FormGroup, Label, Spinner, Input, Form, InputGroup } from \"reactstrap\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport {\r\n  faCheckSquare,\r\n  faCoffee,\r\n  faEdit,\r\n  faTrash,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport \"./patient.css\";\r\nimport PmtctEnrollment from \"../PmtctServices/PmtctEnrollment\";\r\n// import Form from 'react-bootstrap/Form';\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n}));\r\n\r\nconst UserRegistration = (props) => {\r\n  const [basicInfo, setBasicInfo] = useState({\r\n    active: true,\r\n    address: [],\r\n    contact: [],\r\n    contactPoint: [],\r\n    dateOfBirth: \"\",\r\n    deceased: false,\r\n    deceasedDateTime: null,\r\n    firstName: \"\",\r\n    genderId: \"\",\r\n    identifier: \"\",\r\n    otherName: \"\",\r\n    maritalStatusId: \"\",\r\n    educationId: \"\",\r\n    employmentStatusId: \"\",\r\n    dateOfRegistration: \"\",\r\n    isDateOfBirthEstimated: null,\r\n    age: \"\",\r\n    phoneNumber: \"\",\r\n    altPhonenumber: \"\",\r\n    dob: \"\",\r\n    countryId: \"\",\r\n    stateId: \"\",\r\n    district: \"\",\r\n    landmark: \"\",\r\n    sexId: \"\",\r\n    ninNumber: \"\",\r\n  });\r\n  const [saving, setSaving] = useState(false);\r\n  const [disabledAgeBaseOnAge, setDisabledAgeBaseOnAge] = useState(false);\r\n  const [ageDisabled, setAgeDisabled] = useState(true);\r\n  const [genders, setGenders] = useState([]);\r\n  const [ancNumberCheck, setAncNumberCheck] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [activeContent, setActiveContent] = useState({\r\n    route: \"recent-history\",\r\n    id: \"\",\r\n    activeTab: \"home\",\r\n    actionType: \"\",\r\n    obj: {},\r\n  });\r\n\r\n  const userDetail =\r\n    props.location && props.location.state ? props.location.state.user : null;\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  //const [values, setValues] = useState([]);\r\n  const [objValues, setObjValues] = useState({\r\n    ancNo: \"\",\r\n    gaweeks: \"\",\r\n    gravida: \"\",\r\n    expectedDeliveryDate: \"\",\r\n    firstAncDate: \"\",\r\n    lmp: \"\",\r\n    parity: \"\",\r\n    person_uuid: \"\",\r\n    hivDiognosicTime: \"\",\r\n    referredSyphilisTreatment: \"\",\r\n    testResultSyphilis: \"\",\r\n    testedSyphilis: \"\",\r\n    treatedSyphilis: \"\",\r\n    personDto: {},\r\n    pmtctHtsInfo: {},\r\n    syphilisInfo: {},\r\n    partnerNotification: {},\r\n    sourceOfReferral: \"\",\r\n    staticHivStatus: \"\",\r\n  });\r\n  console.log(\"location\", location.state);\r\n  const [pregnancyStatus, setPregnancyStatus] = useState([]);\r\n  //set ro show the facility name field if is transfer in\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggle = () => setOpen(!open);\r\n  const locationState = location.state;\r\n  let patientId = null;\r\n  let patientObj = {};\r\n  patientId = locationState ? locationState.patientId : null;\r\n  patientObj = locationState ? locationState.patientObj : {};\r\n  const [sourceOfReferral, setSourceOfReferral] = useState([]);\r\n  useEffect(() => {\r\n    console.log(locationState);\r\n    loadGenders();\r\n    getSex();\r\n    PregnancyStatus();\r\n    if (patientObj) {\r\n      objValues.staticHivStatus =\r\n        patientObj && patientObj.dynamicHivStatus === \"Positive\"\r\n          ? \"Positive\"\r\n          : \"\";\r\n      const identifiers = patientObj.identifier;\r\n      const hospitalNumber = identifiers.identifier.find(\r\n        (obj) => obj.type === \"HospitalNumber\"\r\n      );\r\n      basicInfo.dob = patientObj.dateOfBirth;\r\n      basicInfo.firstName = patientObj.firstName;\r\n      basicInfo.dateOfRegistration = patientObj.dateOfRegistration;\r\n      basicInfo.middleName = patientObj.otherName;\r\n      basicInfo.lastName = patientObj.surname;\r\n      basicInfo.dateOfRegistration = patientObj.dateOfRegistration;\r\n      basicInfo.hospitalNumber =\r\n        hospitalNumber && hospitalNumber ? hospitalNumber.value : \"\";\r\n      setObjValues({\r\n        ...objValues,\r\n        uniqueId: hospitalNumber ? hospitalNumber.value : \"\",\r\n      });\r\n      basicInfo.genderId =\r\n        patientObj && patientObj.gender ? patientObj.gender.id : null;\r\n      const patientAge = calculate_age(\r\n        moment(patientObj.dateOfBirth).format(\"DD-MM-YYYY\")\r\n      );\r\n      basicInfo.age = patientAge;\r\n      objValues.personId = patientObj.id;\r\n      basicInfo.ninNumber = patientObj.ninNumber;\r\n      basicInfo.staticHivStatus = patientObj.dynamicHivStatus;\r\n    }\r\n    if (basicInfo.dateOfRegistration < basicInfo.dob) {\r\n      alert(\"Date of registration can not be earlier than date of birth\");\r\n    }\r\n    SOURCE_REFERRAL_PMTCT();\r\n  }, [patientObj, patientId, basicInfo.dateOfRegistration]);\r\n  //Get list of Source of Referral\r\n  const SOURCE_REFERRAL_PMTCT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL_PMTCT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setSourceOfReferral(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const getSex = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        let patientSex = \"\";\r\n        if (\r\n          patientObj.sex === \"female\" ||\r\n          patientObj.sex === \"Female\" ||\r\n          patientObj.sex === \"FEMALE\"\r\n        ) {\r\n          patientSex = \"Female\";\r\n        }\r\n        if (\r\n          patientObj.sex === \"Male\" ||\r\n          patientObj.sex === \"male\" ||\r\n          patientObj.sex === \"MALE\"\r\n        ) {\r\n          patientSex = \"Male\";\r\n        }\r\n        const getSexId = response.data.find((x) => x.display === patientSex); //get patient sex ID by filtering the request\r\n        basicInfo.sexId = getSexId.display;\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const loadGenders = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/SEX`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setGenders(response.data);\r\n    } catch (e) {}\r\n  }, []);\r\n  //Calculate Date of birth\r\n  const calculate_age = (dob) => {\r\n    var today = new Date();\r\n    var dateParts = dob.split(\"-\");\r\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n    var age_now = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now;\r\n  };\r\n\r\n  //   handle routing\r\n\r\n  const handleRoute = (data) => {\r\n    history.push({\r\n      pathname: \"/patient-history\",\r\n      state: { patientObj: data, postValue: \"L&D\" },\r\n    });\r\n  };\r\n  const handleAgeChange = (e) => {\r\n    const ageNumber = e.target.value.replace(/\\D/g, \"\");\r\n    if (!ageDisabled && ageNumber) {\r\n      if (ageNumber !== \"\" && ageNumber >= 60) {\r\n        toggle();\r\n      }\r\n      if (ageNumber <= 1) {\r\n        setDisabledAgeBaseOnAge(true);\r\n      } else {\r\n        setDisabledAgeBaseOnAge(false);\r\n      }\r\n      const currentDate = new Date();\r\n      currentDate.setDate(15);\r\n      currentDate.setMonth(5);\r\n      const estDob = moment(currentDate.toISOString());\r\n      const dobNew = estDob.add(ageNumber * -1, \"years\");\r\n      //setBasicInfo({...basicInfo, dob: moment(dobNew).format(\"YYYY-MM-DD\")});\r\n      basicInfo.dob = moment(dobNew).format(\"YYYY-MM-DD\");\r\n    }\r\n    setBasicInfo({ ...basicInfo, age: ageNumber });\r\n  };\r\n  //End of Date of Birth and Age handling\r\n  /*****  Validation  */\r\n  const validate = () => {\r\n    let temp = { ...errors };\r\n    temp.gaweeks = objValues.gaweeks ? \"\" : \"This field is required\";\r\n    temp.gravida = objValues.gravida ? \"\" : \"This field is required\";\r\n    objValues.testResultSyphilis === \"Positive\" &&\r\n      (temp.referredSyphilisTreatment = objValues.referredSyphilisTreatment\r\n        ? \"\"\r\n        : \"This field is required\");\r\n    temp.lmp = objValues.lmp ? \"\" : \"This field is required\";\r\n    temp.parity = objValues.parity !== \"\" ? \"\" : \"This field is required\";\r\n    temp.testedSyphilis = objValues.testedSyphilis\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    objValues.testResultSyphilis === \"Positive\" &&\r\n      (temp.treatedSyphilis = objValues.treatedSyphilis\r\n        ? \"\"\r\n        : \"This field is required\");\r\n    temp.sourceOfReferral = objValues.sourceOfReferral\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    objValues.testedSyphilis === \"Yes\" &&\r\n      (temp.testResultSyphilis = objValues.testResultSyphilis\r\n        ? \"\"\r\n        : \"This field is required\");\r\n    temp.staticHivStatus = objValues.staticHivStatus\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    temp.ancNo = objValues.ancNo ? \"\" : \"This field is required\";\r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n  //Handle Input Change for Basic Infor\r\n  const handleInputChangeBasic = (e) => {\r\n    setErrors({ ...errors, [e.target.name]: \"\" });\r\n\r\n    setBasicInfo({ ...basicInfo, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  //Get list of KP\r\n  const PregnancyStatus = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PREGANACY_STATUS`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setPregnancyStatus(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const handleInputChange = (e) => {\r\n    setErrors({ ...errors, [e.target.name]: \"\" });\r\n    if (e.target.name === \"ancNo\" && e.target.value !== \"\") {\r\n      async function getAncNumber() {\r\n        const ancNumber = e.target.value;\r\n        const ancNo = {\r\n          ancNo: ancNumber,\r\n        };\r\n        const response = await axios.post(\r\n          `${baseUrl}pmtct/anc/exist/anc-number/${ancNumber}`,\r\n          ancNo,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        );\r\n        if (response.data === true) {\r\n          toast.error(\"ANC number already exist\");\r\n          setAncNumberCheck(response.data);\r\n        } else {\r\n          setAncNumberCheck(false);\r\n        }\r\n      }\r\n      getAncNumber();\r\n    }\r\n    //Check for lmp and make an API call\r\n    if (e.target.name === \"lmp\" && e.target.value !== \"\") {\r\n      async function getGa() {\r\n        const ga = e.target.value;\r\n        const response = await axios.get(\r\n          `${baseUrl}pmtct/anc/calculate-ga/${ga}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        );\r\n        if (response.data > 0) {\r\n          objValues.gaweeks = response.data;\r\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n        } else {\r\n          objValues.gaweeks = response.data;\r\n          toast.error(\"Please select a validate date\");\r\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n        }\r\n      }\r\n      getGa();\r\n    }\r\n    if (\r\n      e.target.name === \"parity\" &&\r\n      e.target.value !== \"\" &&\r\n      e.target.value < 0\r\n    ) {\r\n      //The field will  not accept zero as a value\r\n      return;\r\n    } //gravida\r\n    if (\r\n      e.target.name === \"gravida\" &&\r\n      e.target.value !== \"\" &&\r\n      e.target.value <= 0\r\n    ) {\r\n      //The field will  not accept zero as a value\r\n      return;\r\n    }\r\n    if (\r\n      e.target.name === \"testedSyphilis\" &&\r\n      e.target.value !== \"\" &&\r\n      e.target.value === \"Yes\"\r\n    ) {\r\n      //The field will  not accept zero as a value\r\n      objValues.testResultSyphilis = \"\";\r\n      objValues.referredSyphilisTreatment = \"\";\r\n      objValues.treatedSyphilis = \"\";\r\n      setObjValues({ ...objValues, [\"testResultSyphilis\"]: \"\" });\r\n      setObjValues({ ...objValues, [\"referredSyphilisTreatment\"]: \"\" });\r\n      setObjValues({ ...objValues, [\"treatedSyphilis\"]: \"\" });\r\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    }\r\n    if (\r\n      e.target.name === \"testResultSyphilis\" &&\r\n      e.target.value !== \"\" &&\r\n      e.target.value === \"Positive\"\r\n    ) {\r\n      //The field will  not accept zero as a value\r\n      objValues.treatedSyphilis = \"\";\r\n      objValues.referredSyphilisTreatment = \"\";\r\n      setObjValues({ ...objValues, [\"treatedSyphilis\"]: \"\" });\r\n      setObjValues({ ...objValues, [\"referredSyphilisTreatment\"]: \"\" });\r\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    }\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  //Handle CheckBox\r\n  const handleCancel = () => {\r\n    history.push({ pathname: \"/\" });\r\n  };\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"reading\");\r\n    if (validate()) {\r\n      // ANC ENTRY POINT\r\n      if (locationState.showANC) {\r\n        try {\r\n          objValues.entryPoint = locationState.entrypointValue;\r\n\r\n          objValues.person_uuid = patientObj.uuid;\r\n          const response = await axios.post(\r\n            `${baseUrl}pmtct/anc/anc-enrollement`,\r\n            objValues,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n          toast.success(\"Patient Register successful\", {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n          history.push({\r\n            pathname: \"/patient-history\",\r\n            state: {\r\n              patientObj: response.data,\r\n              postValue: locationState.postValue,\r\n              entrypointValue: locationState.entrypointValue,\r\n            },\r\n          });\r\n          // history.push(\"/\");\r\n        } catch (error) {\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            if (\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\" &&\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.subErrors[0].message !== \"\"\r\n            ) {\r\n              toast.error(\r\n                error.response.data.apierror.message +\r\n                  \" : \" +\r\n                  error.response.data.apierror.subErrors[0].field +\r\n                  \" \" +\r\n                  error.response.data.apierror.subErrors[0].message,\r\n                { position: toast.POSITION.BOTTOM_CENTER }\r\n              );\r\n            } else {\r\n              toast.error(errorMessage, {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            }\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          }\r\n        }\r\n      } else {\r\n        // LD AND POSTPARTUM ENTRY POINT\r\n        try {\r\n          objValues.person_uuid = patientObj.uuid;\r\n          const response = await axios.post(\r\n            `${baseUrl}pmtct/anc/pmtct-enrollment`,\r\n            objValues,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          );\r\n          console.log(\"i am here\", response);\r\n          // history.push(\"/\");\r\n          history.push({\r\n            pathname: \"/patient-history\",\r\n            state: {\r\n              patientObj: response.data,\r\n              postValue: locationState.postValue,\r\n              entrypointValue: locationState.entrypointValue,\r\n            },\r\n          });\r\n\r\n          toast.success(\"Patient Register successful\", {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n        } catch (error) {\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            if (\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\" &&\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.subErrors[0].message !== \"\"\r\n            ) {\r\n              toast.error(\r\n                error.response.data.apierror.message +\r\n                  \" : \" +\r\n                  error.response.data.apierror.subErrors[0].field +\r\n                  \" \" +\r\n                  error.response.data.apierror.subErrors[0].message,\r\n                { position: toast.POSITION.BOTTOM_CENTER }\r\n              );\r\n            } else {\r\n              toast.error(errorMessage, {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            }\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"row page-titles mx-0\"\r\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\r\n      >\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item active\">\r\n            <h4>\r\n              {\" \"}\r\n              <Link to={\"/\"}>PMTCT /</Link> Patient Enrollment\r\n            </h4>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      <Card className={classes.root}>\r\n        <CardContent>\r\n          <Link\r\n            to={{\r\n              pathname: \"/\",\r\n              state: \"users\",\r\n            }}\r\n          >\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className=\" float-end ms-1\"\r\n              style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\r\n              startIcon={<TiArrowBack />}\r\n            >\r\n              <span style={{ textTransform: \"capitalize\", color: \"#fff\" }}>\r\n                Back\r\n              </span>\r\n            </Button>\r\n          </Link>\r\n          <br />\r\n          <br />\r\n          <div className=\"col-xl-12 col-lg-12\">\r\n            <Form>\r\n              <div className=\"card\">\r\n                <div\r\n                  className=\"card-header\"\r\n                  style={{\r\n                    backgroundColor: \"#014d88\",\r\n                    color: \"#fff\",\r\n                    fontWeight: \"bolder\",\r\n                    borderRadius: \"0.2rem\",\r\n                  }}\r\n                >\r\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\r\n                    {userDetail === null\r\n                      ? \"Basic Information\"\r\n                      : \"Edit User Information\"}\r\n                  </h5>\r\n                </div>\r\n\r\n                <div className=\"card-body\">\r\n                  <div className=\"basic-form\">\r\n                    <div className=\"row\">\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"firstName\">Name</Label>\r\n                          <Input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            id=\"firstName\"\r\n                            value={\r\n                              basicInfo?.fullname\r\n                                ? basicInfo?.fullname\r\n                                : `${basicInfo.firstName} ${basicInfo.lastName}`\r\n                            }\r\n                            onChange={handleInputChangeBasic}\r\n                            style={{\r\n                              border: \"none\",\r\n                              backgroundColor: \"transparent\",\r\n                              outline: \"none\",\r\n                            }}\r\n                            //disabled\r\n                          />\r\n\r\n                          {errors.firstName !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.firstName}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group mb-3 col-md-3\">\r\n                        <FormGroup>\r\n                          <Label for=\"patientId\">Hospital Number </Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"hospitalNumber\"\r\n                            id=\"hospitalNumber\"\r\n                            value={basicInfo.hospitalNumber}\r\n                            onChange={handleInputChangeBasic}\r\n                            style={{\r\n                              border: \"none\",\r\n                              backgroundColor: \"transparent\",\r\n                              outline: \"none\",\r\n                            }}\r\n                            //disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group  col-md-2\">\r\n                        <FormGroup>\r\n                          <Label>Sex </Label>\r\n                          <Input\r\n                            className=\"form-control\"\r\n                            name=\"sexId\"\r\n                            id=\"sexId\"\r\n                            onChange={handleInputChangeBasic}\r\n                            value={basicInfo.sexId}\r\n                            style={{\r\n                              border: \"none\",\r\n                              backgroundColor: \"transparent\",\r\n                              outline: \"none\",\r\n                            }}\r\n                          />\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group mb-3 col-md-2\">\r\n                        <FormGroup>\r\n                          <Label>Age</Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"age\"\r\n                            id=\"age\"\r\n                            value={basicInfo.age}\r\n                            disabled={ageDisabled}\r\n                            onChange={handleAgeChange}\r\n                            style={{\r\n                              border: \"none\",\r\n                              backgroundColor: \"transparent\",\r\n                              outline: \"none\",\r\n                            }}\r\n                          />\r\n                        </FormGroup>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* Adding  ENROLLEMENT FORM HERE */}\r\n\r\n              {locationState.showANC ? (\r\n                <div className=\"card\">\r\n                  <div\r\n                    className=\"card-header\"\r\n                    style={{\r\n                      backgroundColor: \"#014d88\",\r\n                      color: \"#fff\",\r\n                      fontWeight: \"bolder\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\r\n                      ANC Enrollment\r\n                    </h5>\r\n                  </div>\r\n                  <div className=\"card-body\">\r\n                    <div className=\"row\">\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            ANC No <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"text\"\r\n                              name=\"ancNo\"\r\n                              id=\"ancNo\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.ancNo}\r\n                            />\r\n                          </InputGroup>\r\n                          {errors.ancNo !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.ancNo}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                          {ancNumberCheck === true ? (\r\n                            <span className={classes.error}>\r\n                              {\"ANC number already exist\"}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Date of Enrollment{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"date\"\r\n                              name=\"firstAncDate\"\r\n                              id=\"firstAncDate\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.firstAncDate}\r\n                              min={patientObj.dateOfRegistration}\r\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                            />\r\n                          </InputGroup>\r\n                          {errors.firstAncDate !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.firstAncDate}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Parity <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"number\"\r\n                              name=\"parity\"\r\n                              id=\"parity\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.parity}\r\n                              min={0}\r\n                            />\r\n                          </InputGroup>\r\n                          {errors.parity !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.parity}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                          {/* {objValues.parity !== \"\" && objValues.parity < 0 ? (\r\n                            <span className={classes.error}>\r\n                              Parity should not be less than 1\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )} */}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Gravida <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"number\"\r\n                              name=\"gravida\"\r\n                              id=\"gragravidavida\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.gravida}\r\n                              min=\"1\"\r\n                            />\r\n                          </InputGroup>\r\n                          {errors.gravida !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.gravida}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                          {objValues.gravida < objValues.parity ? (\r\n                            <span className={classes.error}>\r\n                              Gravida should not be less Parity\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Date Of Last Menstrual Period{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"date\"\r\n                              name=\"lmp\"\r\n                              id=\"lmp\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.lmp}\r\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                            />\r\n                          </InputGroup>\r\n                          {errors.lmp !== \"\" ? (\r\n                            <span className={classes.error}>{errors.lmp}</span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                          {objValues.gaweeks === 0 ? (\r\n                            <span className={classes.error}>Invalid date </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Gestational Age (Weeks){\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"text\"\r\n                              name=\"gaweeks\"\r\n                              id=\"gaweeks\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.gaweeks}\r\n                              disabled\r\n                            />\r\n                          </InputGroup>\r\n                          {errors.gaweeks !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.gaweeks}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Source of Referral{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"select\"\r\n                              name=\"sourceOfReferral\"\r\n                              id=\"sourceOfReferral\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.sourceOfReferral}\r\n                            >\r\n                              <option value=\"\">Select</option>\r\n                              {sourceOfReferral.map((value, index) => (\r\n                                <option key={index} value={value.code}>\r\n                                  {value.display}\r\n                                </option>\r\n                              ))}\r\n                            </Input>\r\n                          </InputGroup>\r\n                          {errors.sourceOfReferral !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.sourceOfReferral}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Tested for syphilis{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"select\"\r\n                              name=\"testedSyphilis\"\r\n                              id=\"testedSyphilis\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.testedSyphilis}\r\n                            >\r\n                              <option value=\"\">Select</option>\r\n                              <option value=\"Yes\">Yes</option>\r\n                              <option value=\"No\">No</option>\r\n                            </Input>\r\n                          </InputGroup>\r\n                          {errors.testedSyphilis !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.testedSyphilis}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      {objValues.testedSyphilis === \"Yes\" && (\r\n                        <>\r\n                          <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                              <Label>\r\n                                Syphilis test result{\" \"}\r\n                                <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                              </Label>\r\n                              <InputGroup>\r\n                                <Input\r\n                                  type=\"select\"\r\n                                  name=\"testResultSyphilis\"\r\n                                  id=\"testResultSyphilis\"\r\n                                  onChange={handleInputChange}\r\n                                  value={objValues.testResultSyphilis}\r\n                                >\r\n                                  <option value=\"\">Select</option>\r\n                                  <option value=\"Positive\">Positive</option>\r\n                                  <option value=\"Negative\">Negative</option>\r\n                                </Input>\r\n                              </InputGroup>\r\n                              {errors.testResultSyphilis !== \"\" ? (\r\n                                <span className={classes.error}>\r\n                                  {errors.testResultSyphilis}\r\n                                </span>\r\n                              ) : (\r\n                                \"\"\r\n                              )}\r\n                            </FormGroup>\r\n                          </div>\r\n                          {objValues.testedSyphilis === \"Yes\" &&\r\n                            objValues.testResultSyphilis === \"Positive\" && (\r\n                              <>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                  <FormGroup>\r\n                                    <Label>\r\n                                      Treated for syphilis (penicillin){\" \"}\r\n                                      <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                                    </Label>\r\n                                    <InputGroup>\r\n                                      <Input\r\n                                        type=\"select\"\r\n                                        name=\"treatedSyphilis\"\r\n                                        id=\"treatedSyphilis\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.treatedSyphilis}\r\n                                      >\r\n                                        <option value=\"\">Select</option>\r\n                                        <option value=\"Yes\">Yes</option>\r\n                                        <option value=\"No\">No</option>\r\n                                      </Input>\r\n                                    </InputGroup>\r\n                                    {errors.treatedSyphilis !== \"\" ? (\r\n                                      <span className={classes.error}>\r\n                                        {errors.treatedSyphilis}\r\n                                      </span>\r\n                                    ) : (\r\n                                      \"\"\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                  <FormGroup>\r\n                                    <Label>\r\n                                      Referred Syphilis +ve client{\" \"}\r\n                                      <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                                    </Label>\r\n                                    <InputGroup>\r\n                                      <Input\r\n                                        type=\"select\"\r\n                                        name=\"referredSyphilisTreatment\"\r\n                                        id=\"referredSyphilisTreatment\"\r\n                                        onChange={handleInputChange}\r\n                                        value={\r\n                                          objValues.referredSyphilisTreatment\r\n                                        }\r\n                                      >\r\n                                        <option value=\"\">Select</option>\r\n                                        <option value=\"Yes\">Yes</option>\r\n                                        <option value=\"No\">No</option>\r\n                                      </Input>\r\n                                    </InputGroup>\r\n                                    {errors.referredSyphilisTreatment !== \"\" ? (\r\n                                      <span className={classes.error}>\r\n                                        {errors.referredSyphilisTreatment}\r\n                                      </span>\r\n                                    ) : (\r\n                                      \"\"\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </div>\r\n                              </>\r\n                            )}\r\n                        </>\r\n                      )}\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            HIV Status <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"select\"\r\n                              name=\"staticHivStatus\"\r\n                              id=\"staticHivStatus\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.staticHivStatus}\r\n                              disabled={\r\n                                patientObj.dynamicHivStatus === \"Positive\"\r\n                                  ? true\r\n                                  : false\r\n                              }\r\n                            >\r\n                              <option value=\"\">Select</option>\r\n                              <option value=\"Positive\">Positive</option>\r\n                              <option value=\"Negative\">Negative</option>\r\n                              <option value=\"Unknown\">Unknown</option>\r\n                            </Input>\r\n                          </InputGroup>\r\n                          {errors.staticHivStatus !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.staticHivStatus}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <PmtctEnrollment\r\n                  patientObj={patientObj}\r\n                  setActiveContent={setActiveContent}\r\n                  activeContent={activeContent}\r\n                  hideUpdateButton={true}\r\n                  entrypointValue={locationState.entrypointValue}\r\n                  ancEntryType={patientObj.ancNo ? true : false}\r\n                  handleRoute={handleRoute}\r\n                />\r\n              )}\r\n              {console.log(\"patientObj\", patientObj)}\r\n              {/* END OF HIV ENROLLEMENT FORM */}\r\n              {saving ? <Spinner /> : \"\"}\r\n\r\n              <br />\r\n\r\n              {locationState.showANC && (\r\n                <>\r\n                  {objValues.gaweeks > 0 &&\r\n                    ancNumberCheck !== true &&\r\n                    objValues.gravida >= objValues.parity && (\r\n                      <MatButton\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        startIcon={<SaveIcon />}\r\n                        hidden={ancNumberCheck}\r\n                        disabled={disabledAgeBaseOnAge}\r\n                        onClick={handleSubmit}\r\n                      >\r\n                        {!saving ? (\r\n                          <span style={{ textTransform: \"capitalize\" }}>\r\n                            Save\r\n                          </span>\r\n                        ) : (\r\n                          <span style={{ textTransform: \"capitalize\" }}>\r\n                            Saving...\r\n                          </span>\r\n                        )}\r\n                      </MatButton>\r\n                    )}\r\n                  <MatButton\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    startIcon={<CancelIcon />}\r\n                    onClick={handleCancel}\r\n                    style={{ backgroundColor: \"#992E62\" }}\r\n                  >\r\n                    <span\r\n                      style={{ textTransform: \"capitalize\", color: \"#fff\" }}\r\n                    >\r\n                      Cancel\r\n                    </span>\r\n                  </MatButton>\r\n                </>\r\n              )}\r\n            </Form>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserRegistration;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\UpdatePatientEnrollment.js",["395","396","397","398","399","400","401","402","403","404","405","406","407","408","409"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport MatButton from \"@material-ui/core/Button\";\nimport Button from \"@material-ui/core/Button\";\nimport { FormGroup, Label, Spinner, Input, Form, InputGroup } from \"reactstrap\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faCheckSquare,\n  faCoffee,\n  faEdit,\n  faTrash,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport { TiArrowBack } from \"react-icons/ti\";\nimport { token, url as baseUrl } from \"../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"./patient.css\";\n// import Form from 'react-bootstrap/Form';\nimport { Modal } from \"react-bootstrap\";\n\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    flexGrow: 1,\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst UserRegistration = (props) => {\n  const [basicInfo, setBasicInfo] = useState({\n    fullname: \"\",\n    sex: \"\",\n    age: \"\",\n    hospitalNumber: \"\",\n  });\n  const [saving, setSaving] = useState(false);\n  const [disabledAgeBaseOnAge, setDisabledAgeBaseOnAge] = useState(false);\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [genders, setGenders] = useState([]);\n  const [ancNumberCheck, setAncNumberCheck] = useState(false);\n  const [errors, setErrors] = useState({});\n  const userDetail =\n    props.location && props.location.state ? props.location.state.user : null;\n  const classes = useStyles();\n  const history = useHistory();\n  const location = useLocation();\n\n  //const [values, setValues] = useState([]);\n  const [objValues, setObjValues] = useState({\n    ancNo: \"\",\n    gaweeks: \"\",\n    gravida: \"\",\n    expectedDeliveryDate: \"\",\n    firstAncDate: \"\",\n    lmp: \"\",\n    parity: \"\",\n    person_uuid: \"\",\n    hivDiognosicTime: \"\",\n    referredSyphilisTreatment: \"\",\n    testResultSyphilis: \"\",\n    testedSyphilis: \"\",\n    treatedSyphilis: \"\",\n    personDto: {},\n    pmtctHtsInfo: {},\n    syphilisInfo: {},\n    partnerNotification: {},\n    sourceOfReferral: \"\",\n    staticHivStatus: \"\",\n  });\n  const [pregnancyStatus, setPregnancyStatus] = useState([]);\n  //set ro show the facility name field if is transfer in\n\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const locationState = location.state;\n  console.log(locationState);\n  let patientId = null;\n  let actionType = null;\n  let recordId = null;\n  let patientObj = {};\n  patientId = locationState ? locationState.patientId : null;\n  recordId = locationState ? locationState.id : null;\n  actionType = locationState ? locationState.actionType : null;\n  patientObj = locationState ? locationState.patientObj : {};\n  const [sourceOfReferral, setSourceOfReferral] = useState([]);\n  const [disabledField, setDisabledField] = useState(false);\n  const [allNewEntryPoint, setAllNewEntryPoint] = useState([]);\n  const [entryValueDisplay, setEntryValueDisplay] = useState({});\n\n  const NEW_POINT_ENTRY_PMTCT = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PMTCT_ENTRY_POINT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setAllNewEntryPoint(response.data);\n        console.log(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const getPatientEntryType = (id) => {\n    allNewEntryPoint.map((each, i) => {\n\n      if (each.code === locationState.entrypointValue) {\n        setEntryValueDisplay(each);\n        console.log(\"location choosennn\", each);\n      }\n    });\n  };\n\n  useEffect(() => {\n    loadGenders();\n    getSex();\n    PregnancyStatus();\n    //console.log(patientObj)\n    if (patientObj) {\n      setDisabledField(actionType === \"view\" ? true : false);\n      setObjValues({ ...patientObj });\n      basicInfo.fullname = patientObj.fullname;\n      basicInfo.age = patientObj.age;\n      basicInfo.hospitalNumber = patientObj.hospitalNumber;\n      basicInfo.sex = patientObj.sex;\n      //syphilisInfo\n    }\n\n    SOURCE_REFERRAL_PMTCT();\n  }, [patientObj, patientId, actionType]);\n\n  useEffect(() => {\n    viewANCInfo();\n    if (locationState.entrypointValue) {\n      getPatientEntryType();\n    }\n  }, []);\n  //Get list of Source of Referral\n  const SOURCE_REFERRAL_PMTCT = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL_PMTCT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSourceOfReferral(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const viewANCInfo = () => {\n    axios\n      .get(`${baseUrl}pmtct/anc/${location.state.id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setObjValues({ ...response.data });\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const getSex = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        let patientSex = \"\";\n        if (\n          patientObj.sex === \"female\" ||\n          patientObj.sex === \"Female\" ||\n          patientObj.sex === \"FEMALE\"\n        ) {\n          patientSex = \"Female\";\n        }\n        if (\n          patientObj.sex === \"Male\" ||\n          patientObj.sex === \"male\" ||\n          patientObj.sex === \"MALE\"\n        ) {\n          patientSex = \"Male\";\n        }\n        const getSexId = response.data.find((x) => x.display === patientSex); //get patient sex ID by filtering the request\n        basicInfo.sexId = getSexId.display;\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const loadGenders = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/SEX`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setGenders(response.data);\n    } catch (e) {}\n  }, []);\n\n  const handleAgeChange = (e) => {\n    const ageNumber = e.target.value.replace(/\\D/g, \"\");\n    if (!ageDisabled && ageNumber) {\n      if (ageNumber !== \"\" && ageNumber >= 60) {\n        toggle();\n      }\n      if (ageNumber <= 1) {\n        setDisabledAgeBaseOnAge(true);\n      } else {\n        setDisabledAgeBaseOnAge(false);\n      }\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(ageNumber * -1, \"years\");\n      //setBasicInfo({...basicInfo, dob: moment(dobNew).format(\"YYYY-MM-DD\")});\n      basicInfo.dob = moment(dobNew).format(\"YYYY-MM-DD\");\n    }\n    setBasicInfo({ ...basicInfo, age: ageNumber });\n  };\n  //End of Date of Birth and Age handling\n  /*****  Validation  */\n  const validate = () => {\n    let temp = { ...errors };\n\n    //temp.firstAncDate = objValues.firstAncDate ? \"\" : \"This field is required\"\n    temp.gaweeks = objValues.gaweeks ? \"\" : \"This field is required\";\n    temp.gravida = objValues.gravida ? \"\" : \"This field is required\";\n    objValues.testResultSyphilis === \"Yes\" &&\n      (temp.referredSyphilisTreatment = objValues.referredSyphilisTreatment\n        ? \"\"\n        : \"This field is required\");\n    temp.lmp = objValues.lmp ? \"\" : \"This field is required\";\n    temp.parity = objValues.parity !== \"\" ? \"\" : \"This field is required\";\n        temp.testedSyphilis = objValues.testedSyphilis\n      ? \"\"\n      : \"This field is required\";\n    objValues.testResultSyphilis === \"Yes\" &&\n      (temp.treatedSyphilis = objValues.treatedSyphilis\n        ? \"\"\n        : \"This field is required\");\n    temp.sourceOfReferral = objValues.sourceOfReferral\n      ? \"\"\n      : \"This field is required\";\n    objValues.testedSyphilis === \"Yes\" &&\n      (temp.testResultSyphilis = objValues.testResultSyphilis\n        ? \"\"\n        : \"This field is required\");\n    temp.staticHivStatus = objValues.staticHivStatus\n      ? \"\"\n      : \"This field is required\";\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  //Handle Input Change for Basic Infor\n  const handleInputChangeBasic = (e) => {\n    setErrors({ ...errors, [e.target.name]: \"\" });\n    setBasicInfo({ ...basicInfo, [e.target.name]: e.target.value });\n  };\n\n  //Get list of KP\n  const PregnancyStatus = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PREGANACY_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setPregnancyStatus(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputChange = (e) => {\n    setErrors({ ...errors, [e.target.name]: \"\" });\n    if (e.target.name === \"ancNo\" && e.target.value !== \"\") {\n      async function getAncNumber() {\n        const ancNumber = e.target.value;\n        const ancNo = {\n          ancNo: ancNumber,\n        };\n        const response = await axios.post(\n          `${baseUrl}pmtct/anc/exist/anc-number/${ancNumber}`,\n          ancNo,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data === true) {\n          toast.error(\"ANC number already exist\");\n          setAncNumberCheck(response.data);\n        } else {\n          setAncNumberCheck(false);\n        }\n      }\n      getAncNumber();\n    }\n    if (e.target.name === \"lmp\" && e.target.value !== \"\") {\n      async function getGa() {\n        const ga = e.target.value;\n        const response = await axios.get(\n          `${baseUrl}pmtct/anc/calculate-ga/${ga}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data > 0) {\n          objValues.gaweeks = response.data;\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\n        } else {\n          objValues.gaweeks = response.data;\n          toast.error(\"Please select a validate date\");\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\n        }\n      }\n      getGa();\n    }\n    if (\n      e.target.name === \"parity\" &&\n      e.target.value !== \"\" &&\n      e.target.value < 0\n    ) {\n      //The field will  not accept zero as a value\n      return;\n    } //gravida\n    if (\n      e.target.name === \"gravida\" &&\n      e.target.value !== \"\" &&\n      e.target.value <= 0\n    ) {\n      //The field will  not accept zero as a value\n      return;\n    }\n    if (\n      e.target.name === \"testedSyphilis\" &&\n      e.target.value !== \"\" &&\n      e.target.value === \"Yes\"\n    ) {\n      //The field will  not accept zero as a value\n      objValues.testResultSyphilis = \"\";\n      objValues.referredSyphilisTreatment = \"\";\n      objValues.treatedSyphilis = \"\";\n      setObjValues({ ...objValues, [\"testResultSyphilis\"]: \"\" });\n      setObjValues({ ...objValues, [\"referredSyphilisTreatment\"]: \"\" });\n      setObjValues({ ...objValues, [\"treatedSyphilis\"]: \"\" });\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    }\n    if (\n      e.target.name === \"testResultSyphilis\" &&\n      e.target.value !== \"\" &&\n      e.target.value === \"Positive\"\n    ) {\n      //The field will  not accept zero as a value\n      objValues.treatedSyphilis = \"\";\n      objValues.referredSyphilisTreatment = \"\";\n      setObjValues({ ...objValues, [\"treatedSyphilis\"]: \"\" });\n      setObjValues({ ...objValues, [\"referredSyphilisTreatment\"]: \"\" });\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n\n  //Handle CheckBox\n\n  const handleCancel = () => {\n    history.push({ pathname: \"/\" });\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (validate()) {\n      try {\n        objValues.person_uuid = patientObj.uuid;\n        const response = await axios.put(\n          `${baseUrl}pmtct/anc/update-anc/${recordId}`,\n          objValues,\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n        toast.success(\"Record updated  successful\", {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n        history.push({\n          pathname: \"/patient-history\",\n          state: {\n            patientObj: patientObj,\n            postValue: entryValueDisplay.display,\n            entrypointValue: entryValueDisplay.code,\n          },\n        });\n      } catch (error) {\n        if (error.response && error.response.data) {\n          let errorMessage =\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\"\n              ? error.response.data.apierror.message\n              : \"Something went wrong, please try again\";\n          if (\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\" &&\n            error.response.data.apierror &&\n            error.response.data.apierror.subErrors[0].message !== \"\"\n          ) {\n            toast.error(\n              error.response.data.apierror.message +\n                \" : \" +\n                error.response.data.apierror.subErrors[0].field +\n                \" \" +\n                error.response.data.apierror.subErrors[0].message,\n              { position: toast.POSITION.BOTTOM_CENTER }\n            );\n          } else {\n            toast.error(errorMessage, {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        } else {\n          toast.error(\"Something went wrong. Please try again...\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        }\n      }\n    }\n  };\n  console.log(errors);\n  return (\n    <>\n      <div\n        className=\"row page-titles mx-0\"\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\n      >\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item active\">\n            <h4>\n              {\" \"}\n              <Link to={\"/\"}>PMTCT /</Link> Patient Enrollment\n            </h4>\n          </li>\n        </ol>\n      </div>\n      <ToastContainer autoClose={3000} hideProgressBar />\n      <Card className={classes.root}>\n        <CardContent>\n          <Link\n            to={{\n              pathname: \"/patient-history\",\n              state: { patientObj: patientObj },\n            }}\n          >\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\" float-end ms-1\"\n              style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\n              startIcon={<TiArrowBack />}\n            >\n              <span style={{ textTransform: \"capitalize\", color: \"#fff\" }}>\n                Back{\" \"}\n              </span>\n            </Button>\n          </Link>\n          <br />\n          <br />\n          <div className=\"col-xl-12 col-lg-12\">\n            <Form>\n              <div className=\"card\">\n                <div\n                  className=\"card-header\"\n                  style={{\n                    backgroundColor: \"#014d88\",\n                    color: \"#fff\",\n                    fontWeight: \"bolder\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                >\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\n                    {userDetail === null\n                      ? \"Basic Information\"\n                      : \"Edit User Information\"}\n                  </h5>\n                </div>\n\n                <div className=\"card-body\">\n                  <div className=\"basic-form\">\n                    <div className=\"row\">\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"firstName\">Name</Label>\n                          <Input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"firstName\"\n                            id=\"firstName\"\n                            value={\n                              location.state?.patientObj?.fullName\n                                ? location?.state.patientObj?.fullName\n                                : location?.state?.patientObj?.fullname\n                            }\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"none\",\n                              backgroundColor: \"transparent\",\n                              outline: \"none\",\n                            }}\n                          />\n                          {errors.firstName !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.firstName}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                      {console.log(location.state.patientObj)}\n\n                      <div className=\"form-group mb-3 col-md-3\">\n                        <FormGroup>\n                          <Label for=\"patientId\">Hospital Number </Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"hospitalNumber\"\n                            id=\"hospitalNumber\"\n                            value={basicInfo.hospitalNumber}\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"none\",\n                              backgroundColor: \"transparent\",\n                              outline: \"none\",\n                            }}\n                            //disabled\n                          />\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group  col-md-2\">\n                        <FormGroup>\n                          <Label>Sex </Label>\n                          <Input\n                            className=\"form-control\"\n                            name=\"sexId\"\n                            id=\"sexId\"\n                            onChange={handleInputChangeBasic}\n                            value={basicInfo.sex}\n                            style={{\n                              border: \"none\",\n                              backgroundColor: \"transparent\",\n                              outline: \"none\",\n                            }}\n                          />\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-3 col-md-2\">\n                        <FormGroup>\n                          <Label>Age</Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"age\"\n                            id=\"age\"\n                            value={basicInfo.age}\n                            disabled={ageDisabled}\n                            onChange={handleAgeChange}\n                            style={{\n                              border: \"none\",\n                              backgroundColor: \"transparent\",\n                              outline: \"none\",\n                            }}\n                          />\n                        </FormGroup>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Adding  ENROLLEMENT FORM HERE */}\n              <div className=\"card\">\n                <div\n                  className=\"card-header\"\n                  style={{\n                    backgroundColor: \"#014d88\",\n                    color: \"#fff\",\n                    fontWeight: \"bolder\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                >\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\n                    ANC Enrollment\n                  </h5>\n                </div>\n                <div className=\"card-body\">\n                  <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          ANC No <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"text\"\n                            name=\"ancNo\"\n                            id=\"ancNo\"\n                            onChange={handleInputChange}\n                            value={objValues.ancNo}\n                            disabled\n                          />\n                        </InputGroup>\n                        {errors.ancNo !== \"\" ? (\n                          <span className={classes.error}>{errors.ancNo}</span>\n                        ) : (\n                          \"\"\n                        )}\n                        {ancNumberCheck === true ? (\n                          <span className={classes.error}>\n                            {\"ANC number already exist\"}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          Date of Enrollment{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"date\"\n                            name=\"firstAncDate\"\n                            id=\"firstAncDate\"\n                            onChange={handleInputChange}\n                            value={objValues.firstAncDate}\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            disabled={disabledField}\n                          />\n                        </InputGroup>\n                        {errors.firstAncDate !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.firstAncDate}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          Parity <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"number\"\n                            name=\"parity\"\n                            id=\"parity\"\n                            onChange={handleInputChange}\n                            value={objValues.parity}\n                            disabled={disabledField}\n                          />\n                        </InputGroup>\n                        {errors.parity !== \"\" ? (\n                          <span className={classes.error}>{errors.parity}</span>\n                        ) : (\n                          \"\"\n                        )}\n                        {objValues.parity !== \"\" && objValues.parity <= 0 ? (\n                          <span className={classes.error}>\n                            Parity should not be less than 1\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          Gravida <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"number\"\n                            name=\"gravida\"\n                            id=\"gravida\"\n                            onChange={handleInputChange}\n                            value={objValues.gravida}\n                            disabled={disabledField}\n                          />\n                        </InputGroup>\n                        {errors.gravida !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.gravida}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                        {objValues.gravida < objValues.parity ? (\n                          <span className={classes.error}>\n                            Gravida should not be less Parity\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          Date Of Last Menstrual Period{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"date\"\n                            name=\"lmp\"\n                            id=\"lmp\"\n                            onChange={handleInputChange}\n                            value={objValues.lmp}\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            disabled\n                          />\n                        </InputGroup>\n                        {errors.lmp !== \"\" ? (\n                          <span className={classes.error}>{errors.lmp}</span>\n                        ) : (\n                          \"\"\n                        )}\n                        {objValues.gaweeks === 0 ? (\n                          <span className={classes.error}>Invalid date </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          Gestational Age (Weeks){\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"number\"\n                            name=\"gaweeks\"\n                            id=\"gaweeks\"\n                            onChange={handleInputChange}\n                            value={objValues.gaweeks}\n                            disabled={disabledField}\n                          />\n                        </InputGroup>\n                        {errors.gaweeks !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.gaweeks}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          Source of Referral{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"select\"\n                            name=\"sourceOfReferral\"\n                            id=\"sourceOfReferral\"\n                            onChange={handleInputChange}\n                            value={objValues.sourceOfReferral}\n                            disabled={disabledField}\n                          >\n                            <option value=\"\">Select</option>\n                            {sourceOfReferral.map((value, index) => (\n                              <option key={index} value={value.code}>\n                                {value.display}\n                              </option>\n                            ))}\n                          </Input>\n                        </InputGroup>\n                        {errors.sourceOfReferral !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.sourceOfReferral}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          Tested for syphilis{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"select\"\n                            name=\"testedSyphilis\"\n                            id=\"testedSyphilis\"\n                            onChange={handleInputChange}\n                            value={objValues.testedSyphilis}\n                            disabled={disabledField}\n                          >\n                            <option value=\"\">Select</option>\n                            <option value=\"Yes\">Yes</option>\n                            <option value=\"No\">No</option>\n                          </Input>\n                        </InputGroup>\n                        {errors.testedSyphilis !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.testedSyphilis}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    {objValues.testedSyphilis === \"Yes\" && (\n                      <>\n                        <div className=\"form-group mb-3 col-md-6\">\n                          <FormGroup>\n                            <Label>\n                              Syphilis test result{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <InputGroup>\n                              <Input\n                                type=\"select\"\n                                name=\"testResultSyphilis\"\n                                id=\"testResultSyphilis\"\n                                onChange={handleInputChange}\n                                value={objValues.testResultSyphilis}\n                                disabled={disabledField}\n                              >\n                                <option value=\"\">Select</option>\n                                <option value=\"Positive\">Positive</option>\n                                <option value=\"Negative\">Negative</option>\n                              </Input>\n                            </InputGroup>\n                            {errors.testResultSyphilis !== \"\" ? (\n                              <span className={classes.error}>\n                                {errors.testResultSyphilis}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                        {objValues.testedSyphilis === \"Yes\" &&\n                          objValues.testResultSyphilis === \"Positive\" && (\n                            <>\n                              <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                  <Label>\n                                    Treated for syphilis (penicillin){\" \"}\n                                    <span style={{ color: \"red\" }}> *</span>\n                                  </Label>\n                                  <InputGroup>\n                                    <Input\n                                      type=\"select\"\n                                      name=\"treatedSyphilis\"\n                                      id=\"treatedSyphilis\"\n                                      onChange={handleInputChange}\n                                      value={objValues.encounterDate}\n                                      disabled={disabledField}\n                                    >\n                                      <option value=\"\">Select</option>\n                                      <option value=\"Yes\">Yes</option>\n                                      <option value=\"No\">No</option>\n                                    </Input>\n                                  </InputGroup>\n                                  {errors.treatedSyphilis !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.treatedSyphilis}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                  <Label>\n                                    Referred Syphilis +ve client{\" \"}\n                                    <span style={{ color: \"red\" }}> *</span>\n                                  </Label>\n                                  <InputGroup>\n                                    <Input\n                                      type=\"select\"\n                                      name=\"referredSyphilisTreatment\"\n                                      id=\"referredSyphilisTreatment\"\n                                      onChange={handleInputChange}\n                                      value={\n                                        objValues.referredSyphilisTreatment\n                                      }\n                                      disabled={disabledField}\n                                    >\n                                      <option value=\"\">Select</option>\n                                      <option value=\"Yes\">Yes</option>\n                                      <option value=\"No\">No</option>\n                                    </Input>\n                                  </InputGroup>\n                                  {errors.referredSyphilisTreatment !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.referredSyphilisTreatment}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n                            </>\n                          )}\n                      </>\n                    )}\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          HIV Status <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"select\"\n                            name=\"staticHivStatus\"\n                            id=\"staticHivStatus\"\n                            onChange={handleInputChange}\n                            value={objValues.staticHivStatus}\n                            disabled={disabledField}\n                          >\n                            <option value=\"\">Select</option>\n                            <option value=\"Positive\">Positive</option>\n                            <option value=\"Negative\">Negative</option>\n                            <option value=\"Unknown\">Unknown</option>\n                          </Input>\n                        </InputGroup>\n                        {errors.staticHivStatus !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.staticHivStatus}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {/* END OF HIV ENROLLEMENT FORM */}\n              {saving ? <Spinner /> : \"\"}\n\n              <br />\n\n              {objValues.gaweeks > 0 &&\n                ancNumberCheck !== true &&\n                objValues.gravida >= objValues.parity && (\n                  <MatButton\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    hidden={disabledField}\n                    className={classes.button}\n                    startIcon={<SaveIcon />}\n                    disabled={disabledAgeBaseOnAge}\n                    onClick={handleSubmit}\n                  >\n                    {!saving ? (\n                      <span style={{ textTransform: \"capitalize\" }}>\n                        Update\n                      </span>\n                    ) : (\n                      <span style={{ textTransform: \"capitalize\" }}>\n                        Updating...\n                      </span>\n                    )}\n                  </MatButton>\n                )}\n              <MatButton\n                variant=\"contained\"\n                className={classes.button}\n                startIcon={<CancelIcon />}\n                onClick={handleCancel}\n                style={{ backgroundColor: \"#992E62\" }}\n              >\n                <span style={{ textTransform: \"capitalize\", color: \"#fff\" }}>\n                  Cancel\n                </span>\n              </MatButton>\n            </Form>\n          </div>\n        </CardContent>\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"sm\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Are you Sure of the Age entered?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default UserRegistration;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Home.js",["410","411"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport { Row, Col, Card, Tab, Tabs } from \"react-bootstrap\";\r\nimport NotEnrollPatients from \"./Patient/PatientList\";\r\nimport ActiveANCPatients from \"./Patient/ActiveANCPatientList\";\r\n//import VisualisationHome from './Visualisation/Index'\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport PmtctEntryPoint from \"./PmtctServices/PmtctEntryPoint\";\r\nimport ANCPatients from \"./Patient/ActiveANCPatientList\";\r\nimport PmtctPatients from \"./Patient/PmtctPatients\";\r\n\r\n//import PageTitle from \"./../layouts/PageTitle\";\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst Home = (props) => {\r\n  const [key, setKey] = useState(\"home\");\r\n  const [modalShow, setModalShow] = useState(false);\r\n  useEffect(() => {\r\n    setKey(\"home\");\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        className=\"row page-titles mx-0\"\r\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\r\n      >\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item active\">\r\n            <h4>PMTCT</h4>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n      {/* <Link to={\"register-patient\"}> */}\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\" float-end mb-10\"\r\n        startIcon={<FaUserPlus size=\"10\" />}\r\n        style={{ backgroundColor: \"#014d88\" }}\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          setModalShow(true);\r\n        }}\r\n      >\r\n        <span style={{ textTransform: \"capitalize\" }}>New Patient</span>\r\n      </Button>\r\n      {/* </Link> */}\r\n      <br />\r\n      <br />\r\n      <Row>\r\n        <Col xl={12}>\r\n          <Card style={divStyle}>\r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                  id=\"controlled-tab-example\"\r\n                  activeKey={key}\r\n                  onSelect={(k) => setKey(k)}\r\n                  className=\"mb-3\"\r\n                >\r\n                  <Tab eventKey=\"home\" title=\"Find Patients\">\r\n                    <NotEnrollPatients />\r\n                  </Tab>\r\n                  <Tab eventKey=\"anc\" title=\"ANC Patients\">\r\n                    <ANCPatients />\r\n                  </Tab>\r\n\r\n                  <Tab eventKey=\"pmtct\" title=\"General PMTCT Patients\">\r\n                    <PmtctPatients />\r\n                  </Tab>\r\n                  {/* <Tab eventKey=\"visualization\" title=\"Data Visualisation\">                   \r\n                    <VisualisationHome />\r\n                  </Tab>                     */}\r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <PmtctEntryPoint\r\n        route=\"/register-patient\"\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\RegisterPatient.js",["412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { FormGroup, Label, Spinner, Input, Form, InputGroup } from \"reactstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport {\r\n  faCheckSquare,\r\n  faCoffee,\r\n  faEdit,\r\n  faTrash,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport \"./patient.css\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { DateTimePicker } from \"react-widgets\";\r\nimport PmtctEnrollment from \"../PmtctServices/PmtctEnrollment\";\r\n\r\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst UserRegistration = (props) => {\r\n  const { state } = useLocation();\r\n\r\n  const [basicInfo, setBasicInfo] = useState({\r\n    active: true,\r\n    address: \"\",\r\n    contact: [],\r\n    contactPoint: [],\r\n    dateOfBirth: \"\",\r\n    deceased: false,\r\n    deceasedDateTime: null,\r\n    hospitalNumber: \"\",\r\n    firstName: \"\",\r\n    genderId: \"\",\r\n    identifier: \"\",\r\n    otherName: \"\",\r\n    maritalStatusId: \"\",\r\n    educationId: \"\",\r\n    employmentStatusId: \"\",\r\n    dateOfRegistration: \"\",\r\n    isDateOfBirthEstimated: null,\r\n    age: \"\",\r\n    phoneNumber: \"\",\r\n    altPhonenumber: \"\",\r\n    dob: \"\",\r\n    countryId: 1,\r\n    stateId: \"\",\r\n    district: \"\",\r\n    sexId: 377,\r\n    ninNumber: \"\",\r\n  });\r\n  const [relatives, setRelatives] = useState({\r\n    address: \"\",\r\n    phone: \"\",\r\n    firstName: \"\",\r\n    email: \"\",\r\n    relationshipId: \"\",\r\n    lastName: \"\",\r\n    middleName: \"\",\r\n  });\r\n  const [contacts, setContacts] = useState([]);\r\n  const [saving, setSaving] = useState(false);\r\n  const [disabledAgeBaseOnAge, setDisabledAgeBaseOnAge] = useState(false);\r\n  const [ageDisabled, setAgeDisabled] = useState(true);\r\n  const [showRelative, setShowRelative] = useState(false);\r\n  const [genders, setGenders] = useState([]);\r\n  const [maritalStatusOptions, setMaritalStatusOptions] = useState([]);\r\n  const [educationOptions, setEducationOptions] = useState([]);\r\n  const [occupationOptions, setOccupationOptions] = useState([]);\r\n  const [relationshipOptions, setRelationshipOptions] = useState([]);\r\n  const [countries, setCountries] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [provinces, setProvinces] = useState([]);\r\n  const [errors, setErrors] = useState({});\r\n  const [topLevelUnitCountryOptions, settopLevelUnitCountryOptions] = useState(\r\n    []\r\n  );\r\n  const [activeContent, setActiveContent] = useState({\r\n    route: \"recent-history\",\r\n    id: \"\",\r\n    activeTab: \"home\",\r\n    actionType: \"\",\r\n    obj: {},\r\n  });\r\n\r\n  const userDetail =\r\n    props.location && props.location.state ? props.location.state.user : null;\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  //HIV INFORMATION\r\n  const [femaleStatus, setfemaleStatus] = useState(false);\r\n  //const [values, setValues] = useState([]);\r\n  const [objValues, setObjValues] = useState({\r\n    ancNo: \"\",\r\n    gaweeks: \"\",\r\n    gravida: \"\",\r\n    expectedDeliveryDate: \"\",\r\n    firstAncDate: \"\",\r\n    lmp: \"\",\r\n    parity: \"\",\r\n    hivDiognosicTime: \"\",\r\n    referredSyphilisTreatment: \"\",\r\n    testResultSyphilis: \"\",\r\n    testedSyphilis: \"\",\r\n    treatedSyphilis: \"\",\r\n    personDto: {},\r\n    pmtctHtsInfo: {},\r\n    syphilisInfo: {},\r\n    partnerNotification: {},\r\n    staticHivStatus: \"\",\r\n  });\r\n  const [enroll, setEnrollDto] = useState({\r\n    // ancNo: patientObj.ancNo,\r\n    pmtctEnrollmentDate: \"\",\r\n    entryPoint: \"\",\r\n    // ga: props.patientObj.gaweeks,\r\n    // gravida: props.patientObj.gravida,\r\n    artStartDate: \"\",\r\n    artStartTime: \"\",\r\n    id: \"\",\r\n    tbStatus: \"\",\r\n    personDto: {},\r\n  });\r\n  const [carePoints, setCarePoints] = useState([]);\r\n  const [sourceReferral, setSourceReferral] = useState([]);\r\n  const [pregnancyStatus, setPregnancyStatus] = useState([]);\r\n  //set ro show the facility name field if is transfer in\r\n  const [ancNumberCheck, setAncNumberCheck] = useState(false);\r\n  //status for hospital Number\r\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [PMTCTObj, setPMTCTObj] = useState({});\r\n\r\n  const toggle = () => setOpen(!open);\r\n  const locationState = location.state;\r\n  console.log(\"state recieved from location\", locationState);\r\n  let patientId = null;\r\n  patientId = locationState ? locationState.patientId : null;\r\n\r\n  let temp = { ...errors };\r\n\r\n  useEffect(() => {\r\n    loadGenders();\r\n    loadMaritalStatus();\r\n    loadEducation();\r\n    loadOccupation();\r\n    loadRelationships();\r\n    loadTopLevelCountry();\r\n    CareEntryPoint();\r\n    SourceReferral();\r\n    PregnancyStatus();\r\n    GetCountry();\r\n    setStateByCountryId();\r\n    if (basicInfo.dateOfRegistration < basicInfo.dob) {\r\n      alert(\"Date of registration can not be earlier than date of birth\");\r\n    }\r\n  }, [basicInfo.dateOfRegistration]);\r\n\r\n  const loadGenders = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/SEX`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setGenders(response.data);\r\n    } catch (e) {}\r\n  }, []);\r\n  const loadMaritalStatus = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/MARITAL_STATUS`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setMaritalStatusOptions(response.data);\r\n    } catch (e) {}\r\n  }, []);\r\n  const loadEducation = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/EDUCATION`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setEducationOptions(response.data);\r\n    } catch (e) {}\r\n  }, []);\r\n  const loadOccupation = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/OCCUPATION`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setOccupationOptions(response.data);\r\n    } catch (e) {}\r\n  }, []);\r\n  const loadRelationships = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}application-codesets/v2/RELATIONSHIP`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setRelationshipOptions(response.data);\r\n    } catch (e) {}\r\n  }, []);\r\n  const loadTopLevelCountry = useCallback(async () => {\r\n    const response = await axios.get(\r\n      `${baseUrl}organisation-units/parent-organisation-units/0`,\r\n      { headers: { Authorization: `Bearer ${token}` } }\r\n    );\r\n    settopLevelUnitCountryOptions(response.data);\r\n  }, []);\r\n  //Country List\r\n  const GetCountry = () => {\r\n    axios\r\n      .get(`${baseUrl}organisation-units/parent-organisation-units/0`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setCountries(response.data);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  //Get list of State\r\n  const setStateByCountryId = () => {\r\n    axios\r\n      .get(`${baseUrl}organisation-units/parent-organisation-units/1`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        // console.log(response.data);\r\n        setStates(response.data);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n  //fetch province\r\n  const getProvinces = (e) => {\r\n    const stateId = e.target.value;\r\n    if (e.target.value) {\r\n      setErrors({ ...errors, stateId: \"\" });\r\n    }\r\n    setBasicInfo({ ...basicInfo, stateId: e.target.value });\r\n    axios\r\n      .get(\r\n        `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setProvinces(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  //Date of Birth and Age handle\r\n  const handleDobChange = (e) => {\r\n    if (e.target.value) {\r\n      setErrors({ ...errors, dob: \"\" });\r\n\r\n      const today = new Date();\r\n      const birthDate = new Date(e.target.value);\r\n      let age_now = today.getFullYear() - birthDate.getFullYear();\r\n      const m = today.getMonth() - birthDate.getMonth();\r\n\r\n      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n        age_now--;\r\n      }\r\n      basicInfo.age = age_now;\r\n      //setBasicInfo({...basicInfo, age: age_now});\r\n    } else {\r\n      setBasicInfo({ ...basicInfo, age: \"\" });\r\n    }\r\n    setBasicInfo({ ...basicInfo, dob: e.target.value });\r\n    if (basicInfo.age !== \"\" && basicInfo.age >= 60) {\r\n      toggle();\r\n    }\r\n  };\r\n  const handleDateOfBirthChange = (e) => {\r\n    if (e.target.value == \"Actual\") {\r\n      setAgeDisabled(true);\r\n    } else if (e.target.value == \"Estimated\") {\r\n      setAgeDisabled(false);\r\n    }\r\n  };\r\n  const handleAgeChange = (e) => {\r\n    if (!ageDisabled && e.target.value) {\r\n      if (e.target.value !== \"\" && e.target.value >= 60) {\r\n        toggle();\r\n      }\r\n      if (e.target.value <= 1) {\r\n        setDisabledAgeBaseOnAge(true);\r\n      } else {\r\n        setDisabledAgeBaseOnAge(false);\r\n      }\r\n      const currentDate = new Date();\r\n      currentDate.setDate(15);\r\n      currentDate.setMonth(5);\r\n      const estDob = moment(currentDate.toISOString());\r\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\r\n      //setBasicInfo({...basicInfo, dob: moment(dobNew).format(\"YYYY-MM-DD\")});\r\n      basicInfo.dob = moment(dobNew).format(\"YYYY-MM-DD\");\r\n    }\r\n    setBasicInfo({ ...basicInfo, age: Math.abs(e.target.value) });\r\n  };\r\n  //End of Date of Birth and Age handling\r\n  //Handle Input Change for Basic Infor\r\n  const handleInputChangeBasic = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n    //manupulate inpute fields base on gender/sex\r\n    if (e.target.name === \"sexId\" && e.target.value === \"377\") {\r\n      setfemaleStatus(true);\r\n    } else if (e.target.name === \"firstName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setBasicInfo({ ...basicInfo, [e.target.name]: name });\r\n    } else if (e.target.name === \"lastName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setBasicInfo({ ...basicInfo, [e.target.name]: name });\r\n    } else if (e.target.name === \"middleName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setBasicInfo({ ...basicInfo, [e.target.name]: name });\r\n    } else if (e.target.name === \"ninNumber\" && e.target.value !== \"\") {\r\n      const ninNumberValue = checkNINLimit(e.target.value);\r\n      setBasicInfo({ ...basicInfo, [e.target.name]: ninNumberValue });\r\n    } else if (e.target.name === \"ancNo\" && e.target.value !== \"\") {\r\n      async function getAncNumber() {\r\n        const ancNumber = e.target.value;\r\n        const response = await axios.get(\r\n          `${baseUrl}pmtct/anc/exist/anc-number/${ancNumber}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        );\r\n        if (response.data === true) {\r\n          toast.error(\"ANC number already exist\");\r\n          setAncNumberCheck(response.data);\r\n        } else {\r\n          setAncNumberCheck(false);\r\n        }\r\n      }\r\n      getAncNumber();\r\n    } else if (e.target.name === \"hospitalNumber\" && e.target.value !== \"\") {\r\n      setBasicInfo({\r\n        ...basicInfo,\r\n        hospitalNumber: e.target.value,\r\n      });\r\n      async function getHosiptalNumber() {\r\n        const hosiptalNumber = e.target.value;\r\n        const response = await axios.post(\r\n          `${baseUrl}patient/exist/hospital-number`,\r\n          hosiptalNumber,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        );\r\n        if (response.data !== true) {\r\n          setHospitalNumStatus(false);\r\n          errors.hospitalNumber = \"\";\r\n        } else {\r\n          errors.hospitalNumber = \"\";\r\n          toast.error(\"Error! Hosiptal Number already exist\");\r\n          setHospitalNumStatus(true);\r\n        }\r\n      }\r\n      getHosiptalNumber();\r\n    } else {\r\n      setBasicInfo({ ...basicInfo, [e.target.name]: e.target.value });\r\n    }\r\n  };\r\n  //Function to show relatives\r\n  const handleAddRelative = () => {\r\n    setShowRelative(true);\r\n  };\r\n  //Function to cancel the relatives form\r\n  const handleCancelSaveRelationship = () => {\r\n    setShowRelative(false);\r\n  };\r\n  /*****  Validation  Relationship Input*/\r\n  const validateRelatives = () => {\r\n    let temp = { ...errors };\r\n    temp.firstName = relatives.firstName ? \"\" : \"First Name is required\";\r\n    temp.lastName = relatives.lastName ? \"\" : \"Last Name  is required.\";\r\n    temp.phone = relatives.phone ? \"\" : \"Phone Number  is required.\";\r\n    temp.relationshipId = relatives.relationshipId\r\n      ? \"\"\r\n      : \"Relationship Type is required.\";\r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n  // GET PMTCT INPUT FROM THE PMTCT COMPONENT\r\n  const getPMTCTInfo = (info) => {\r\n    // console.log(info);\r\n    setPMTCTObj(info);\r\n    return info;\r\n  };\r\n\r\n  //Function to add relatives\r\n  const handleSaveRelationship = (e) => {\r\n    if (validateRelatives()) {\r\n      setContacts([...contacts, relatives]);\r\n      setRelatives({\r\n        address: \"\",\r\n        phone: \"\",\r\n        firstName: \"\",\r\n        email: \"\",\r\n        relationshipId: \"\",\r\n        lastName: \"\",\r\n        middleName: \"\",\r\n      });\r\n    }\r\n  };\r\n  const handleDeleteRelative = (index) => {\r\n    contacts.splice(index, 1);\r\n    setContacts([...contacts]);\r\n  };\r\n\r\n  const handleEditRelative = (relative, index) => {\r\n    setRelatives(relative);\r\n    setShowRelative(true);\r\n    contacts.splice(index, 1);\r\n  };\r\n  const getRelationship = (relationshipId) => {\r\n    const relationship = relationshipOptions.find(\r\n      (obj) => obj.id === relationshipId\r\n    );\r\n    return relationship ? relationship.display : \"\";\r\n  };\r\n  const handleInputChangeRelatives = (e) => {\r\n    setRelatives({ ...relatives, [e.target.name]: e.target.value });\r\n  };\r\n  const handleInputChangeANC = (e) => {\r\n    setErrors({ ...errors, [e.target.name]: \"\" });\r\n    if (e.target.name === \"ancNo\" && e.target.value !== \"\") {\r\n      async function getAncNumber() {\r\n        const ancNumber = e.target.value;\r\n        const ancNo = {\r\n          ancNo: ancNumber,\r\n        };\r\n        const response = await axios.post(\r\n          `${baseUrl}pmtct/anc/exist/anc-number/${ancNumber}`,\r\n          ancNo,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        );\r\n        if (response.data === true) {\r\n          toast.error(\"ANC number already exist\", {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n          setAncNumberCheck(response.data);\r\n        } else {\r\n          setAncNumberCheck(false);\r\n        }\r\n      }\r\n      getAncNumber();\r\n    }\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n  };\r\n  /*****  Validation  */\r\n  const validate = () => {\r\n    temp.firstName = basicInfo.firstName ? \"\" : \"First Name is required\";\r\n    temp.hospitalNumber = basicInfo.hospitalNumber\r\n      ? \"\"\r\n      : \"Hospital Number  is required.\";\r\n    console.log(temp.hospitalNumber);\r\n    //temp.middleName = basicInfo.middleName ? \"\" : \"Middle is required.\"\r\n    //temp.landmark = basicInfo.landmark ? \"\" : \"This field is required.\"\r\n    temp.lastName = basicInfo.lastName ? \"\" : \"Last Name  is required.\";\r\n    temp.sexId = basicInfo.sexId ? \"\" : \"Gender is required.\";\r\n    temp.dateOfRegistration = basicInfo.dateOfRegistration\r\n      ? \"\"\r\n      : \"Date of Registration is required.\";\r\n    // temp.age =\r\n    //   basicInfo.age !== \"\" && basicInfo.age < 10\r\n    //     ? \"Minimum age for PMTCT enrolment is 10 years\"\r\n    //     : \" \";\r\n    temp.educationId = basicInfo.educationId ? \"\" : \"Education is required.\";\r\n    temp.address = basicInfo.address ? \"\" : \"Address is required.\";\r\n    temp.phoneNumber = basicInfo.phoneNumber\r\n      ? \"\"\r\n      : \"Phone Number  is required.\";\r\n    temp.countryId = basicInfo.countryId ? \"\" : \"Country is required.\";\r\n    temp.stateId = basicInfo.stateId ? \"\" : \"State is required.\";\r\n    temp.district = basicInfo.district ? \"\" : \"Province/LGA is required.\";\r\n    temp.dob = basicInfo.dateOfRegistration ? \"\" : \"Date is required\";\r\n\r\n    //ANC FORM VALIDATION\r\n    if (state.showANC) {\r\n      temp.gaweeks = objValues.gaweeks ? \"\" : \"This field is required\";\r\n      temp.gravida = objValues.gravida ? \"\" : \"This field is required\";\r\n      objValues.testResultSyphilis === \"Positive\" &&\r\n        (temp.referredSyphilisTreatment = objValues.referredSyphilisTreatment\r\n          ? \"\"\r\n          : \"This field is required\");\r\n      temp.lmp = objValues.lmp ? \"\" : \"This field is required\";\r\n      temp.parity = objValues.parity !== \"\" ? \"\" : \"This field is required\";\r\n      temp.testedSyphilis = objValues.testedSyphilis\r\n        ? \"\"\r\n        : \"This field is required\";\r\n      objValues.testResultSyphilis === \"Positive\" &&\r\n        (temp.treatedSyphilis = objValues.treatedSyphilis\r\n          ? \"\"\r\n          : \"This field is required\");\r\n      temp.sourceOfReferral = objValues.sourceOfReferral\r\n        ? \"\"\r\n        : \"This field is required\";\r\n      objValues.testedSyphilis === \"Yes\" &&\r\n        (temp.testResultSyphilis = objValues.testResultSyphilis\r\n          ? \"\"\r\n          : \"This field is required\");\r\n      temp.staticHivStatus = objValues.staticHivStatus\r\n        ? \"\"\r\n        : \"This field is required\";\r\n      temp.ancNo = objValues.ancNo ? \"\" : \"This field is required\";\r\n    }\r\n\r\n    setErrors({ ...temp });\r\n\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"hereeeeee\");\r\n\r\n    if (validate()) {\r\n      if (basicInfo.age > 9) {\r\n        setSaving(true);\r\n        let newConatctsInfo = [];\r\n        //Manipulate relatives contact  address:\"\",\r\n        const actualcontacts =\r\n          contacts &&\r\n          contacts.length > 0 &&\r\n          contacts.map((x) => {\r\n            const contactInfo = {\r\n              address: {\r\n                line: [x.address],\r\n              },\r\n              contactPoint: {\r\n                type: \"phone\",\r\n                value: x.phone,\r\n              },\r\n              firstName: x.firstName,\r\n              fullName: x.firstName + \" \" + x.middleName + \" \" + x.lastName,\r\n              relationshipId: x.relationshipId,\r\n              surname: x.lastName,\r\n              otherName: x.middleName,\r\n            };\r\n\r\n            newConatctsInfo.push(contactInfo);\r\n          });\r\n\r\n        // ANC ENTRY POINT\r\n        if (state.showANC) {\r\n          try {\r\n            const patientForm = {\r\n              active: true,\r\n              address: [\r\n                {\r\n                  city: basicInfo.address,\r\n                  countryId: basicInfo.countryId,\r\n                  district: basicInfo.district,\r\n                  line: [basicInfo.landmark],\r\n                  organisationUnitId: 0,\r\n                  postalCode: \"\",\r\n                  stateId: basicInfo.stateId,\r\n                },\r\n              ],\r\n              contact: newConatctsInfo,\r\n              contactPoint: [],\r\n              dateOfBirth: basicInfo.dob,\r\n              deceased: false,\r\n              deceasedDateTime: null,\r\n              firstName: basicInfo.firstName,\r\n              genderId: basicInfo.sexId,\r\n              sexId: basicInfo.sexId,\r\n              identifier: [\r\n                {\r\n                  assignerId: 1,\r\n                  type: \"HospitalNumber\",\r\n                  value: basicInfo.hospitalNumber,\r\n                },\r\n              ],\r\n              otherName: basicInfo.middleName,\r\n              maritalStatusId: basicInfo.maritalStatusId,\r\n              surname: basicInfo.lastName,\r\n              educationId: basicInfo.educationId,\r\n              employmentStatusId: basicInfo.employmentStatusId,\r\n              dateOfRegistration: basicInfo.dateOfRegistration,\r\n              isDateOfBirthEstimated:\r\n                basicInfo.dateOfBirth == \"Actual\" ? false : true,\r\n              ninNumber: basicInfo.ninNumber,\r\n            };\r\n            const phone = {\r\n              type: \"phone\",\r\n              value: basicInfo.phoneNumber,\r\n            };\r\n            if (basicInfo.email) {\r\n              const email = {\r\n                type: \"email\",\r\n                value: basicInfo.email,\r\n              };\r\n              patientForm.contactPoint.push(email);\r\n            }\r\n            if (basicInfo.altPhonenumber) {\r\n              const altPhonenumber = {\r\n                type: \"altphone\",\r\n                value: basicInfo.altPhonenumber,\r\n              };\r\n              patientForm.contactPoint.push(altPhonenumber);\r\n            }\r\n            patientForm.contactPoint.push(phone);\r\n            patientForm.id = patientId;\r\n            objValues.personDto = patientForm;\r\n            //patientDTO.personDto=objValues;\r\n            console.log(objValues);\r\n\r\n            //\r\n            const response = await axios.post(\r\n              `${baseUrl}pmtct/anc/anc-new-registration`,\r\n              objValues,\r\n              { headers: { Authorization: `Bearer ${token}` } }\r\n            );\r\n            toast.success(\"Patient Register successful\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n            //\r\n            console.log(response.data);\r\n            history.push({\r\n              pathname: \"/patient-history\",\r\n              state: {\r\n                patientObj: response.data,\r\n                postValue: locationState.postValue,\r\n                entrypointValue: locationState.entrypointValue,\r\n              },\r\n            });\r\n            // history.push(\"/\");\r\n            setSaving(false);\r\n          } catch (error) {\r\n            setSaving(false);\r\n            if (error.response && error.response.data) {\r\n              let errorMessage =\r\n                error.response.data.apierror &&\r\n                error.response.data.apierror.message !== \"\"\r\n                  ? error.response.data.apierror.message\r\n                  : \"Something went wrong, please try again\";\r\n              if (\r\n                error.response.data.apierror &&\r\n                error.response.data.apierror.message !== \"\" &&\r\n                error.response.data.apierror &&\r\n                error.response.data.apierror.subErrors[0].message !== \"\"\r\n              ) {\r\n                toast.error(\r\n                  error.response.data.apierror.message +\r\n                    \" : \" +\r\n                    error.response.data.apierror.subErrors[0].field +\r\n                    \" \" +\r\n                    error.response.data.apierror.subErrors[0].message,\r\n                  { position: toast.POSITION.BOTTOM_CENTER }\r\n                );\r\n              } else {\r\n                toast.error(errorMessage, {\r\n                  position: toast.POSITION.BOTTOM_CENTER,\r\n                });\r\n              }\r\n            } else {\r\n              toast.error(\"Something went wrong. Please try again...\", {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          // NOT ANC ENTRY POINT\r\n          console.log(\"here\");\r\n          try {\r\n            const patientForm = {\r\n              active: true,\r\n              address: [\r\n                {\r\n                  city: basicInfo.address,\r\n                  countryId: basicInfo.countryId,\r\n                  district: basicInfo.district,\r\n                  line: [basicInfo.landmark],\r\n                  organisationUnitId: 0,\r\n                  postalCode: \"\",\r\n                  stateId: basicInfo.stateId,\r\n                },\r\n              ],\r\n              contact: newConatctsInfo,\r\n              contactPoint: [],\r\n              dateOfBirth: basicInfo.dob,\r\n              deceased: false,\r\n              deceasedDateTime: null,\r\n              firstName: basicInfo.firstName,\r\n              genderId: basicInfo.sexId,\r\n              sexId: basicInfo.sexId,\r\n              identifier: [\r\n                {\r\n                  assignerId: 1,\r\n                  type: \"HospitalNumber\",\r\n                  value: basicInfo.hospitalNumber,\r\n                },\r\n              ],\r\n              otherName: basicInfo.middleName,\r\n              maritalStatusId: basicInfo.maritalStatusId,\r\n              surname: basicInfo.lastName,\r\n              educationId: basicInfo.educationId,\r\n              employmentStatusId: basicInfo.employmentStatusId,\r\n              dateOfRegistration: basicInfo.dateOfRegistration,\r\n              isDateOfBirthEstimated:\r\n                basicInfo.dateOfBirth == \"Actual\" ? false : true,\r\n              ninNumber: basicInfo.ninNumber,\r\n            };\r\n            const phone = {\r\n              type: \"phone\",\r\n              value: basicInfo.phoneNumber,\r\n            };\r\n            if (basicInfo.email) {\r\n              const email = {\r\n                type: \"email\",\r\n                value: basicInfo.email,\r\n              };\r\n              patientForm.contactPoint.push(email);\r\n            }\r\n            if (basicInfo.altPhonenumber) {\r\n              const altPhonenumber = {\r\n                type: \"altphone\",\r\n                value: basicInfo.altPhonenumber,\r\n              };\r\n              patientForm.contactPoint.push(altPhonenumber);\r\n            }\r\n            patientForm.contactPoint.push(phone);\r\n            patientForm.id = patientId;\r\n            enroll.personDto = patientForm;\r\n            // enroll.entryPoint = locationState.entrypointValue;\r\n            //patientDTO.personDto=objValues;\r\n            //console.log(objValues)\r\n            let payload = {\r\n              ...PMTCTObj,\r\n              personDto: patientForm,\r\n              entryPoint: locationState.entrypointValue,\r\n            };\r\n            console.log(\"payload\", payload);\r\n            const response = await axios.post(\r\n              `${baseUrl}pmtct/anc/pmtct-enrollment`,\r\n              payload,\r\n              { headers: { Authorization: `Bearer ${token}` } }\r\n            );\r\n            toast.success(\"Patient Register successful\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n            history.push({\r\n              pathname: \"/patient-history\",\r\n              state: {\r\n                patientObj: response.data,\r\n                postValue: locationState.postValue,\r\n                entrypointValue: locationState.entrypointValue,\r\n              },\r\n            });\r\n\r\n            // history.push(\"/\");\r\n            setSaving(false);\r\n          } catch (error) {\r\n            setSaving(false);\r\n            if (error.response && error.response.data) {\r\n              let errorMessage =\r\n                error.response.data.apierror &&\r\n                error.response.data.apierror.message !== \"\"\r\n                  ? error.response.data.apierror.message\r\n                  : \"Something went wrong, please try again\";\r\n              if (\r\n                error?.response?.data?.apierror &&\r\n                error?.response?.data?.apierror?.message !== \"\" &&\r\n                error?.response?.data?.apierror &&\r\n                error?.response?.data?.apierror?.subErrors[0]?.message !== \"\"\r\n              ) {\r\n                toast.error(\r\n                  error.response.data.apierror.message +\r\n                    \" : \" +\r\n                    error.response.data.apierror.subErrors[0].field +\r\n                    \" \" +\r\n                    error.response.data.apierror.subErrors[0].message,\r\n                  { position: toast.POSITION.BOTTOM_CENTER }\r\n                );\r\n              } else {\r\n                toast.error(errorMessage, {\r\n                  position: toast.POSITION.BOTTOM_CENTER,\r\n                });\r\n              }\r\n            } else {\r\n              toast.error(\"Something went wrong. Please try again...\", {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        window.scrollTo(0, 0);\r\n      }\r\n    }\r\n  };\r\n\r\n  // end of submit\r\n  const alphabetOnly = (value) => {\r\n    const result = value.replace(/[^a-z]/gi, \"\");\r\n    return result;\r\n  };\r\n\r\n  const CareEntryPoint = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/POINT_ENTRY`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setCarePoints(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  //Get list of Source of Referral\r\n  const SourceReferral = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL_PMTCT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setSourceReferral(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  //Get list of KP\r\n  const PregnancyStatus = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PREGANACY_STATUS`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setPregnancyStatus(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const handleInputChange = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n    if (e.target.name === \"ancNo\" && e.target.value !== \"\") {\r\n      async function getAncNumber() {\r\n        const ancNumber = e.target.value;\r\n        const ancNo = {\r\n          ancNo: ancNumber,\r\n        };\r\n        const response = await axios.post(\r\n          `${baseUrl}pmtct/anc/exist/anc-number/${ancNumber}`,\r\n          ancNo,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        );\r\n        if (response.data === true) {\r\n          toast.error(\"ANC number already exist\");\r\n          setAncNumberCheck(response.data);\r\n        } else {\r\n          setAncNumberCheck(false);\r\n        }\r\n      }\r\n      getAncNumber();\r\n    }\r\n    if (e.target.name === \"lmp\" && e.target.value !== \"\") {\r\n      async function getGa() {\r\n        const ga = e.target.value;\r\n        const response = await axios.get(\r\n          `${baseUrl}pmtct/anc/calculate-ga/${ga}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        );\r\n        if (response.data > 0) {\r\n          objValues.gaweeks = response.data;\r\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n          setErrors({ ...errors, gaweeks: \"\" });\r\n        } else {\r\n          objValues.gaweeks = response.data;\r\n          toast.error(\"Please select a validate date\");\r\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n        }\r\n      }\r\n      getGa();\r\n    }\r\n    if (\r\n      e.target.name === \"parity\" &&\r\n      e.target.value !== \"\" &&\r\n      e.target.value < 0\r\n    ) {\r\n      //The field will  not accept less zero as a value\r\n      return;\r\n    } //gravida\r\n    if (\r\n      e.target.name === \"gravida\" &&\r\n      e.target.value !== \"\" &&\r\n      e.target.value <= 0\r\n    ) {\r\n      //The field will  not accept zero as a value\r\n      return;\r\n    }\r\n    if (\r\n      e.target.name === \"testedSyphilis\" &&\r\n      e.target.value !== \"\" &&\r\n      e.target.value === \"Yes\"\r\n    ) {\r\n      //The field will  not accept zero as a value\r\n      objValues.testResultSyphilis = \"\";\r\n      objValues.referredSyphilisTreatment = \"\";\r\n      objValues.treatedSyphilis = \"\";\r\n      setObjValues({ ...objValues, [\"testResultSyphilis\"]: \"\" });\r\n      setObjValues({ ...objValues, [\"referredSyphilisTreatment\"]: \"\" });\r\n      setObjValues({ ...objValues, [\"treatedSyphilis\"]: \"\" });\r\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    }\r\n    if (\r\n      e.target.name === \"testResultSyphilis\" &&\r\n      e.target.value !== \"\" &&\r\n      e.target.value === \"Positive\"\r\n    ) {\r\n      //The field will  not accept zero as a value\r\n      objValues.treatedSyphilis = \"\";\r\n      objValues.referredSyphilisTreatment = \"\";\r\n      setObjValues({ ...objValues, [\"treatedSyphilis\"]: \"\" });\r\n      setObjValues({ ...objValues, [\"referredSyphilisTreatment\"]: \"\" });\r\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    }\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n  };\r\n  const checkPhoneNumber = (e, inputName) => {\r\n    const limit = 10;\r\n    setRelatives({ ...relatives, [inputName]: e.slice(0, limit) });\r\n  };\r\n  const checkPhoneNumberBasic = (e, inputName) => {\r\n    console.log(e, inputName);\r\n    if (inputName === \"phoneNumber\") {\r\n      if (e) {\r\n        setErrors({ ...errors, phoneNumber: \"\" });\r\n      }\r\n      const limit = 10;\r\n      setBasicInfo({ ...basicInfo, phoneNumber: e.slice(0, limit) });\r\n    }\r\n    if (inputName === \"altPhonenumber\") {\r\n      const limit = 10;\r\n      setBasicInfo({ ...basicInfo, altPhonenumber: e.slice(0, limit) });\r\n    }\r\n  };\r\n  const checkNINLimit = (e) => {\r\n    const limit = 11;\r\n    const acceptedNumber = e.slice(0, limit);\r\n    return acceptedNumber;\r\n  };\r\n  //Handle CheckBox\r\n  // const handleCheckBox =e =>{\r\n  //     if(e.target.checked){\r\n  //         setOvcEnrolled(true)\r\n  //     }else{\r\n  //         setOvcEnrolled(false)\r\n  //     }\r\n  // }\r\n  const handleCancel = () => {\r\n    history.push({ pathname: \"/\" });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      <div\r\n        className=\"row page-titles mx-0\"\r\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\r\n      >\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item active\">\r\n            <h4>\r\n              {\" \"}\r\n              <Link to={\"/\"}>PMTCT /</Link> Patient Registration\r\n            </h4>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n      <Link\r\n        to={{\r\n          pathname: \"/\",\r\n          state: \"users\",\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className=\" float-end mr-10 pr-10\"\r\n          style={{\r\n            backgroundColor: \"#014d88\",\r\n            fontWeight: \"bolder\",\r\n            margingRight: \"-40px\",\r\n          }}\r\n          startIcon={<TiArrowBack />}\r\n        >\r\n          <span style={{ textTransform: \"capitalize\", color: \"#fff\" }}>\r\n            Back{\" \"}\r\n          </span>\r\n        </Button>\r\n      </Link>\r\n      <br />\r\n      <br />\r\n\r\n      <Card className={classes.root}>\r\n        <CardContent>\r\n          <div className=\"col-xl-12 col-lg-12\">\r\n            <Form>\r\n              <div className=\"card\">\r\n                <div\r\n                  className=\"card-header\"\r\n                  style={{\r\n                    backgroundColor: \"#014d88\",\r\n                    color: \"#fff\",\r\n                    fontWeight: \"bolder\",\r\n                    borderRadius: \"0.2rem\",\r\n                  }}\r\n                >\r\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\r\n                    {userDetail === null\r\n                      ? \"Basic Information\"\r\n                      : \"Edit User Information\"}\r\n                  </h5>\r\n                </div>\r\n\r\n                <div className=\"card-body\">\r\n                  <div className=\"basic-form\">\r\n                    <div className=\"row\">\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"dateOfRegistration\">\r\n                            Date of Registration{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control\"\r\n                            type=\"date\"\r\n                            name=\"dateOfRegistration\"\r\n                            id=\"dateOfRegistration\"\r\n                            min=\"1983-12-31\"\r\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                            value={basicInfo.dateOfRegistration}\r\n                            onChange={handleInputChangeBasic}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          />\r\n                          {errors.dateOfRegistration !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.dateOfRegistration}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"patientId\">\r\n                            Hospital Number{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                          </Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"hospitalNumber\"\r\n                            id=\"hospitalNumber\"\r\n                            value={basicInfo.hospitalNumber}\r\n                            onChange={handleInputChangeBasic}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          />\r\n                          {errors.hospitalNumber !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.hospitalNumber}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                          {hospitalNumStatus === true ? (\r\n                            <span className={classes.error}>\r\n                              {\"Hospital number already exist\"}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                          {/* {hospitalNumStatus2===true ? (\r\n                                                        <span className={classes.success}>{\"Hospital number is OK.\"}</span>\r\n                                                    ) :\"\"} */}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"ninNumber\">\r\n                            National Identity Number (NIN){\" \"}\r\n                          </Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"number\"\r\n                            name=\"ninNumber\"\r\n                            value={basicInfo.ninNumber}\r\n                            id=\"ninNumber\"\r\n                            onChange={handleInputChangeBasic}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          />\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      {/* <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"patientId\">EMR Number </Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"emrNumber\"\r\n                                                        id=\"emrNumber\"\r\n                                                        disabled='true'\r\n                                                        //value={1094328}\r\n                                                        //onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}\r\n                                                    />\r\n                                                   \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div> */}\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"firstName\">\r\n                            First Names <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            id=\"firstName\"\r\n                            value={basicInfo.firstName}\r\n                            onChange={handleInputChangeBasic}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          />\r\n                          {errors.firstName !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.firstName}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>Middle Name</Label>\r\n                          <Input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"middleName\"\r\n                            id=\"middleName\"\r\n                            value={basicInfo.middleName}\r\n                            onChange={handleInputChangeBasic}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          />\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Last Name <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            id=\"lastName\"\r\n                            value={basicInfo.lastName}\r\n                            onChange={handleInputChangeBasic}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          />\r\n                          {errors.lastName !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.lastName}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Sex <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"sexId\"\r\n                            id=\"sexId\"\r\n                            onChange={handleInputChangeBasic}\r\n                            value={basicInfo.sexId}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                            disabled\r\n                          >\r\n                            <option value={\"\"}>Select</option>\r\n                            {genders.map((gender, index) => (\r\n                              <option key={gender.id} value={gender.id}>\r\n                                {gender.display}\r\n                              </option>\r\n                            ))}\r\n                          </select>\r\n                          {errors.sexId !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.sexId}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group mb-2 col-md-2\">\r\n                        <FormGroup>\r\n                          <Label>Date Of Birth</Label>\r\n                          <div className=\"radio\">\r\n                            <label>\r\n                              <input\r\n                                type=\"radio\"\r\n                                value=\"Actual\"\r\n                                name=\"dateOfBirth\"\r\n                                defaultChecked\r\n                                onChange={(e) => handleDateOfBirthChange(e)}\r\n                                style={{\r\n                                  border: \"1px solid #014D88\",\r\n                                  borderRadius: \"0.2rem\",\r\n                                }}\r\n                              />{\" \"}\r\n                              Actual\r\n                            </label>\r\n                          </div>\r\n                          <div className=\"radio\">\r\n                            <label>\r\n                              <input\r\n                                type=\"radio\"\r\n                                value=\"Estimated\"\r\n                                name=\"dateOfBirth\"\r\n                                onChange={(e) => handleDateOfBirthChange(e)}\r\n                                style={{\r\n                                  border: \"1px solid #014D88\",\r\n                                  borderRadius: \"0.2rem\",\r\n                                }}\r\n                              />{\" \"}\r\n                              Estimated\r\n                            </label>\r\n                          </div>\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-2\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Date <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"date\"\r\n                            name=\"dob\"\r\n                            min=\"1940-01-01\"\r\n                            id=\"dob\"\r\n                            max={basicInfo.dateOfRegistration}\r\n                            value={basicInfo.dob}\r\n                            onChange={handleDobChange}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          />\r\n                        </FormGroup>\r\n                        {errors.dob !== \"\" ? (\r\n                          <span className={classes.error}>{errors.dob}</span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>Age</Label>\r\n                          <input\r\n                            type=\"number\"\r\n                            name=\"age\"\r\n                            className=\"form-control\"\r\n                            id=\"age\"\r\n                            min=\"10\"\r\n                            value={basicInfo.age}\r\n                            disabled={ageDisabled}\r\n                            onChange={handleAgeChange}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          />\r\n                        </FormGroup>\r\n                        <p>\r\n                          <b style={{ color: \"red\" }}>\r\n                            {basicInfo.age !== \"\" && basicInfo.age < 10\r\n                              ? \"Minimum age for PMTCT enrolment is 10 years\"\r\n                              : \" \"}{\" \"}\r\n                          </b>\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className={\"row\"}>\r\n                      {/*                                            {watchShowAge >=0 &&\r\n                                            <>*/}\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>Marital Status</Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"maritalStatusId\"\r\n                            id=\"maritalStatusId\"\r\n                            onChange={handleInputChangeBasic}\r\n                            value={basicInfo.maritalStatusId}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          >\r\n                            <option value={\"\"}>Select</option>\r\n                            {maritalStatusOptions.map(\r\n                              (maritalStatusOption, index) => (\r\n                                <option\r\n                                  key={maritalStatusOption.id}\r\n                                  value={maritalStatusOption.id}\r\n                                >\r\n                                  {maritalStatusOption.display}\r\n                                </option>\r\n                              )\r\n                            )}\r\n                          </select>\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Employment Status{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"employmentStatusId\"\r\n                            id=\"employmentStatusId\"\r\n                            onChange={handleInputChangeBasic}\r\n                            value={basicInfo.employmentStatusId}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          >\r\n                            <option value={\"\"}>Select</option>\r\n                            {occupationOptions.map(\r\n                              (occupationOption, index) => (\r\n                                <option\r\n                                  key={occupationOption.id}\r\n                                  value={occupationOption.id}\r\n                                >\r\n                                  {occupationOption.display}\r\n                                </option>\r\n                              )\r\n                            )}\r\n                          </select>\r\n                          {errors.employmentStatusId !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.employmentStatusId}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Education Level{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"educationId\"\r\n                            id=\"educationId\"\r\n                            onChange={handleInputChangeBasic}\r\n                            value={basicInfo.educationId}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          >\r\n                            <option value={\"\"}>Select</option>\r\n                            {educationOptions.map((educationOption, index) => (\r\n                              <option\r\n                                key={educationOption.id}\r\n                                value={educationOption.id}\r\n                              >\r\n                                {educationOption.display}\r\n                              </option>\r\n                            ))}\r\n                          </select>\r\n                          {errors.educationId !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.educationId}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"card\">\r\n                <div\r\n                  className=\"card-header\"\r\n                  style={{\r\n                    backgroundColor: \"#014d88\",\r\n                    color: \"#fff\",\r\n                    fontWeight: \"bolder\",\r\n                    borderRadius: \"0.2rem\",\r\n                  }}\r\n                >\r\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\r\n                    Contact Details\r\n                  </h5>\r\n                </div>\r\n\r\n                <div className=\"card-body\">\r\n                  <div className={\"row\"}>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Phone Number <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <PhoneInput\r\n                          containerStyle={{\r\n                            width: \"100%\",\r\n                            border: \"1px solid #014D88\",\r\n                          }}\r\n                          inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\r\n                          country={\"ng\"}\r\n                          placeholder=\"(234)7099999999\"\r\n                          maxLength={5}\r\n                          name=\"phoneNumber\"\r\n                          id=\"phoneNumber\"\r\n                          masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                          value={basicInfo.phoneNumber}\r\n                          onChange={(e) => {\r\n                            checkPhoneNumberBasic(e, \"phoneNumber\");\r\n                          }}\r\n                          //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\r\n                        />\r\n\r\n                        {errors.phoneNumber !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.phoneNumber}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        {/* {basicInfo.phoneNumber.length >13 ||  basicInfo.phoneNumber.length <13? (\r\n                                                <span className={classes.error}>{\"The maximum and minimum required number is 13 digit\"}</span>\r\n                                                ) : \"\" } */}\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Alt. Phone Number</Label>\r\n                        <PhoneInput\r\n                          containerStyle={{\r\n                            width: \"100%\",\r\n                            border: \"1px solid #014D88\",\r\n                          }}\r\n                          inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\r\n                          country={\"ng\"}\r\n                          placeholder=\"(234)7099999999\"\r\n                          value={basicInfo.altPhonenumber}\r\n                          masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                          onChange={(e) => {\r\n                            checkPhoneNumberBasic(e, \"altPhonenumber\");\r\n                          }}\r\n                        />\r\n                        {/* {basicInfo.phoneNumber.length >13 ||  basicInfo.phoneNumber.length <13? (\r\n                                                <span className={classes.error}>{\"The maximum and minimum required number is 13 digit\"}</span>\r\n                                                ) : \"\" } */}\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Email</Label>\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"email\"\r\n                          name=\"email\"\r\n                          id=\"email\"\r\n                          onChange={handleInputChangeBasic}\r\n                          value={basicInfo.email}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          required\r\n                        />\r\n                      </FormGroup>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Country <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"countryId\"\r\n                          id=\"countryId\"\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          value={basicInfo.countryId}\r\n                          disabled\r\n                          //onChange={getStates}\r\n                        >\r\n                          <option value={\"\"}>Select</option>\r\n                          {countries.map((value, index) => (\r\n                            <option key={index} value={value.id}>\r\n                              {value.name}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                        {errors.countryId !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.countryId}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          State <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"stateId\"\r\n                          id=\"stateId\"\r\n                          value={basicInfo.stateId}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          onChange={getProvinces}\r\n                        >\r\n                          <option value=\"\">Select</option>\r\n                          {states.map((value, index) => (\r\n                            <option key={index} value={value.id}>\r\n                              {value.name}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                        {errors.stateId !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.stateId}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Province/District/LGA{\" \"}\r\n                          <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"district\"\r\n                          id=\"district\"\r\n                          value={basicInfo.district}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          onChange={handleInputChangeBasic}\r\n                        >\r\n                          <option value=\"\">Select</option>\r\n                          {provinces.map((value, index) => (\r\n                            <option key={index} value={value.id}>\r\n                              {value.name}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                        {errors.district !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.district}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className={\"row\"}>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Street Address{\" \"}\r\n                          <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"address\"\r\n                          id=\"address\"\r\n                          value={basicInfo.address}\r\n                          onChange={handleInputChangeBasic}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        />\r\n                        {errors.address !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.address}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Landmark</Label>\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"landmark\"\r\n                          id=\"landmark\"\r\n                          value={basicInfo.landmark}\r\n                          onChange={handleInputChangeBasic}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        />\r\n                      </FormGroup>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"card\">\r\n                <div\r\n                  className=\"card-header\"\r\n                  style={{\r\n                    backgroundColor: \"#014d88\",\r\n                    color: \"#fff\",\r\n                    fontWeight: \"bolder\",\r\n                    borderRadius: \"0.2rem\",\r\n                  }}\r\n                >\r\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\r\n                    Relationship / Next Of Kin\r\n                  </h5>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                  <div className=\"row\">\r\n                    {contacts && contacts.length > 0 && (\r\n                      <div className=\"col-xl-12 col-lg-12\">\r\n                        <table style={{ width: \"100%\" }} className=\"mb-3\">\r\n                          <thead className=\"mb-3\">\r\n                            <tr>\r\n                              <th>Relationship Type</th>\r\n                              <th>Name</th>\r\n                              <th>Phone</th>\r\n                              <th>Address</th>\r\n                              <th>Actions</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody className=\"mb-3\">\r\n                            {contacts.map((item, index) => {\r\n                              return (\r\n                                <tr key={item.index} className=\"mb-3\">\r\n                                  <td>\r\n                                    {getRelationship(item.relationshipId)}\r\n                                  </td>\r\n                                  <td>\r\n                                    {item.firstName +\r\n                                      \" \" +\r\n                                      item.middleName +\r\n                                      \" \" +\r\n                                      item.lastName}\r\n                                  </td>\r\n                                  <td>{item.phone}</td>\r\n                                  <td>{item.address}</td>\r\n                                  <td>\r\n                                    <button\r\n                                      type=\"button\"\r\n                                      className=\"btn btn-default btn-light btn-sm editRow\"\r\n                                      onClick={() =>\r\n                                        handleEditRelative(item, index)\r\n                                      }\r\n                                    >\r\n                                      <FontAwesomeIcon icon=\"edit\" />\r\n                                    </button>\r\n                                    &nbsp;&nbsp;\r\n                                    <button\r\n                                      type=\"button\"\r\n                                      className=\"btn btn-danger btn-sm removeRow\"\r\n                                      onClick={(e) =>\r\n                                        handleDeleteRelative(index)\r\n                                      }\r\n                                    >\r\n                                      <FontAwesomeIcon icon=\"trash\" />\r\n                                    </button>\r\n                                  </td>\r\n                                </tr>\r\n                              );\r\n                            })}\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    )}\r\n                    <div className=\"col-xl-12 col-lg-12\">\r\n                      {showRelative && (\r\n                        <div className=\"card\">\r\n                          <div className=\"card-body\">\r\n                            <div className=\"row\">\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"relationshipType\">\r\n                                    Relationship Type{\" \"}\r\n                                    <span style={{ color: \"red\" }}> *</span>\r\n                                  </Label>\r\n                                  <select\r\n                                    className=\"form-control\"\r\n                                    name=\"relationshipId\"\r\n                                    id=\"relationshipId\"\r\n                                    value={relatives.relationshipId}\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.2rem\",\r\n                                    }}\r\n                                    onChange={handleInputChangeRelatives}\r\n                                  >\r\n                                    <option value={\"\"}>Select</option>\r\n                                    {relationshipOptions.map(\r\n                                      (relative, index) => (\r\n                                        <option\r\n                                          key={relative.id}\r\n                                          value={relative.id}\r\n                                        >\r\n                                          {relative.display}\r\n                                        </option>\r\n                                      )\r\n                                    )}\r\n                                  </select>\r\n                                  {errors.relationshipId !== \"\" ? (\r\n                                    <span className={classes.error}>\r\n                                      {errors.relationshipId}\r\n                                    </span>\r\n                                  ) : (\r\n                                    \"\"\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"cfirstName\">\r\n                                    First Name{\" \"}\r\n                                    <span style={{ color: \"red\" }}> *</span>\r\n                                  </Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"firstName\"\r\n                                    value={relatives.firstName}\r\n                                    id=\"firstName\"\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.2rem\",\r\n                                    }}\r\n                                    onChange={handleInputChangeRelatives}\r\n                                  />\r\n                                  {errors.firstName !== \"\" ? (\r\n                                    <span className={classes.error}>\r\n                                      {errors.firstName}\r\n                                    </span>\r\n                                  ) : (\r\n                                    \"\"\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label>Middle Name</Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"middleName\"\r\n                                    id=\"middleName\"\r\n                                    value={relatives.middleName}\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.2rem\",\r\n                                    }}\r\n                                    onChange={handleInputChangeRelatives}\r\n                                  />\r\n                                  {/* {errors.cmiddleName && <p>{errors.cmiddleName.message}</p>} */}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label>\r\n                                    Last Name{\" \"}\r\n                                    <span style={{ color: \"red\" }}> *</span>\r\n                                  </Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"lastName\"\r\n                                    id=\"lastName\"\r\n                                    value={relatives.lastName}\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.2rem\",\r\n                                    }}\r\n                                    onChange={handleInputChangeRelatives}\r\n                                  />\r\n                                  {errors.lastName !== \"\" ? (\r\n                                    <span className={classes.error}>\r\n                                      {errors.lastName}\r\n                                    </span>\r\n                                  ) : (\r\n                                    \"\"\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"contactPhoneNumber\">\r\n                                    Phone Number\r\n                                  </Label>\r\n                                  <PhoneInput\r\n                                    containerStyle={{\r\n                                      width: \"100%\",\r\n                                      border: \"1px solid #014D88\",\r\n                                    }}\r\n                                    inputStyle={{\r\n                                      width: \"100%\",\r\n                                      borderRadius: \"0px\",\r\n                                    }}\r\n                                    country={\"ng\"}\r\n                                    placeholder=\"(234)7099999999\"\r\n                                    name=\"phone\"\r\n                                    value={relatives.phone}\r\n                                    masks={{\r\n                                      ng: \"...-...-....\",\r\n                                      at: \"(....) ...-....\",\r\n                                    }}\r\n                                    id=\"phone\"\r\n                                    onChange={(e) => {\r\n                                      checkPhoneNumber(e, \"phone\");\r\n                                    }}\r\n                                  />\r\n                                  {errors.phone !== \"\" ? (\r\n                                    <span className={classes.error}>\r\n                                      {errors.phone}\r\n                                    </span>\r\n                                  ) : (\r\n                                    \"\"\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"contactEmail\">Email</Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    id=\"email\"\r\n                                    value={relatives.email}\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.2rem\",\r\n                                    }}\r\n                                    onChange={handleInputChangeRelatives}\r\n                                    required\r\n                                  />\r\n                                  {/* {errors.contactEmail && <p>{errors.contactEmail.message}</p>} */}\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                              <div className=\"form-group mb-3 col-md-3\">\r\n                                <FormGroup>\r\n                                  <Label for=\"contactAddress\">Address</Label>\r\n                                  <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    name=\"address\"\r\n                                    id=\"address\"\r\n                                    value={relatives.address}\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.2rem\",\r\n                                    }}\r\n                                    onChange={handleInputChangeRelatives}\r\n                                  />\r\n                                  {/* {errors.contactAddress && <p>{errors.contactAddress.message}</p>} */}\r\n                                </FormGroup>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                              <div className=\"col-1\">\r\n                                <MatButton\r\n                                  type=\"button\"\r\n                                  variant=\"contained\"\r\n                                  color=\"primary\"\r\n                                  className={classes.button}\r\n                                  onClick={handleSaveRelationship}\r\n                                >\r\n                                  Add\r\n                                </MatButton>\r\n                              </div>\r\n\r\n                              <div className=\"col-1\">\r\n                                <MatButton\r\n                                  type=\"button\"\r\n                                  variant=\"contained\"\r\n                                  color=\"secondary\"\r\n                                  className={classes.button}\r\n                                  onClick={handleCancelSaveRelationship}\r\n                                >\r\n                                  Cancel\r\n                                </MatButton>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\"></div>\r\n                  <MatButton\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<AddIcon />}\r\n                    onClick={handleAddRelative}\r\n                    style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\r\n                  >\r\n                    Add a Relative/Next Of Kin\r\n                  </MatButton>\r\n                  {/* </div> */}\r\n                </div>\r\n              </div>\r\n              {/* Adding HIV ENROLLEMENT FORM HERE */}\r\n              {state.showANC && (\r\n                <div className=\"card\">\r\n                  <div\r\n                    className=\"card-header\"\r\n                    style={{\r\n                      backgroundColor: \"#014d88\",\r\n                      color: \"#fff\",\r\n                      fontWeight: \"bolder\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\r\n                      ANC Enrollment\r\n                    </h5>\r\n                  </div>\r\n\r\n                  <div className=\"card-body\">\r\n                    <div className=\"row\">\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            ANC No <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"text\"\r\n                              name=\"ancNo\"\r\n                              id=\"ancNo\"\r\n                              onChange={handleInputChangeANC}\r\n                              value={objValues.ancNo}\r\n                            />\r\n                          </InputGroup>\r\n                          {errors.ancNo !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.ancNo}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                          {ancNumberCheck === true ? (\r\n                            <span className={classes.error}>\r\n                              {\"ANC number already exist\"}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Date of Enrollment{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"date\"\r\n                              name=\"firstAncDate\"\r\n                              id=\"firstAncDate\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.firstAncDate}\r\n                              min={basicInfo.dateOfRegistration}\r\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                            />\r\n                          </InputGroup>\r\n                          {errors.firstAncDate !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.firstAncDate}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Parity <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"number\"\r\n                              name=\"parity\"\r\n                              id=\"parity\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.parity}\r\n                              min=\"0\"\r\n                            />\r\n                          </InputGroup>\r\n                          {errors.parity !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.parity}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                          {objValues.parity !== \"\" && objValues.parity < 0 ? (\r\n                            <span className={classes.error}>\r\n                              Parity should not be less than 1\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Gravida <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"number\"\r\n                              name=\"gravida\"\r\n                              id=\"gravida\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.gravida}\r\n                              min={objValues.parity}\r\n                            />\r\n                          </InputGroup>\r\n                          {errors.gravida !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.gravida}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                          {objValues.gravida < objValues.parity ? (\r\n                            <span className={classes.error}>\r\n                              Gravida should not be less Parity\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Date Of Last Menstrual Period{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"date\"\r\n                              name=\"lmp\"\r\n                              id=\"lmp\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.lmp}\r\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                            />\r\n                          </InputGroup>\r\n                          {errors.lmp !== \"\" ? (\r\n                            <span className={classes.error}>{errors.lmp}</span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                          {objValues.gaweeks === 0 ? (\r\n                            <span className={classes.error}>Invalid date </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Gestational Age (Weeks){\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"number\"\r\n                              name=\"gaweeks\"\r\n                              id=\"gaweeks\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.gaweeks}\r\n                              disabled\r\n                            />\r\n                          </InputGroup>\r\n                          {errors.gaweeks !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.gaweeks}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Source of Referral{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"select\"\r\n                              name=\"sourceOfReferral\"\r\n                              id=\"sourceOfReferral\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.sourceOfReferral}\r\n                            >\r\n                              {/* sourceReferral */}\r\n                              <option value=\"\">Select</option>\r\n                              {sourceReferral.map((value, index) => (\r\n                                <option key={index} value={value.code}>\r\n                                  {value.display}\r\n                                </option>\r\n                              ))}\r\n                            </Input>\r\n                          </InputGroup>\r\n                          {errors.sourceOfReferral !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.sourceOfReferral}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Tested for syphilis{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"select\"\r\n                              name=\"testedSyphilis\"\r\n                              id=\"testedSyphilis\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.testedSyphilis}\r\n                            >\r\n                              <option value=\"\">Select</option>\r\n                              <option value=\"Yes\">Yes</option>\r\n                              <option value=\"No\">No</option>\r\n                            </Input>\r\n                          </InputGroup>\r\n                          {errors.testedSyphilis !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.testedSyphilis}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      {objValues.testedSyphilis === \"Yes\" && (\r\n                        <>\r\n                          <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                              <Label>\r\n                                Syphilis test result{\" \"}\r\n                                <span style={{ color: \"red\" }}> *</span>\r\n                              </Label>\r\n                              <InputGroup>\r\n                                <Input\r\n                                  type=\"select\"\r\n                                  name=\"testResultSyphilis\"\r\n                                  id=\"testResultSyphilis\"\r\n                                  onChange={handleInputChange}\r\n                                  value={objValues.testResultSyphilis}\r\n                                >\r\n                                  <option value=\"\">Select</option>\r\n                                  <option value=\"Positive\">Positive</option>\r\n                                  <option value=\"Negative\">Negative</option>\r\n                                </Input>\r\n                              </InputGroup>\r\n                              {errors.testResultSyphilis !== \"\" ? (\r\n                                <span className={classes.error}>\r\n                                  {errors.testResultSyphilis}\r\n                                </span>\r\n                              ) : (\r\n                                \"\"\r\n                              )}\r\n                            </FormGroup>\r\n                          </div>\r\n                          {objValues.testedSyphilis === \"Yes\" &&\r\n                            objValues.testResultSyphilis === \"Positive\" && (\r\n                              <>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                  <FormGroup>\r\n                                    <Label>\r\n                                      Treated for syphilis (penicillin){\" \"}\r\n                                    </Label>\r\n                                    <InputGroup>\r\n                                      <Input\r\n                                        type=\"select\"\r\n                                        name=\"treatedSyphilis\"\r\n                                        id=\"treatedSyphilis\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.encounterDate}\r\n                                      >\r\n                                        <option value=\"\">Select</option>\r\n                                        <option value=\"Yes\">Yes</option>\r\n                                        <option value=\"No\">No</option>\r\n                                      </Input>\r\n                                    </InputGroup>\r\n                                    {errors.treatedSyphilis !== \"\" ? (\r\n                                      <span className={classes.error}>\r\n                                        {errors.treatedSyphilis}\r\n                                      </span>\r\n                                    ) : (\r\n                                      \"\"\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                  <FormGroup>\r\n                                    <Label>Referred Syphilis +ve client </Label>\r\n                                    <InputGroup>\r\n                                      <Input\r\n                                        type=\"select\"\r\n                                        name=\"referredSyphilisTreatment\"\r\n                                        id=\"referredSyphilisTreatment\"\r\n                                        onChange={handleInputChange}\r\n                                        value={\r\n                                          objValues.referredSyphilisTreatment\r\n                                        }\r\n                                      >\r\n                                        <option value=\"\">Select</option>\r\n                                        <option value=\"Yes\">Yes</option>\r\n                                        <option value=\"No\">No</option>\r\n                                      </Input>\r\n                                    </InputGroup>\r\n                                    {errors.referredSyphilisTreatment !== \"\" ? (\r\n                                      <span className={classes.error}>\r\n                                        {errors.referredSyphilisTreatment}\r\n                                      </span>\r\n                                    ) : (\r\n                                      \"\"\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </div>\r\n                              </>\r\n                            )}\r\n                        </>\r\n                      )}\r\n                      <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            HIV Status <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <InputGroup>\r\n                            <Input\r\n                              type=\"select\"\r\n                              name=\"staticHivStatus\"\r\n                              id=\"staticHivStatus\"\r\n                              onChange={handleInputChange}\r\n                              value={objValues.staticHivStatus}\r\n                            >\r\n                              <option value=\"\">Select</option>\r\n                              <option value=\"Positive\">Positive</option>\r\n                              <option value=\"Negative\">Negative</option>\r\n                              <option value=\"Unknown\">Unknown</option>\r\n                            </Input>\r\n                          </InputGroup>\r\n                          {errors.staticHivStatus !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.staticHivStatus}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {/* END OF HIV ENROLLEMENT FORM */}\r\n\r\n              {/* PMTCT FORM FOR L&D AND POST PARTUM  */}\r\n              {!state.showANC && (\r\n                <PmtctEnrollment\r\n                  // entryPoint={}\r\n                  getPMTCTInfo={getPMTCTInfo}\r\n                  patientObj={{}}\r\n                  showANC={state.showANC}\r\n                  setActiveContent={setActiveContent}\r\n                  activeContent={activeContent}\r\n                  hideUpdateButton={false}\r\n                  ancEntryType={false}\r\n                />\r\n              )}\r\n              {saving ? <Spinner /> : \"\"}\r\n              <br />\r\n              {/* { \r\n                basicInfo.age >= 10 &&\r\n                objValues.gaweeks > 0 &&\r\n                ancNumberCheck !== true &&\r\n                objValues.gravida >= objValues.parity && (\r\n                  <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    hidden={disabledAgeBaseOnAge || hospitalNumStatus}\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                    disabled={saving}\r\n                    style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\r\n                  >\r\n                    {!saving ? (\r\n                      <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                      <span style={{ textTransform: \"capitalize\" }}>\r\n                        Saving...\r\n                      </span>\r\n                    )}\r\n                  </MatButton>\r\n                )} */}\r\n              {\r\n                <MatButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  hidden={disabledAgeBaseOnAge || hospitalNumStatus}\r\n                  className={classes.button}\r\n                  startIcon={<SaveIcon />}\r\n                  onClick={handleSubmit}\r\n                  disabled={saving}\r\n                  style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\r\n                >\r\n                  {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                  ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>\r\n                      Saving...\r\n                    </span>\r\n                  )}\r\n                </MatButton>\r\n              }\r\n              <MatButton\r\n                variant=\"contained\"\r\n                className={classes.button}\r\n                startIcon={<CancelIcon />}\r\n                style={{ backgroundColor: \"#992E62\" }}\r\n                onClick={handleCancel}\r\n              >\r\n                <span style={{ textTransform: \"capitalize\", color: \"#fff\" }}>\r\n                  Cancel\r\n                </span>\r\n              </MatButton>\r\n            </Form>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        backdrop=\"static\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>Are you Sure of the Age entered?</h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n          >\r\n            Yes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserRegistration;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\SubMenu.js",["432","433","434","435","436","437","438","439","440","441"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Dropdown, Menu } from \"semantic-ui-react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  navItemText: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction SubMenu(props) {\r\n  const classes = useStyles();\r\n  let gender = \"\";\r\n  const patientObjs = props.patientObj ? props.patientObj : {};\r\n  //const patientCurrentStatus=props.patientObj && props.patientObj.currentStatus===\"Died (Confirmed)\" ? true : false ;\r\n  const [patientObj, setpatientObj] = useState(patientObjs);\r\n  const [genderType, setGenderType] = useState();\r\n  const [deliveryStatus, setDeliveryStatus] = useState(false);\r\n\r\n  let mentalStatus = false;\r\n  let initialEvaluationStatus = false;\r\n  useEffect(() => {\r\n    props.deliveryInfo.filter((each) => {\r\n      if (each.activityName === \"Labour and Delivery\") {\r\n        setDeliveryStatus(true);\r\n      }\r\n    });\r\n\r\n    Observation();\r\n    gender =\r\n      props.patientObj && props.patientObj.sex ? props.patientObj.sex : null;\r\n    setGenderType(gender === \"Female\" ? true : false);\r\n  }, [props.patientObj]);\r\n\r\n  useEffect(() => {\r\n    props.deliveryInfo.filter((each) => {\r\n      // console.log(each);\r\n\r\n      if (each.activityName === \"Labour and Delivery\") {\r\n        setDeliveryStatus(true);\r\n      }\r\n    });\r\n    // console.log(props.deliveryInfo);\r\n  }, [props.deliveryInfo]);\r\n  //Get list of RegimenLine\r\n  const Observation = () => {\r\n    axios\r\n      .get(`${baseUrl}observation/person/${props.patientObj.id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        const observation = response.data;\r\n        const mental = observation.filter((x) => x.type === \"mental health\");\r\n        const evaluation = observation.filter(\r\n          (x) => x.type === \"initial evaluation\"\r\n        );\r\n        if (mental.length > 1) {\r\n          mentalStatus = true;\r\n        }\r\n        if (evaluation.length > 1) {\r\n          initialEvaluationStatus = true;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const loadAncPnc = (row) => {\r\n    props.setActiveContent({ ...props.activeContent, route: \"anc-pnc\" });\r\n  };\r\n  const loadLabourDelivery = (row) => {\r\n    props.setActiveContent({\r\n      ...props.activeContent,\r\n      route: \"labour-delivery\",\r\n    });\r\n  };\r\n  const onClickConsultation = (row) => {\r\n    props.setActiveContent({ ...props.activeContent, route: \"consultation\" });\r\n  };\r\n  const onClickHome = (row) => {\r\n    props.setActiveContent({ ...props.activeContent, route: \"recent-history\" });\r\n  };\r\n  const loadPmtctHts = (row) => {\r\n    props.setActiveContent({ ...props.activeContent, route: \"pmtct-hts\" });\r\n  };\r\n  const onClickInfant = (row) => {\r\n    props.setActiveContent({ ...props.activeContent, route: \"infants\" });\r\n  };\r\n  const onClickPartner = (row) => {\r\n    props.setActiveContent({ ...props.activeContent, route: \"partners\" });\r\n  };\r\n  const loadPatientHistory = () => {\r\n    props.setActiveContent({\r\n      ...props.activeContent,\r\n      route: \"patient-history\",\r\n    });\r\n  };\r\n  //\r\n\r\n  return (\r\n    <div>\r\n      <Menu size=\"large\" color={\"black\"} inverted>\r\n        <Menu.Item onClick={() => onClickHome()}> Home</Menu.Item>\r\n\r\n        {(patientObj.dynamicHivStatus === \"Positive\" ||\r\n          patientObj.staticHivStatus === \"Positive\" ||\r\n          patientObj?.hivStatus === \"Positive\") && (\r\n          <>\r\n            {patientObj.pmtctRegStatus !== true ? (\r\n              <>\r\n                <Menu.Item onClick={() => loadAncPnc()}>\r\n                  PMTCT Enrollment\r\n                </Menu.Item>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Menu.Item onClick={() => onClickConsultation()}>\r\n                  Follow Up Visit\r\n                </Menu.Item>\r\n\r\n                {patientObj.deliveryStatus !== true &&\r\n                  deliveryStatus !== true && (\r\n                    <Menu.Item onClick={() => loadLabourDelivery()}>\r\n                      Labour and Delivery\r\n                    </Menu.Item>\r\n                  )}\r\n                {patientObj?.ancNo && (\r\n                  <Menu.Item onClick={() => onClickPartner()}>\r\n                    {\" \"}\r\n                    Partners\r\n                  </Menu.Item>\r\n                )}\r\n                {/* )} */}\r\n                <Menu.Item onClick={() => onClickInfant()}>\r\n                  {\" \"}\r\n                  Infant Information\r\n                </Menu.Item>\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n        <Menu.Item onClick={() => loadPatientHistory()}>History</Menu.Item>\r\n      </Menu>\r\n      {console.log(patientObj)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SubMenu;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\api.js",[],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js",["442","443","444","445","446","447","448","449","450","451"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\nimport { Label } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"./../../../api\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: \"bottom\",\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: \"center\",\r\n  },\r\n  column: {\r\n    flexBasis: \"20.33%\",\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: \"none\",\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction PatientCard(props) {\r\n  const { classes } = props;\r\n  //const patientCurrentStatus=props.patientObj && props.patientObj.currentStatus===\"Died (Confirmed)\" ? true : false ;\r\n  const patientObjs = props.patientObj ? props.patientObj : {};\r\n  const permissions = props.permissions ? props.permissions : [];\r\n  const [patientObj, setpatientObj] = useState(patientObjs);\r\n  const [patientBiometricStatus, setPatientBiometricStatus] = useState(\r\n    props?.patientObj?.biometricStatus\r\n  );\r\n  const [biometricStatus, setBiometricStatus] = useState(false);\r\n  const [devices, setDevices] = useState([]);\r\n  const [modal, setModal] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n  const [biometricModal, setBiometricModal] = useState(false);\r\n  const BiometricModalToggle = () => setBiometricModal(!biometricModal);\r\n  const [hivStatus, setHivStatus] = useState();\r\n  const [artModal, setArtModal] = useState(false);\r\n  const Arttoggle = () => setArtModal(!artModal);\r\n  useEffect(() => {\r\n    PatientCurrentStatus();\r\n    CheckBiometric();\r\n    console.log(\"patient\", patientObj);\r\n  }, [props.patientObj]);\r\n\r\n  //Get list of KP\r\n  const CheckBiometric = () => {\r\n    axios\r\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setBiometricStatus(response.data);\r\n        if (response.data === true) {\r\n          axios\r\n            .get(`${baseUrl}biometrics/devices`, {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            })\r\n            .then((response) => {\r\n              setDevices(response.data);\r\n            })\r\n            .catch((error) => {\r\n              console.log(error);\r\n            });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  ///GET LIST OF Patients\r\n  async function PatientCurrentStatus() {\r\n    axios\r\n      .get(`${baseUrl}hiv/status/patient-current/${patientObj.id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setHivStatus(response.data);\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n\r\n  // async function getPatientInfo() {\r\n  //   axios\r\n  //     .get(`${baseUrl}hiv/status/patient-current/${patientObj.id}`, {\r\n  //       headers: { Authorization: `Bearer ${token}` },\r\n  //     })\r\n  //     .then((response) => {\r\n  //       setHivStatus(response.data);\r\n  //     })\r\n  //     .catch((error) => {});\r\n  // }\r\n  const getAddress = (identifier) => {\r\n    const identifiers = identifier;\r\n    const address = identifiers?.address.find((obj) => obj.city);\r\n    const houseAddress =\r\n      address && address.line[0] !== null ? address.line[0] : \"\";\r\n    const landMark =\r\n      address && address.city && address.city !== null ? address.city : \"\";\r\n    return address ? houseAddress + \" \" + landMark : \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary>\r\n          <Row>\r\n            <Col md={12}>\r\n              <Row className={\"mt-1\"}>\r\n                <Col md={12} className={classes.root2}>\r\n                  <b style={{ fontSize: \"25px\" }}>\r\n                    {patientObj?.fullname\r\n                      ? patientObj?.fullname\r\n                      : patientObj?.fullName}\r\n                  </b>\r\n                  <Link to={\"/\"}>\r\n                    <ButtonMui\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className=\" float-end ms-2 mr-2 mt-2\"\r\n                      //startIcon={<FaUserPlus size=\"10\"/>}\r\n                      startIcon={<TiArrowBack />}\r\n                      style={{\r\n                        backgroundColor: \"rgb(153, 46, 98)\",\r\n                        color: \"#fff\",\r\n                        height: \"35px\",\r\n                      }}\r\n                    >\r\n                      <span style={{ textTransform: \"capitalize\" }}>Back</span>\r\n                    </ButtonMui>\r\n                  </Link>\r\n                </Col>\r\n                <Col md={4} className={classes.root2}>\r\n                  <span>\r\n                    {\" \"}\r\n                    Patient ID : <b>{patientObj?.hospitalNumber}</b>\r\n                  </span>\r\n                </Col>\r\n\r\n                <Col md={4} className={classes.root2}>\r\n                  <span>\r\n                    {/* Date Of Birth : <b>{patientObj.dateOfBirth }</b> */}\r\n                  </span>\r\n                </Col>\r\n                <Col md={4} className={classes.root2}>\r\n                  <span>\r\n                    {\" \"}\r\n                    Age :{\" \"}\r\n                    <b>\r\n                      {patientObj?.age}{\" \"}\r\n                      {Number(patientObj?.age) > 1 ? \"years\" : \"year\"}\r\n                    </b>\r\n                  </span>\r\n                </Col>\r\n                <Col md={4}>\r\n                  <span>\r\n                    {\" \"}\r\n                    Gender :{\" \"}\r\n                    <b>\r\n                      {patientObj.sex && patientObj.sex !== null\r\n                        ? patientObj.sex\r\n                        : \"Female\"}\r\n                    </b>\r\n                  </span>\r\n                </Col>\r\n                <Col md={4} className={classes.root2}>\r\n                  <span>\r\n                    {\" \"}\r\n                    {/* Phone Number : <b>{getPhoneNumber(patientObj.contactPoint)}</b> */}\r\n                  </span>\r\n                </Col>\r\n                <Col md={4} className={classes.root2}>\r\n                  <span>\r\n                    {\" \"}\r\n                    Address :{\" \"}\r\n                    <b>\r\n                      {patientObj?.address && getAddress(patientObj?.address)}{\" \"}\r\n                    </b>\r\n                  </span>\r\n                </Col>\r\n\r\n                <Col md={12}>\r\n                  {biometricStatus === true ? (\r\n                    <>\r\n                      <div>\r\n                        <Typography variant=\"caption\">\r\n                          <Label\r\n                            color={\r\n                              props.patientObj?.biometricStatus === true\r\n                                ? \"green\"\r\n                                : \"red\"\r\n                            }\r\n                            size={\"mini\"}\r\n                          >\r\n                            Biometric Status\r\n                            <Label.Detail>\r\n                              {props.patientObj?.biometricStatus === true\r\n                                ? \"Captured\"\r\n                                : \"Not Captured\"}\r\n                            </Label.Detail>\r\n                          </Label>\r\n                        </Typography>\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  {props.patientObj.dynamicHivStatus !== null ||\r\n                  props.patientObj.staticHivStatus !== null ? (\r\n                    <>\r\n                      <div>\r\n                        <Typography variant=\"caption\">\r\n                          <Label\r\n                            color={\r\n                              props.patientObj.dynamicHivStatus !==\r\n                                \"Positive\" &&\r\n                              props.patientObj.staticHivStatus !== \"Positive\"\r\n                                ? \"green\"\r\n                                : \"red\"\r\n                            }\r\n                            size={\"mini\"}\r\n                          >\r\n                            HIV Status\r\n                            <Label.Detail>\r\n                              {props.patientObj.dynamicHivStatus !== \"Unknown\"\r\n                                ? props.patientObj.dynamicHivStatus\r\n                                  ? props.patientObj.dynamicHivStatus\r\n                                  : props.patientObj.staticHivStatus\r\n                                : \"\"}\r\n                              {props.patientObj.hivStatus !== \"Unknown\"\r\n                                ? props.patientObj.hivStatus\r\n                                : props.patientObj.hivStatus}\r\n                            </Label.Detail>\r\n                          </Label>\r\n                        </Typography>\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </ExpansionPanelSummary>\r\n\r\n        {/* <Button\r\n                      color='red'\r\n                      content='BloodType'\r\n                      //icon='heart'\r\n                      label={{ basic: true, color: 'red', pointing: 'left', content: 'AB+' }}\r\n                    /> */}\r\n        {/* <Button\r\n                        basic\r\n                        color='blue'\r\n                        content='Height'\r\n                        icon='fork'\r\n                        label={{\r\n                            as: 'a',\r\n                            basic: true,\r\n                            color: 'blue',\r\n                            pointing: 'left',\r\n                            content: '74.5 in',\r\n                        }}\r\n                      />               */}\r\n        {/* <Button\r\n                        basic\r\n                        color='blue'\r\n                        content='Weight'\r\n                        icon='fork'\r\n                        label={{\r\n                            as: 'a',\r\n                            basic: true,\r\n                            color: 'blue',\r\n                            pointing: 'left',\r\n                            content: '74.5 in',\r\n                        }}\r\n                      /> */}\r\n\r\n        {/* <div className={classes.column}>\r\n                  <Button primary  floated='left' onClick={() => get_age(moment(patientObj.dateOfBirth).format(\"DD-MM-YYYY\")) > 5 ? loadAdultEvaluation(patientObj) :loadChildEvaluation(patientObj) }><span style={{fontSize:\"11px\"}}>Initial Clinic Evaluation</span></Button>\r\n                </div> */}\r\n        {/* {patientCurrentStatus !==true && props.patientObj.enrollment.targetGroupId !==\"456\" ?                   \r\n                  (\r\n                    <>\r\n                      <div className={classes.column}>\r\n                        <Button primary  floated='left' onClick={() => loadMentalHealthScreening(patientObj) }><span style={{fontSize:\"11px\"}}>Mental Health Screening</span></Button>\r\n                      </div>\r\n                    </>\r\n                  ) :\"\"           \r\n                } */}\r\n        {/* {patientObj.commenced!==true && (\r\n                <div className={classes.column} style={{paddingLeft:\"20px\"}}>\r\n                {\" \"}<Button primary onClick={() => loadArt(patientObj)} ><span style={{fontSize:\"11px\"}}>ART Commencement </span></Button>\r\n                </div>\r\n                )\r\n               }\r\n                     */}\r\n      </ExpansionPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js",["452","453"],"import React, { useState } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport axios from \"axios\";\r\n\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n//import { MdDashboard } from \"react-icons/md\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\n//import { FaUserPlus } from \"react-icons/fa\";\r\nimport { TiArrowForward } from \"react-icons/ti\";\r\nimport PmtctEntryPoint from \"../PmtctServices/PmtctEntryPoint\";\r\n\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst Patients = (props) => {\r\n  const [showPPI, setShowPPI] = useState(true);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [info, setInfo] = useState({});\r\n\r\n  const calculate_age = (dob) => {\r\n    var today = new Date();\r\n    var dateParts = dob.split(\"-\");\r\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n    var age_now = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now + \" year(s)\";\r\n  };\r\n\r\n  const getHospitalNumber = (identifier) => {\r\n    const identifiers = identifier;\r\n    const hospitalNumber = identifiers.identifier.find(\r\n      (obj) => obj.type == \"HospitalNumber\"\r\n    );\r\n    return hospitalNumber ? hospitalNumber.value : \"\";\r\n  };\r\n  const handleCheckBox = (e) => {\r\n    if (e.target.checked) {\r\n      setShowPPI(false);\r\n    } else {\r\n      setShowPPI(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"Find Patient \"\r\n        columns={[\r\n          // { title: \" ID\", field: \"Id\" },\r\n          {\r\n            title: \"Patient Name\",\r\n            field: \"name\",\r\n            hidden: showPPI,\r\n          },\r\n          {\r\n            title: \"Hospital Number\",\r\n            field: \"hospital_number\",\r\n            filtering: false,\r\n          },\r\n          { title: \"Sex\", field: \"gender\", filtering: false },\r\n          { title: \"Age\", field: \"age\", filtering: false },\r\n          //{ title: \"Enrollment Status\", field: \"v_status\", filtering: false },\r\n          //{ title: \"ART Number\", field: \"v_status\", filtering: false },\r\n          // { title: \"ART Status\", field: \"status\", filtering: false },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        //isLoading={loading}\r\n        data={(query) =>\r\n          new Promise((resolve, reject) =>\r\n            axios\r\n              .get(\r\n                `${baseUrl}pmtct/anc/pmtct-from-person?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n              )\r\n              .then((response) => response)\r\n              .then((result) => {\r\n                //console.log(result.data.records)\r\n                resolve({\r\n                  data: result.data.records.map((row) => ({\r\n                    name: (\r\n                      <Link\r\n                        to={{\r\n                          pathname: \"/enroll-patient\",\r\n                          state: { patientId: row.id, patientObj: row },\r\n                        }}\r\n                        title={\"Enroll Patient\"}\r\n                      >\r\n                        {\" \"}\r\n                        {row.firstName + \" \" + row.surname}\r\n                      </Link>\r\n                    ),\r\n                    hospital_number: getHospitalNumber(row.identifier),\r\n                    gender: row && row.sex ? row.sex : \"\",\r\n                    age:\r\n                      row.dateOfBirth === 0 ||\r\n                      row.dateOfBirth === undefined ||\r\n                      row.dateOfBirth === null ||\r\n                      row.dateOfBirth === \"\"\r\n                        ? 0\r\n                        : calculate_age(\r\n                            moment(row.dateOfBirth).format(\"DD-MM-YYYY\")\r\n                          ),\r\n\r\n                    //status: (<Label color=\"blue\" size=\"mini\">{row.currentStatus}</Label>),\r\n                    //enroll-patient\r\n                    actions: (\r\n                      <div\r\n                        onClick={(e) => {\r\n                          setModalShow(true);\r\n                          setInfo({ patientId: row.id, patientObj: row });\r\n                        }}\r\n                      >\r\n                        {/* <Link\r\n                                                to={{\r\n                                                    pathname: \"/enroll-patient\",\r\n                                                    state: { patientId : row.id, patientObj: row, entryType: 'ANC'  }\r\n                                                }}\r\n                                            > */}\r\n                        <ButtonGroup\r\n                          variant=\"contained\"\r\n                          aria-label=\"split button\"\r\n                          style={{\r\n                            backgroundColor: \"rgb(153, 46, 98)\",\r\n                            height: \"30px\",\r\n                            width: \"215px\",\r\n                          }}\r\n                          size=\"large\"\r\n                        >\r\n                          <Button\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            aria-label=\"select merge strategy\"\r\n                            aria-haspopup=\"menu\"\r\n                            style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n                          >\r\n                            <TiArrowForward />\r\n                          </Button>\r\n                          <Button\r\n                            style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n                          >\r\n                            <span\r\n                              style={{\r\n                                fontSize: \"12px\",\r\n                                color: \"#fff\",\r\n                                fontWeight: \"bolder\",\r\n                              }}\r\n                            >\r\n                              Enroll Patient\r\n                            </span>\r\n                          </Button>\r\n                        </ButtonGroup>\r\n                        {/* </Link> */}\r\n                      </div>\r\n                    ),\r\n                  })),\r\n                  page: query.page,\r\n                  totalCount: result.data.totalRecords,\r\n                });\r\n              })\r\n          )\r\n        }\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n          },\r\n          search: true,\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n        components={{\r\n          Toolbar: (props) => (\r\n            <div>\r\n              <div className=\"form-check custom-checkbox  float-left mt-4 ml-3 \">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"form-check-input\"\r\n                  name=\"showPP!\"\r\n                  id=\"showPP\"\r\n                  value=\"showPP\"\r\n                  checked={showPPI === true ? false : true}\r\n                  onChange={handleCheckBox}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.25rem\",\r\n                  }}\r\n                />\r\n                <label className=\"form-check-label\" htmlFor=\"basic_checkbox_1\">\r\n                  <b style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\r\n                    SHOW PII\r\n                  </b>\r\n                </label>\r\n              </div>\r\n              <MTableToolbar {...props} />\r\n            </div>\r\n          ),\r\n        }}\r\n      />\r\n      <PmtctEntryPoint\r\n        route=\"/enroll-patient\"\r\n        show={modalShow}\r\n        info={info}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Patients;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\ActiveANCPatientList.js",["454"],"import React, { useState } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\n\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst ANCPatients = (props) => {\r\n  const [showPPI, setShowPPI] = useState(true);\r\n  const handleCheckBox = (e) => {\r\n    if (e.target.checked) {\r\n      setShowPPI(false);\r\n    } else {\r\n      setShowPPI(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"Find Patient \"\r\n        columns={[\r\n          // { title: \" ID\", field: \"Id\" },\r\n          {\r\n            title: \"Patient Name\",\r\n            field: \"name\",\r\n            hidden: showPPI,\r\n          },\r\n          {\r\n            title: \"Hospital Number\",\r\n            field: \"hospital_number\",\r\n            filtering: false,\r\n          },\r\n          { title: \"Sex\", field: \"gender\", filtering: false },\r\n          { title: \"Age\", field: \"age\", filtering: false },\r\n          //{ title: \"Enrollment Status\", field: \"v_status\", filtering: false },\r\n          //{ title: \"ART Number\", field: \"v_status\", filtering: false },\r\n          // { title: \"ART Status\", field: \"status\", filtering: false },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        //isLoading={loading}\r\n        data={(query) =>\r\n          new Promise((resolve, reject) =>\r\n            axios\r\n              .get(\r\n                `${baseUrl}pmtct/anc/all-active-anc?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n              )\r\n              .then((response) => response)\r\n              .then((result) => {\r\n                resolve({\r\n                  data: result.data.records.map((row) => ({\r\n                    name: (\r\n                      <Link\r\n                        to={{\r\n                          pathname: \"/patient-history\",\r\n                          state: { patientObj: row },\r\n                        }}\r\n                        title={\"Click to view patient dashboard\"}\r\n                      >\r\n                        {\" \"}\r\n                        {row.surname ? row?.surname : row?.fullname}\r\n                      </Link>\r\n                    ),\r\n\r\n                    hospital_number: row.hospitalNumber,\r\n                    gender: row && row.sex ? row.sex : \"Female\",\r\n                    age: row.age,\r\n                    actions: (\r\n                      <div>\r\n                        <Link\r\n                          to={{\r\n                            pathname: \"/patient-history\",\r\n                            state: {\r\n                              patientObj: row,\r\n                              postValue: \"ANC\",\r\n                              entrypointValue: \"PMTCT_ENTRY_POINT_ANC\",\r\n                            },\r\n                          }}\r\n                        >\r\n                          <ButtonGroup\r\n                            variant=\"contained\"\r\n                            aria-label=\"split button\"\r\n                            style={{\r\n                              backgroundColor: \"rgb(153, 46, 98)\",\r\n                              height: \"30px\",\r\n                              width: \"215px\",\r\n                            }}\r\n                            size=\"large\"\r\n                          >\r\n                            <Button\r\n                              color=\"primary\"\r\n                              size=\"small\"\r\n                              aria-label=\"select merge strategy\"\r\n                              aria-haspopup=\"menu\"\r\n                              style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n                            >\r\n                              <MdDashboard />\r\n                            </Button>\r\n                            <Button\r\n                              style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n                            >\r\n                              <span\r\n                                style={{\r\n                                  fontSize: \"12px\",\r\n                                  color: \"#fff\",\r\n                                  fontWeight: \"bolder\",\r\n                                }}\r\n                              >\r\n                                Patient Dashboard\r\n                              </span>\r\n                            </Button>\r\n                          </ButtonGroup>\r\n                        </Link>\r\n                      </div>\r\n                    ),\r\n                  })),\r\n                  page: query.page,\r\n                  totalCount: result.data.totalRecords,\r\n                });\r\n              })\r\n          )\r\n        }\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n        components={{\r\n          Toolbar: (props) => (\r\n            <div>\r\n              <div className=\"form-check custom-checkbox  float-left mt-4 ml-3 \">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"form-check-input\"\r\n                  name=\"showPP!\"\r\n                  id=\"showPP\"\r\n                  value=\"showPP\"\r\n                  checked={showPPI === true ? false : true}\r\n                  onChange={handleCheckBox}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.25rem\",\r\n                  }}\r\n                />\r\n                <label className=\"form-check-label\" htmlFor=\"basic_checkbox_1\">\r\n                  <b style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\r\n                    SHOW PII\r\n                  </b>\r\n                </label>\r\n              </div>\r\n              <MTableToolbar {...props} />\r\n            </div>\r\n          ),\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ANCPatients;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Patient\\PmtctPatients.js",["455"],"import React, { useState } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\n\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst PmtctPatients = (props) => {\r\n  const [showPPI, setShowPPI] = useState(true);\r\n  const handleCheckBox = (e) => {\r\n    if (e.target.checked) {\r\n      setShowPPI(false);\r\n    } else {\r\n      setShowPPI(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"Find Patient \"\r\n        columns={[\r\n          // { title: \" ID\", field: \"Id\" },\r\n          {\r\n            title: \"Patient Name\",\r\n            field: \"name\",\r\n            hidden: showPPI,\r\n          },\r\n          {\r\n            title: \"Hospital Number\",\r\n            field: \"hospital_number\",\r\n            filtering: false,\r\n          },\r\n          { title: \"Sex\", field: \"gender\", filtering: false },\r\n          { title: \"Age\", field: \"age\", filtering: false },\r\n          //{ title: \"Enrollment Status\", field: \"v_status\", filtering: false },\r\n          //{ title: \"ART Number\", field: \"v_status\", filtering: false },\r\n          // { title: \"ART Status\", field: \"status\", filtering: false },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        //isLoading={loading}\r\n        data={(query) =>\r\n          new Promise((resolve, reject) =>\r\n            axios\r\n              .get(\r\n                `${baseUrl}pmtct/anc/all-active-pmtct?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n              )\r\n              .then((response) => response)\r\n              .then((result) => {\r\n                console.log(\"general PMTCT PATIENT\", result);\r\n                resolve({\r\n                  data: result.data.records.map((row) => ({\r\n                    name: (\r\n                      <Link\r\n                        to={{\r\n                          pathname: \"/patient-history\",\r\n                          state: { patientObj: row },\r\n                        }}\r\n                        title={\"Click to view patient dashboard\"}\r\n                      >\r\n                        {\" \"}\r\n                        {row.surname ? row.surname : row.fullName}\r\n                      </Link>\r\n                    ),\r\n\r\n                    hospital_number: row.hospitalNumber,\r\n                    gender: row && row.sex ? row.sex : \"Female\",\r\n                    age: row.age,\r\n                    actions: (\r\n                      <div>\r\n                        <Link\r\n                          to={{\r\n                            pathname: \"/patient-history\",\r\n                            state: { patientObj: row },\r\n                          }}\r\n                        >\r\n                          <ButtonGroup\r\n                            variant=\"contained\"\r\n                            aria-label=\"split button\"\r\n                            style={{\r\n                              backgroundColor: \"rgb(153, 46, 98)\",\r\n                              height: \"30px\",\r\n                              width: \"215px\",\r\n                            }}\r\n                            size=\"large\"\r\n                          >\r\n                            <Button\r\n                              color=\"primary\"\r\n                              size=\"small\"\r\n                              aria-label=\"select merge strategy\"\r\n                              aria-haspopup=\"menu\"\r\n                              style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n                            >\r\n                              <MdDashboard />\r\n                            </Button>\r\n                            <Button\r\n                              style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n                            >\r\n                              <span\r\n                                style={{\r\n                                  fontSize: \"12px\",\r\n                                  color: \"#fff\",\r\n                                  fontWeight: \"bolder\",\r\n                                }}\r\n                              >\r\n                                Patient Dashboard\r\n                              </span>\r\n                            </Button>\r\n                          </ButtonGroup>\r\n                        </Link>\r\n                      </div>\r\n                    ),\r\n                  })),\r\n                  page: query.page,\r\n                  totalCount: result.data.totalRecords,\r\n                });\r\n              })\r\n          )\r\n        }\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n        components={{\r\n          Toolbar: (props) => (\r\n            <div>\r\n              <div className=\"form-check custom-checkbox  float-left mt-4 ml-3 \">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"form-check-input\"\r\n                  name=\"showPP!\"\r\n                  id=\"showPP\"\r\n                  value=\"showPP\"\r\n                  checked={showPPI === true ? false : true}\r\n                  onChange={handleCheckBox}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.25rem\",\r\n                  }}\r\n                />\r\n                <label className=\"form-check-label\" htmlFor=\"basic_checkbox_1\">\r\n                  <b style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\r\n                    SHOW PII\r\n                  </b>\r\n                </label>\r\n              </div>\r\n              <MTableToolbar {...props} />\r\n            </div>\r\n          ),\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PmtctPatients;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\PmtctEnrollment.js",["456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471"],"import React, { useState, useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupText,\r\n} from \"reactstrap\";\r\nimport { Label as FormLabelName } from \"reactstrap\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport \"react-summernote/dist/react-summernote.css\"; // import styles\r\nimport { Spinner } from \"reactstrap\";\r\nimport { Message } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst AncPnc = (props) => {\r\n  const patientObj = props.patientObj;\r\n  let history = useHistory();\r\n\r\n  const location = useLocation();\r\n  const locationState = location && location.state ? location.state : null;\r\n  console.log(locationState);\r\n\r\n  const classes = useStyles();\r\n  const [disabledField, setSisabledField] = useState(false);\r\n  const [entryPoint, setentryPoint] = useState([]);\r\n  const [entryPointValue, setentryPointValue] = useState(\"\");\r\n\r\n  const [tbStatus, setTbStatus] = useState([]);\r\n  const [artStartTime, setartStartTime] = useState([]);\r\n  const [saving, setSaving] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [entryValueDisplay, setEntryValueDisplay] = useState({});\r\n  const [allNewEntryPoint, setAllNewEntryPoint] = useState([]);\r\n\r\n  const [enroll, setEnrollDto] = useState({\r\n    ancNo: patientObj.ancNo ? patientObj.ancNo : \"\",\r\n    pmtctEnrollmentDate: \"\",\r\n    entryPoint: entryValueDisplay?.id,\r\n    ga: props.patientObj.gaweeks,\r\n    gravida: props.patientObj.gravida,\r\n    artStartDate: \"\",\r\n    artStartTime: patientObj.artStartTime ? patientObj.artStartTime : \"\",\r\n    id: \"\",\r\n    tbStatus: \"\",\r\n    hivStatus: patientObj.hivStatus\r\n      ? patientObj.hivStatus\r\n      : patientObj.staticHivStatus\r\n      ? patientObj.staticHivStatus\r\n      : \"\",\r\n    lmp: props?.patientObj?.lmp ? props?.patientObj?.lmp : \"\",\r\n    gaweeks: props?.patientObj?.gaweeks ? props?.patientObj?.gaweeks : \"\",\r\n\r\n    // personUuid:\r\n    //   locationState && locationState.patientObj\r\n    //     ? locationState.patientObj.uuid\r\n    //     : null,\r\n    pmtctType: entryValueDisplay.display,\r\n  });\r\n\r\n  console.log(props.allEntryPoint);\r\n\r\n  const NEW_POINT_ENTRY_PMTCT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PMTCT_ENTRY_POINT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setAllNewEntryPoint(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const getPatientEntryType = (id) => {\r\n    if (locationState.entrypointValue) {\r\n      allNewEntryPoint.map((each, i) => {\r\n        if (each.code === locationState.entrypointValue) {\r\n          setEntryValueDisplay(each);\r\n        }\r\n      });\r\n    } else if (props.entrypointValue) {\r\n      props.allEntryPoint.map((each, i) => {\r\n        if (each.code === props.entrypointValue) {\r\n          setEntryValueDisplay(each);\r\n        }\r\n      });\r\n    } else {\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    NEW_POINT_ENTRY_PMTCT();\r\n    POINT_ENTRY_PMTCT();\r\n    TIME_ART_INITIATION_PMTCT();\r\n    TB_STATUS();\r\n\r\n    if (\r\n      props.activeContent.id &&\r\n      props.activeContent.id !== \"\" &&\r\n      props.activeContent.id !== null\r\n    ) {\r\n      GetPatientPMTCT(props.activeContent.id);\r\n      setSisabledField(\r\n        props.activeContent.actionType === \"view\" ? true : false\r\n      );\r\n    }\r\n    if (\r\n      props?.patientObj?.person_uuid ||\r\n      locationState?.patientObj?.person_uuid\r\n    ) {\r\n      console.log(\"props.patientObj.person_uuid\", props.patientObj.person_uuid);\r\n      console.log(\r\n        \"locationState.patientObj.person_uuid\",\r\n        locationState.patientObj.person_uuidd\r\n      );\r\n\r\n      setEnrollDto({\r\n        ...enroll,\r\n        personUuid: locationState.patientObj.person_uuid,\r\n      });\r\n    } else if (props?.patientObj?.uuid || locationState?.patientObj?.uuid) {\r\n      setEnrollDto({\r\n        ...enroll,\r\n        personUuid: locationState.patientObj.uuid,\r\n      });\r\n    }\r\n    // else {\r\n    //   setEnrollDto({\r\n    //     ...enroll,\r\n    //     personDto:\r\n    //       locationState && locationState.patientObj\r\n    //         ? locationState.patientObj\r\n    //         : null,\r\n    //   });\r\n    // }\r\n\r\n    // setEnrollDto(\r\n    //   patientObj.hivStatus\r\n    //     ? patientObj.hivStatus\r\n    //     : patientObj.staticHivStatus\r\n    //     ? patientObj.staticHivStatus\r\n    //     : \"\"\r\n    // );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // if (props?.allEntryPoint) {\r\n    getPatientEntryType();\r\n    // }\r\n  }, [allNewEntryPoint]);\r\n\r\n  console.log(entryValueDisplay);\r\n  useEffect(() => {\r\n    if (props.getPMTCTInfo) {\r\n      props.getPMTCTInfo(enroll);\r\n    }\r\n  }, [enroll]);\r\n  console.log(\r\n    \"uuid\",\r\n    props?.patientObj,\r\n    locationState?.patientObj?.person_uuid\r\n  );\r\n\r\n  const GetPatientPMTCT = (id) => {\r\n    axios\r\n      .get(\r\n        `${baseUrl}pmtct/anc/view-pmtct-enrollment/${props.activeContent.id}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        //console.log(response.data.find((x)=> x.id===id));\r\n        setEnrollDto({ ...enroll, ...response.data });\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const POINT_ENTRY_PMTCT = () => {\r\n    console.log(\"former\", enroll);\r\n\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/POINT_ENTRY_PMTCT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setentryPoint(response.data);\r\n        console.log(response.data);\r\n        // console.log(\"deducted\", ans);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const TIME_ART_INITIATION_PMTCT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/TIMING_MOTHERS_ART_INITIATION`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setartStartTime(response.data);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n  const TB_STATUS = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/TB_STATUS`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setTbStatus(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const handleInputChangeEnrollmentDto = (e) => {\r\n    setEnrollDto({ ...enroll, [e.target.name]: e.target.value });\r\n    console.log(\"payload\", enroll);\r\n\r\n    if (e.target.name === \"lmp\" && e.target.value !== \"\") {\r\n      console.log(\"calculate \", e.target.name, e.target.value);\r\n\r\n      async function getGa() {\r\n        const ga = e.target.value;\r\n        const response = await axios.get(\r\n          `${baseUrl}pmtct/anc/calculate-ga/${ga}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        );\r\n        if (response.data > 0) {\r\n          enroll.gaweeks = response.data;\r\n          setEnrollDto({ ...enroll, [e.target.name]: e.target.value });\r\n        } else {\r\n          enroll.gaweeks = response.data;\r\n          toast.error(\"Please select a validate date\");\r\n          setEnrollDto({ ...enroll, [e.target.name]: e.target.value });\r\n        }\r\n      }\r\n      getGa();\r\n    }\r\n  };\r\n\r\n  console.log(props.patientObj);\r\n  //FORM VALIDATION\r\n  const validate = () => {\r\n    let temp = { ...errors };\r\n    temp.pmtctEnrollmentDate = enroll.pmtctEnrollmentDate\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    //temp.entryPoint = enroll.entryPoint ? \"\" : \"This field is required\"\r\n    //temp.ga = enroll.ga ? \"\" : \"This field is required\"\r\n    // temp.gravida = enroll.gravida ? \"\" : \"This field is required\"\r\n    temp.pmtctEnrollmentDate = enroll.pmtctEnrollmentDate\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    temp.artStartDate = enroll.artStartDate ? \"\" : \"This field is required\";\r\n    temp.artStartTime = enroll.artStartTime ? \"\" : \"This field is required\";\r\n    temp.tbStatus = enroll.tbStatus ? \"\" : \"This field is required\";\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n  /**** Submit Button Processing  */\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (validate()) {\r\n      setSaving(true);\r\n      if (props.activeContent && props.activeContent.actionType) {\r\n        //Perform operation for update action\r\n        axios\r\n          .put(\r\n            `${baseUrl}pmtct/anc/update-pmtct-enrollment/${props.activeContent.id}`,\r\n            enroll,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          )\r\n          .then((response) => {\r\n            setSaving(false);\r\n            //props.patientObj.commenced=true\r\n            toast.success(\"Record updated successful\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n            props.setActiveContent({\r\n              ...props.activeContent,\r\n              route: \"recent-history\",\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setSaving(false);\r\n            toast.error(\"Something went wrong\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          });\r\n      } else {\r\n        //perform operation for save action\r\n        let payload = {\r\n          ...enroll,\r\n          entryPoint: locationState.entrypointValue\r\n            ? locationState.entrypointValue\r\n            : props.entrypointValue,\r\n          personUuid:\r\n            locationState && locationState.patientObj\r\n              ? locationState.patientObj.uuid\r\n              : props.patientObj.uuid,\r\n          personUuid: props.patientObj.person_uuid\r\n            ? props.patientObj.person_uuid\r\n            : locationState.patientObj.uuid,\r\n        };\r\n\r\n        axios\r\n          .post(`${baseUrl}pmtct/anc/pmtct-enrollment`, payload, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          })\r\n          .then((response) => {\r\n            setSaving(false);\r\n            props.patientObj.pmtctRegStatus = true;\r\n            toast.success(\"Enrollment save successful\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n            if (props.handleRoute) {\r\n              props.handleRoute(response.data);\r\n            } else {\r\n              props.setActiveContent({\r\n                ...props.activeContent,\r\n                route: \"recent-history\",\r\n              });\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            setSaving(false);\r\n            toast.error(\"Something went wrong\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <form>\r\n            <div className=\"row \">\r\n              <div\r\n                className=\"card-header mb-3 \"\r\n                style={{\r\n                  backgroundColor: \"#014d88\",\r\n                  color: \"#fff\",\r\n                  fontWeight: \"bolder\",\r\n                  borderRadius: \"0.2rem\",\r\n                  marginTop: \"-20px\",\r\n                }}\r\n              >\r\n                <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\r\n                  PMTCT Enrollment\r\n                </h5>\r\n              </div>\r\n\r\n              <h3 className=\"mb-3\">\r\n                <span>Point of Entry: </span>\r\n                {/* \r\n                {locationState.postValue}\r\n                <span>\r\n                  {` ${\r\n                    locationState?.subPostValue\r\n                      ? locationState?.subPostValue\r\n                      : \"\"\r\n                  }`}\r\n                </span> */}\r\n\r\n                {entryValueDisplay.display}\r\n              </h3>\r\n              {console.log(\r\n                \"entryValueDisplay.display\",\r\n                entryValueDisplay.display\r\n              )}\r\n              {console.log(\"locationState.postValue\", locationState.postValue)}\r\n              {console.log(\"locationState\", locationState)}\r\n\r\n              {console.log(\"props\", props)}\r\n\r\n              {props?.ancEntryType && (\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      ANC ID\r\n                      {/* <span style={{ color:\"red\"}}> *</span> */}\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"ancNo\"\r\n                        id=\"ancNo\"\r\n                        onChange={handleInputChangeEnrollmentDto}\r\n                        value={patientObj.ancNo}\r\n                        disabled\r\n                      />\r\n                    </InputGroup>\r\n                    {errors.ancNo !== \"\" ? (\r\n                      <span className={classes.error}>{errors.ancNo}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n              )}\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Date of Enrollment <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"date\"\r\n                      name=\"pmtctEnrollmentDate\"\r\n                      id=\"pmtctEnrollmentDate\"\r\n                      onChange={handleInputChangeEnrollmentDto}\r\n                      value={enroll.pmtctEnrollmentDate}\r\n                      min={props.patientObj.firstAncDate}\r\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                      disabled={disabledField}\r\n                    />\r\n                  </InputGroup>\r\n                  {errors.pmtctEnrollmentDate !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.pmtctEnrollmentDate}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n\r\n              {\r\n                // !props?.ancEntryType &&\r\n                true && (\r\n                  <>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Date Of Last Menstrual Period\r\n                          <span style={{ color: \"red\" }}>*</span>{\" \"}\r\n                        </Label>\r\n                        <InputGroup>\r\n                          <Input\r\n                            type=\"date\"\r\n                            name=\"lmp\"\r\n                            id=\"lmp\"\r\n                            onChange={handleInputChangeEnrollmentDto}\r\n                            value={\r\n                              props?.ancEntryType\r\n                                ? props?.patientObj?.lmp\r\n                                : enroll.lmp\r\n                            }\r\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                            disabled={props?.ancEntryType}\r\n                          />\r\n                        </InputGroup>\r\n                        {errors.lmp !== \"\" ? (\r\n                          <span className={classes.error}>{errors.lmp}</span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        {enroll.gaweeks === 0 ? (\r\n                          <span className={classes.error}>Invalid date </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Gestational Age (Weeks){\" \"}\r\n                          <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <InputGroup>\r\n                          <Input\r\n                            type=\"number\"\r\n                            name=\"gaweeks\"\r\n                            id=\"gaweeks\"\r\n                            onChange={handleInputChangeEnrollmentDto}\r\n                            value={\r\n                              props?.ancEntryType\r\n                                ? props?.patientObj?.gaweeks\r\n                                : enroll.gaweeks\r\n                            }\r\n                            disabled\r\n                          />\r\n                        </InputGroup>\r\n                        {errors.gaweeks !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.gaweeks}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                  </>\r\n                )\r\n              }\r\n\r\n              {/* <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                        <Label >Point of Entry <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <InputGroup> \r\n                            <Input \r\n                                type=\"select\"\r\n                                name=\"entryPoint\"\r\n                                id=\"entryPoint\"\r\n                                onChange={handleInputChangeEnrollmentDto}\r\n                                value={enroll.entryPoint} \r\n                                disabled={disabledField}\r\n                            >\r\n                                <option value=\"\">Select</option>\r\n                                {entryPoint.map((value, index) => (\r\n                                    <option key={index} value={value.code}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                            </Input>\r\n\r\n                        </InputGroup>\r\n                        {errors.entryPoint !==\"\" ? (\r\n                                <span className={classes.error}>{errors.entryPoint}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>  */}\r\n\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Gravida <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"number\"\r\n                      name=\"gravida\"\r\n                      id=\"gravida\"\r\n                      min=\"1\"\r\n                      onChange={handleInputChangeEnrollmentDto}\r\n                      value={enroll.gravida}\r\n                      disabled={disabledField}\r\n                    />\r\n                  </InputGroup>\r\n                  {errors.gravida !== \"\" ? (\r\n                    <span className={classes.error}>{errors.gravida}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Art Start Date <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"date\"\r\n                      name=\"artStartDate\"\r\n                      id=\"artStartDate\"\r\n                      onChange={handleInputChangeEnrollmentDto}\r\n                      value={enroll.artStartDate}\r\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                      disabled={disabledField}\r\n                    />\r\n                  </InputGroup>\r\n                  {errors.artStartDate !== \"\" ? (\r\n                    <span className={classes.error}>{errors.artStartDate}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Timing of ART Initiation{\" \"}\r\n                    <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"artStartTime\"\r\n                      id=\"artStartTime\"\r\n                      onChange={handleInputChangeEnrollmentDto}\r\n                      value={enroll.artStartTime}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      {artStartTime.map((value, index) => (\r\n                        <option key={index} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.artStartTime !== \"\" ? (\r\n                    <span className={classes.error}>{errors.artStartTime}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    TB Status <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"tbStatus\"\r\n                      id=\"tbStatus\"\r\n                      onChange={handleInputChangeEnrollmentDto}\r\n                      value={enroll.tbStatus}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      {tbStatus.map((value, index) => (\r\n                        <option key={index} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.tbStatus !== \"\" ? (\r\n                    <span className={classes.error}>{errors.tbStatus}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    HIV Status <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"hivStatus\"\r\n                      id=\"hivStatus\"\r\n                      disabled={\r\n                        patientObj.hivStatus\r\n                          ? true\r\n                          : patientObj.staticHivStatus\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      onChange={handleInputChangeEnrollmentDto}\r\n                      value={enroll.hivStatus}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      <option value=\"Positive\">Positive</option>\r\n                      <option value=\"Negative\">Negative</option>\r\n                      <option value=\"Unknown\">Unknown</option>\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.hivStatus !== \"\" ? (\r\n                    <span className={classes.error}>{errors.hivStatus}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n            </div>\r\n\r\n            {saving ? <Spinner /> : \"\"}\r\n            <br />\r\n\r\n            {props.hideUpdateButton && (\r\n              <>\r\n                {props.activeContent && props.activeContent.actionType ? (\r\n                  <>\r\n                    <MatButton\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      hidden={disabledField}\r\n                      className={classes.button}\r\n                      startIcon={<SaveIcon />}\r\n                      style={{ backgroundColor: \"#014d88\" }}\r\n                      onClick={handleSubmit}\r\n                      disabled={saving}\r\n                    >\r\n                      {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>\r\n                          Update\r\n                        </span>\r\n                      ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>\r\n                          Updating...\r\n                        </span>\r\n                      )}\r\n                    </MatButton>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <MatButton\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      startIcon={<SaveIcon />}\r\n                      style={{ backgroundColor: \"#014d88\" }}\r\n                      onClick={handleSubmit}\r\n                      disabled={saving}\r\n                    >\r\n                      {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>\r\n                          Save\r\n                        </span>\r\n                      ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>\r\n                          Saving...\r\n                        </span>\r\n                      )}\r\n                    </MatButton>\r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AncPnc;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\LabourDelivery.js",["472","473","474","475"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  InputGroup,\r\n} from \"reactstrap\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport axios from \"axios\";\r\n\r\nimport { toast } from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"react-summernote/dist/react-summernote.css\"; // import styles\r\nimport { Spinner } from \"reactstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst LabourDelivery = (props) => {\r\n  const patientObj = props.patientObj;\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  const [delieryMode, setDelieryMode] = useState([]);\r\n  const [feedingDecision, setfeedingDecision] = useState([]);\r\n  const [maternalOutCome, setmaternalOutCome] = useState([]);\r\n  const [saving, setSaving] = useState(false);\r\n  const [disabledField, setSisabledField] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [childStatus, setChildStatus] = useState([]);\r\n  const [bookingStatus, setBookingStatus] = useState([]);\r\n  const [romdelivery, setRomdelivery] = useState([]);\r\n  const [timehiv, setTimehiv] = useState([]);\r\n  const [delivery, setDelivery] = useState({\r\n    ancNo: patientObj.ancNo,\r\n    artStartedLdWard: \"\",\r\n    bookingStatus: \"\",\r\n    childGivenArvWithin72: \"\",\r\n    childStatus: \"\",\r\n    dateOfDelivery: \"\",\r\n    deliveryTime: \"\",\r\n    episiotomy: \"\",\r\n    feedingDecision: \"\",\r\n    gaweeks: \"\",\r\n    hbstatus: \"\",\r\n    hcstatus: \"\",\r\n    hivExposedInfantGivenHbWithin24hrs: \"\",\r\n    maternalOutcome: \"\",\r\n    maternalOutcomeChild: \"\",\r\n    modeOfDelivery: \"\",\r\n    onArt: \"\",\r\n    referalSource: \"\",\r\n    romDeliveryInterval: \"\",\r\n    vaginalTear: \"\",\r\n    numberOfInfantsAlive: \"\",\r\n    numberOfInfantsDead: \"\",\r\n    personUuid: props.patientObj.person_uuid\r\n      ? props.patientObj.person_uuid\r\n      : props.patientObj.personUuid\r\n      ? props.patientObj.personUuid\r\n      : props.patientObj.uuid,\r\n  });\r\n  useEffect(() => {\r\n    MODE_DELIVERY();\r\n    FEEDING_DECISION();\r\n    MATERNAL_OUTCOME();\r\n    CHILD_STATUS_DELIVERY();\r\n    BOOKING_STATUS();\r\n    ROM_DELIVERY_INTERVAL();\r\n    TIME_HIV_DIAGNOSIS();\r\n    if (\r\n      props.activeContent.id &&\r\n      props.activeContent.id !== \"\" &&\r\n      props.activeContent.id !== null\r\n    ) {\r\n      GetPatientLabourDTO(props.activeContent.id);\r\n      setSisabledField(\r\n        props.activeContent.actionType === \"view\" ? true : false\r\n      );\r\n    }\r\n  }, [props.patientObj.id, props.activeContent]);\r\n\r\n  const GetPatientLabourDTO = (id) => {\r\n    axios\r\n      .get(`${baseUrl}pmtct/anc/view-delivery/${props.activeContent.id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data.find((x)=> x.id===id));\r\n        setDelivery(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  //Get list\r\n  const BOOKING_STATUS = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/BOOKING STATUS`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setBookingStatus(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const TIME_HIV_DIAGNOSIS = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/TIME_HIV_DIAGNOSIS_PMTCT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setTimehiv(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const ROM_DELIVERY_INTERVAL = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/ROM_DELIVERY_INTERVAL`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setRomdelivery(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const MODE_DELIVERY = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/MODE_DELIVERY`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setDelieryMode(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const CHILD_STATUS_DELIVERY = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/CHILD_STATUS_DELIVERY`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setChildStatus(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const FEEDING_DECISION = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/FEEDING DECISION`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setfeedingDecision(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const MATERNAL_OUTCOME = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/MATERNAL_OUTCOME`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setmaternalOutCome(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const handleInputChangeDeliveryDto = (e) => {\r\n    setErrors({ ...errors, [e.target.name]: \"\" });\r\n    if (e.target.name === \"dateOfDelivery\" && e.target.value !== \"\") {\r\n      async function getGa() {\r\n        const ga = e.target.value;\r\n        const response = await axios.get(\r\n          `${baseUrl}pmtct/anc/calculate-ga-from-person?personUuid=${\r\n            props.patientObj.person_uuid\r\n              ? props.patientObj.person_uuid\r\n              : props.patientObj.personUuid\r\n              ? props.patientObj.personUuid\r\n              : props.patientObj.uuid\r\n          }&visitDate=${ga}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        );\r\n        if (response.data > 0) {\r\n          delivery.gaweeks = response.data;\r\n          setDelivery({ ...delivery, [e.target.name]: e.target.value });\r\n        } else {\r\n          toast.error(\"Please select a validate date\");\r\n          setDelivery({ ...delivery, [e.target.name]: e.target.value });\r\n        }\r\n      }\r\n      getGa();\r\n    }\r\n    setDelivery({ ...delivery, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  //FORM VALIDATION\r\n  const validate = () => {\r\n    let temp = { ...errors };\r\n    temp.artStartedLdWard = delivery.artStartedLdWard\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    //temp.referalSource = delivery.referalSource ? \"\" : \"This field is required\"\r\n    temp.romDeliveryInterval = delivery.romDeliveryInterval\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    temp.vaginalTear = delivery.vaginalTear ? \"\" : \"This field is required\";\r\n    temp.onArt = delivery.onArt ? \"\" : \"This field is required\";\r\n    temp.modeOfDelivery = delivery.modeOfDelivery\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    temp.maternalOutcome = delivery.maternalOutcome\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    temp.hivExposedInfantGivenHbWithin24hrs =\r\n      delivery.hivExposedInfantGivenHbWithin24hrs\r\n        ? \"\"\r\n        : \"This field is required\";\r\n    temp.hcstatus = delivery.hcstatus ? \"\" : \"This field is required\";\r\n    temp.hbstatus = delivery.hbstatus ? \"\" : \"This field is required\";\r\n    temp.gaweeks = delivery.gaweeks ? \"\" : \"This field is required\";\r\n    temp.feedingDecision = delivery.feedingDecision\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    temp.episiotomy = delivery.episiotomy ? \"\" : \"This field is required\";\r\n    temp.deliveryTime = delivery.deliveryTime ? \"\" : \"This field is required\";\r\n    temp.dateOfDelivery = delivery.dateOfDelivery\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    temp.childStatus = delivery.childStatus ? \"\" : \"This field is required\";\r\n    temp.childGivenArvWithin72 = delivery.childGivenArvWithin72\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    temp.bookingStatus = delivery.bookingStatus ? \"\" : \"This field is required\";\r\n    delivery.maternalOutcomeChild !== \"\" &&\r\n      (temp.numberOfInfantsAlive = delivery.numberOfInfantsAlive\r\n        ? \"\"\r\n        : \"This field is required\");\r\n    delivery.maternalOutcomeChild !== \"\" &&\r\n      (temp.numberOfInfantsDead = delivery.numberOfInfantsDead\r\n        ? \"\"\r\n        : \"This field is required\");\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n  /**** Submit Button Processing  */\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      setSaving(true);\r\n      if (props.activeContent && props.activeContent.actionType) {\r\n        //Perform operation for updation action\r\n        axios\r\n          .put(\r\n            `${baseUrl}pmtct/anc/update-delivery/${props.activeContent.id}`,\r\n            delivery,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          )\r\n          .then((response) => {\r\n            setSaving(false);\r\n\r\n            toast.success(\"Record updated successful\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n            props.setActiveContent({\r\n              ...props.activeContent,\r\n              route: \"recent-history\",\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setSaving(false);\r\n            toast.error(\"Something went wrong\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          });\r\n      } else {\r\n        //perform opertaio for save action\r\n        axios\r\n          .post(`${baseUrl}pmtct/anc/pmtct-delivery`, delivery, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          })\r\n          .then((response) => {\r\n            setSaving(false);\r\n            props.patientObj.deliveryStatus = true;\r\n            toast.success(\"Record save successful\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n            props.setActiveContent({\r\n              ...props.activeContent,\r\n              route: \"recent-history\",\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setSaving(false);\r\n            toast.error(\"Something went wrong\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          });\r\n      }\r\n    } else {\r\n      toast.error(\"All field are required\", {\r\n        position: toast.POSITION.BOTTOM_CENTER,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          {console.log(patientObj)}\r\n          <form>\r\n            <div className=\"row\">\r\n              <h2>Labour and Delivery</h2>\r\n              {props.patientObj.ancNo && (\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>ANC ID</Label>\r\n                    <InputGroup>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"ancNo\"\r\n                        id=\"ancNo\"\r\n                        onChange={handleInputChangeDeliveryDto}\r\n                        value={delivery.ancNo}\r\n                        disabled\r\n                      />\r\n                    </InputGroup>\r\n                    {errors.ancNo !== \"\" ? (\r\n                      <span className={classes.error}>{errors.ancNo}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n              )}\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Booking Status <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"bookingStatus\"\r\n                      id=\"bookingStatus\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.bookingStatus}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select </option>\r\n\r\n                      {bookingStatus.map((value) => (\r\n                        <option key={value.id} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.bookingStatus !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.bookingStatus}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Date of Delivery <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"date\"\r\n                      name=\"dateOfDelivery\"\r\n                      id=\"dateOfDelivery\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.dateOfDelivery}\r\n                      min={props.patientObj.firstAncDate}\r\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                      disabled={disabledField}\r\n                    />\r\n                  </InputGroup>\r\n                  {errors.dateOfDelivery !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.dateOfDelivery}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Gestational Age (weeks){\" \"}\r\n                    <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"number\"\r\n                      name=\"gaweeks\"\r\n                      id=\"gaweeks\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.gaweeks}\r\n                      disabled\r\n                      min=\"0\"\r\n                    />\r\n                  </InputGroup>\r\n                  {errors.gaweeks !== \"\" ? (\r\n                    <span className={classes.error}>{errors.gaweeks}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    ROM Delivery Interval{\" \"}\r\n                    <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"romDeliveryInterval\"\r\n                      id=\"romDeliveryInterval\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.romDeliveryInterval}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select </option>\r\n\r\n                      {romdelivery.map((value) => (\r\n                        <option key={value.id} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.romDeliveryInterval !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.romDeliveryInterval}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Mode of Delivery <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"modeOfDelivery\"\r\n                    id=\"modeOfDelivery\"\r\n                    value={delivery.modeOfDelivery}\r\n                    onChange={handleInputChangeDeliveryDto}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disabledField}\r\n                  >\r\n                    <option value=\"\">Select </option>\r\n\r\n                    {delieryMode.map((value) => (\r\n                      <option key={value.id} value={value.code}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                  {errors.modeOfDelivery !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.modeOfDelivery}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Episiotomy <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"episiotomy\"\r\n                      id=\"episiotomy\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.episiotomy}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      <option value=\"Yes\">Yes</option>\r\n                      <option value=\"No\">No</option>\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.episiotomy !== \"\" ? (\r\n                    <span className={classes.error}>{errors.episiotomy}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Vaginal Tear <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"vaginalTear\"\r\n                      id=\"vaginalTear\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.vaginalTear}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      <option value=\"Yes\">Yes</option>\r\n                      <option value=\"No\">No</option>\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.vaginalTear !== \"\" ? (\r\n                    <span className={classes.error}>{errors.vaginalTear}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Feeding decision <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"feedingDecision\"\r\n                      id=\"feedingDecision\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.feedingDecision}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select </option>\r\n\r\n                      {feedingDecision.map((value) => (\r\n                        <option key={value.id} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.feedingDecision !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.feedingDecision}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Child given ARV within 72 hrs{\" \"}\r\n                    <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"childGivenArvWithin72\"\r\n                      id=\"childGivenArvWithin72\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.childGivenArvWithin72}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      <option value=\"Yes\">Yes</option>\r\n                      <option value=\"No\">No</option>\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.childGivenArvWithin72 !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.childGivenArvWithin72}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    On ART? <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"onArt\"\r\n                      id=\"onArt\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.onArt}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      <option value=\"Yes\">Yes</option>\r\n                      <option value=\"No\">No</option>\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.onArt !== \"\" ? (\r\n                    <span className={classes.error}>{errors.onArt}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    HIV exposed infant given Hep B within 24 hrs of birth{\" \"}\r\n                    <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"hivExposedInfantGivenHbWithin24hrs\"\r\n                      id=\"hivExposedInfantGivenHbWithin24hrs\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.hivExposedInfantGivenHbWithin24hrs}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      <option value=\"Yes\">Yes</option>\r\n                      <option value=\"No\">No</option>\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.hivExposedInfantGivenHbWithin24hrs !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.hivExposedInfantGivenHbWithin24hrs}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Time of Diagnosis <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"deliveryTime\"\r\n                      id=\"deliveryTime\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.deliveryTime}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      {timehiv.map((value) => (\r\n                        <option key={value.id} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.deliveryTime !== \"\" ? (\r\n                    <span className={classes.error}>{errors.deliveryTime}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    ART started in L&D ward{\" \"}\r\n                    <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"artStartedLdWard\"\r\n                      id=\"artStartedLdWard\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.artStartedLdWard}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      <option value=\"Yes\">Yes</option>\r\n                      <option value=\"No\">No</option>\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.artStartedLdWard !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.artStartedLdWard}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Hepatitis B Status <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"hbstatus\"\r\n                      id=\"hbstatus\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.hbstatus}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      <option value=\"Positive\">Positive</option>\r\n                      <option value=\"Negative\">Negative</option>\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.hbstatus !== \"\" ? (\r\n                    <span className={classes.error}>{errors.hbstatus}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Hepatitis C Status <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"hcstatus\"\r\n                      id=\"hcstatus\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.hcstatus}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      <option value=\"Positive\">Positive</option>\r\n                      <option value=\"Negative\">Negative</option>\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.hcstatus !== \"\" ? (\r\n                    <span className={classes.error}>{errors.hcstatus}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <h3>Maternal Outcome</h3>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Maternal Outcome <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"maternalOutcome\"\r\n                      id=\"maternalOutcome\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.maternalOutcome}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select </option>\r\n                      {maternalOutCome.map((value) => (\r\n                        <option key={value.id} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.maternalOutcome !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.maternalOutcome}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Child status <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"childStatus\"\r\n                      id=\"childStatus\"\r\n                      onChange={handleInputChangeDeliveryDto}\r\n                      value={delivery.childStatus}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select </option>\r\n                      {childStatus.map((value) => (\r\n                        <option key={value.id} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </Input>\r\n                  </InputGroup>\r\n                  {errors.childStatus !== \"\" ? (\r\n                    <span className={classes.error}>{errors.childStatus}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {delivery.childStatus === \"CHILD_STATUS_DELIVERY_ALIVE\" && (\r\n                <>\r\n                  <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Number of Child Alive{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <InputGroup>\r\n                        <Input\r\n                          type=\"Number\"\r\n                          name=\"numberOfInfantsAlive\"\r\n                          id=\"numberOfInfantsAlive\"\r\n                          onChange={handleInputChangeDeliveryDto}\r\n                          value={delivery.numberOfInfantsAlive}\r\n                          disabled={disabledField}\r\n                          min=\"0\"\r\n                        />\r\n                      </InputGroup>\r\n                      {errors.numberOfInfantsAlive !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.numberOfInfantsAlive}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Number of Child Dead{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <InputGroup>\r\n                        <Input\r\n                          type=\"Number\"\r\n                          name=\"numberOfInfantsDead\"\r\n                          id=\"numberOfInfantsDead\"\r\n                          onChange={handleInputChangeDeliveryDto}\r\n                          value={delivery.numberOfInfantsDead}\r\n                          disabled={disabledField}\r\n                          min=\"0\"\r\n                        />\r\n                      </InputGroup>\r\n                      {errors.numberOfInfantsDead !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.numberOfInfantsDead}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n\r\n            {saving ? <Spinner /> : \"\"}\r\n            <br />\r\n            {props.activeContent && props.activeContent.actionType ? (\r\n              <>\r\n                <MatButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  hidden={disabledField}\r\n                  className={classes.button}\r\n                  startIcon={<SaveIcon />}\r\n                  style={{ backgroundColor: \"#014d88\" }}\r\n                  onClick={handleSubmit}\r\n                  disabled={saving}\r\n                >\r\n                  {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                  ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>\r\n                      Updating...\r\n                    </span>\r\n                  )}\r\n                </MatButton>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <MatButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  startIcon={<SaveIcon />}\r\n                  style={{ backgroundColor: \"#014d88\" }}\r\n                  onClick={handleSubmit}\r\n                  disabled={saving}\r\n                >\r\n                  {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                  ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>\r\n                      Saving...\r\n                    </span>\r\n                  )}\r\n                </MatButton>\r\n              </>\r\n            )}\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LabourDelivery;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\AncEnrollement.js",["476","477","478","479"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardBody,\n  FormGroup,\n  Label,\n  Input,\n  InputGroup,\n} from \"reactstrap\";\nimport MatButton from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { url as baseUrl, token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport \"react-summernote/dist/react-summernote.css\"; // import styles\nimport { Spinner } from \"reactstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    flexGrow: 1,\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst AncEnrollement = (props) => {\n  const patientObj = props.patientObj;\n  console.log(patientObj);\n  let history = useHistory();\n  const classes = useStyles();\n  //const [values, setValues] = useState([]);\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  const [vital, setVitalSignDto] = useState({\n    bodyWeight: \"\",\n    diastolic: \"\",\n    encounterDate: \"\",\n    facilityId: 1,\n    height: \"\",\n    personId: \"\",\n    pulse: \"\",\n    respiratoryRate: \"\",\n    systolic: \"\",\n    temperature: \"\",\n    visitId: \"\",\n  });\n\n  const handleInputChangeVitalSignDto = (e) => {\n    setVitalSignDto({ ...vital, [e.target.name]: e.target.value });\n  };\n\n  //FORM VALIDATION\n  const validate = () => {\n    let temp = { ...errors };\n    //temp.name = details.name ? \"\" : \"This field is required\"\n    //temp.description = details.description ? \"\" : \"This field is required\"\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  /**** Submit Button Processing  */\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    setSaving(true);\n    axios\n      .post(`${baseUrl}patient/vital-sign/`, vital, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSaving(false);\n        props.patientObj.commenced = true;\n        toast.success(\"Vital signs save successful\");\n        props.setActiveContent({\n          ...props.activeContent,\n          route: \"recent-history\",\n        });\n      })\n      .catch((error) => {\n        setSaving(false);\n        toast.error(\"Something went wrong\");\n      });\n  };\n\n  return (\n    <div>\n      <Card className={classes.root}>\n        <CardBody>\n          <form>\n            <div className=\"row\">\n              <h2>ANC Enrollment</h2>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    ANC No <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Date of 1st ANC <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"date\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Gravida</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"number\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                      min=\"0\"\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Parity</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"number\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Date Of Last Menstrual Period{\" \"}\n                    <span style={{ color: \"red\" }}> *</span>{\" \"}\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"date\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Expected Date Of Delivery </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"Date\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Gestational Age (Weeks)</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Time of HIV Diagnosis</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Source of Referral</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n\n              <h3>Syphilis Information</h3>\n              <hr />\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Tested for syphilis?</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Test Result</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"date\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Treated for Syphilis</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Referred for syphilis treatment</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <h3>PMTCT HTS</h3>\n              <hr />\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Previously known HIV positive?</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Date tested HIV positive</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"date\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Accepted HIV Testing?</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>HIV test result</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>HIV Restesting?</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Received HIV test result?</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n\n              <h3>Hepatitis Information</h3>\n              <hr />\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Tested for Hepatitis B</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Hepatitis B test result</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Tested for Hepatitis C</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Hepatitis C test result</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <h3>Partner Notification</h3>\n              <hr />\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Agreed to partner notification?</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    >\n                      <option value=\"\">Select</option>\n                    </Input>\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Partner's HIV status</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    >\n                      <option value=\"\">Select</option>\n                    </Input>\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Partner referred to?</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    >\n                      <option value=\"\">Select</option>\n                    </Input>\n                  </InputGroup>\n                </FormGroup>\n              </div>\n            </div>\n\n            {saving ? <Spinner /> : \"\"}\n            <br />\n\n            <MatButton\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              startIcon={<SaveIcon />}\n              onClick={handleSubmit}\n            >\n              {!saving ? (\n                <span style={{ textTransform: \"capitalize\" }}>Save</span>\n              ) : (\n                <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\n              )}\n            </MatButton>\n\n            <MatButton\n              variant=\"contained\"\n              className={classes.button}\n              startIcon={<CancelIcon />}\n            >\n              <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\n            </MatButton>\n          </form>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default AncEnrollement;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Consultation\\Index.js",["480","481"],"import React, { useState, Fragment, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Row, Col, Card, Tab, Tabs } from \"react-bootstrap\";\nimport ConsultationPage from \"./Home\";\nimport InfantVisit from \"./InfantVisit\";\nimport { url as baseUrl, token as token } from \"./../../../api\";\n\nconst divStyle = {\n  borderRadius: \"2px\",\n  fontSize: 14,\n};\n\nconst ClinicVisitPage = (props) => {\n  const [key, setKey] = useState(\"home\");\n  const patientObj = props.patientObj;\n  const [aliveChild, setAliveChild] = useState(0);\n\n  const DeliveryInfo = () => {\n    if (props.patientObj.ancNo) {\n      axios\n        .get(`${baseUrl}pmtct/anc/view-delivery2/${props.patientObj.ancNo}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          // console.log(response.data);\n          setAliveChild(\n            response.data && response.data.numberOfInfantsAlive\n              ? response.data.numberOfInfantsAlive\n              : 0\n          );\n        })\n        .catch((error) => {\n          //console.log(error);\n        });\n    } else {\n      axios\n        .get(\n          `${baseUrl}pmtct/anc/view-delivery-with-uuid/${\n            props.patientObj.person_uuid\n              ? props.patientObj.person_uuid\n              : props.patientObj.personUuid\n              ? props.patientObj.personUuid\n              : props.patientObj.uuid\n          }`,\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        )\n        .then((response) => {\n          // console.log(response.data);\n          setAliveChild(\n            response.data && response.data.numberOfInfantsAlive\n              ? response.data.numberOfInfantsAlive\n              : 0\n          );\n        })\n        .catch((error) => {\n          //console.log(error);\n        });\n    }\n  };\n\n  useEffect(() => {\n    setKey(props.activeContent.activeTab);\n    DeliveryInfo();\n  }, [props.patientObj.id, props.activeContent.activeTab]);\n  ///GET Delivery Object\n\n  return (\n    <Fragment>\n      <Row>\n        <Col xl={12}>\n          <Card style={divStyle}>\n            <Card.Body>\n              {/* <!-- Nav tabs --> */}\n              <div className=\"custom-tab-1\">\n                <Tabs\n                  id=\"controlled-tab-example\"\n                  activeKey={key}\n                  onSelect={(k) => setKey(k)}\n                  className=\"mb-3\"\n                >\n                  <Tab eventKey=\"home\" title=\"MOTHER FOLLOW UP VISIT \">\n                    <ConsultationPage\n                      patientObj={patientObj}\n                      setActiveContent={props.setActiveContent}\n                      activeContent={props.activeContent}\n                    />\n                  </Tab>\n                  {console.log(aliveChild)}\n\n                  {console.log(aliveChild !== 0 && aliveChild > 0)}\n                  {aliveChild !== 0 && aliveChild > 0 && (\n                    <Tab eventKey=\"child\" title=\"CHILD FOLLOW UP VISIT\">\n                      <InfantVisit\n                        patientObj={patientObj}\n                        setActiveContent={props.setActiveContent}\n                        activeContent={props.activeContent}\n                      />\n                    </Tab>\n                  )}\n                </Tabs>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Fragment>\n  );\n};\n\nexport default ClinicVisitPage;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Partners\\Index.js",["482","483"],"import React, { useEffect, useState } from 'react'\nimport MaterialTable from 'material-table';\nimport axios from \"axios\";\nimport { url as baseUrl , token as token} from \"./../../../../api\";\nimport { forwardRef } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { toast} from \"react-toastify\";\nimport {FaUserPlus} from 'react-icons/fa'\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport 'react-toastify/dist/ReactToastify.css';\n//import {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\nimport \"@reach/menu-button/styles.css\";\nimport {  Modal } from \"react-bootstrap\";\nimport { Dropdown,Button, Menu, Icon } from 'semantic-ui-react'\n\n\nconst tableIcons = {\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nconst PatientnHistory = (props) => {\n    const [partners, setPartners] = useState([])\n    const [loading, setLoading] = useState(true)\n    const [open, setOpen] = React.useState(false)\n    const [saving, setSaving] = useState(false)\n    const [record, setRecord] = useState(null)\n    const toggle = () => setOpen(!open);\n    useEffect(() => {\n        PatientHistory()\n      }, [props.patientObj.id]);\n        ///GET LIST OF Patients\n        const PatientHistory =()=>{\n            setLoading(true)\n            axios\n               .get(`${baseUrl}pmtct/anc/${props.patientObj.id}`,\n                   { headers: {\"Authorization\" : `Bearer ${token}`} }\n               )\n               .then((response) => {\n                setLoading(false)\n                //console.log(response.data.partnerInformation)\n                setPartners(response.data.partnerInformation!==null ? [response.data.partnerInformation] : [])\n                })\n\n               .catch((error) => {\n               //console.log(error);\n               });\n           \n          }\n    \n    const LoadPage =(row,activePage)=>{    \n            props.setActiveContent({...props.activeContent, route:'add-partner', id:row, actionType:activePage, obj:row})\n    }\n    const LoadDeletePage =(row)=>{\n\n            setSaving(true)       \n            //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\n            axios\n            .delete(`${baseUrl}pmtct/anc/delete/partnerinfo/${props.patientObj.id}`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                toast.success(\"Record Deleted Successfully\");\n                PatientHistory()\n                toggle()\n                setSaving(false) \n            })\n            .catch((error) => {\n                setSaving(false) \n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage);\n                  }\n                  else{\n                    toast.error(\"Something went wrong. Please try again...\");\n                  }\n            });  \n        \n    }\n    const LoadModal =(row)=>{\n        toggle()\n        setRecord(row)\n    }\n\n\n  return (\n    <div>\n        {partners && partners.length<= 0 && (\n        <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className=\" float-end  mr-2 mt-2\"\n            onClick={()=>LoadPage()}\n            style={{backgroundColor:\"#014d88\"}}\n            startIcon={<FaUserPlus size=\"10\"/>}\n        >\n            <span style={{ textTransform: \"capitalize\" }}>New Partner</span>\n        </Button>\n        )}\n        <br/><br/><br/><br/>\n\n            <MaterialTable\n            icons={tableIcons}\n              title=\"List of Partners \"\n              columns={[\n                { title: \"Partner Name\", field: \"name\" },\n                { title: \"Partner Age\", field: \"age\" },\n                { title: \"Pre-test Counseled\", field: \"pre\" },\n                { title: \"Partner Accept HIV Test\", field: \"hiv\" },             \n                { title: \"Post-Test Counseled\", field: \"post\" },\n                { title: \"HBV Status\", field: \"hbv\" },\n                { title: \"HCV Status\", field: \"hcv\" },\n                { title: \"Syphillis Status\", field: \"syphillis\" },\n                { title: \"Referred To\", field: \"referred\", filtering: false },        \n                { title: \"Actions\", field: \"actions\", filtering: false }, \n              ]}\n              isLoading={loading}\n              data={partners.map((row) => ({\n                   name: row.fullName,\n                   age: row.age,\n                   pre: row.preTestCounseled,\n                   hiv: row.acceptHivTest,\n                   post: row.postTestCounseled,\n                   hbv: row.hbStatus,\n                   hcv: row.hbStatus,\n                   syphillis: row.syphillisStatus,\n                   referred: row.referredTo,\n                   actions:\n            \n                    <div>\n                        <Menu.Menu position='right'  >\n                        <Menu.Item >\n                            <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\n                            <Dropdown item text='Action'>\n\n                            <Dropdown.Menu style={{ marginTop:\"10px\", }}>\n                            <Dropdown.Item onClick={()=>LoadPage(row, 'view')}> <Icon name='eye' />View  </Dropdown.Item>\n                                <Dropdown.Item  onClick={()=>LoadPage(row, 'update')}><Icon name='edit' />Edit</Dropdown.Item>\n                                <Dropdown.Item  onClick={()=>LoadModal(row, 'delete')}> <Icon name='trash' /> Delete</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                            </Button>\n                        </Menu.Item>\n                        </Menu.Menu>\n                    </div>\n                  \n                  }))}\n            \n                        options={{\n                          headerStyle: {\n                              backgroundColor: \"#014d88\",\n                              color: \"#fff\",\n                          },\n                          searchFieldStyle: {\n                              width : '200%',\n                              margingLeft: '250px',\n                          },\n                          filtering: false,\n                          exportButton: false,\n                          searchFieldAlignment: 'left',\n                          pageSizeOptions:[10,20,100],\n                          pageSize:10,\n                          debounceInterval: 400\n                      }}\n            />\n         <Modal show={open} toggle={toggle} className=\"fade\" size=\"md\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered backdrop=\"static\">\n            <Modal.Header >\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n        </Modal.Title>\n        </Modal.Header>\n            <Modal.Body>\n                <h4>Are you Sure you want to delete - <b>{record && record.fullName}</b></h4>\n                \n            </Modal.Body>\n        <Modal.Footer>\n            <Button onClick={()=>LoadDeletePage(record)}  style={{backgroundColor:\"red\", color:\"#fff\"}} disabled={saving}>{saving===false ? \"Yes\": \"Deleting...\"}</Button>\n            <Button onClick={toggle} style={{backgroundColor:\"#014d88\", color:\"#fff\"}} disabled={saving}>No</Button>\n            \n        </Modal.Footer>\n        </Modal>    \n    </div>\n  );\n}\n\nexport default PatientnHistory;\n\n\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\History\\RecentHistory.js",["484","485","486"],"import React, { Fragment, useState, useEffect } from \"react\";\r\n// BS\r\nimport { Dropdown } from \"react-bootstrap\";\r\n/// Scroll\r\n//import { makeStyles } from '@material-ui/core/styles';\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n//import { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\n//import { Alert } from \"react-bootstrap\";\r\nimport { Card, Accordion } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Button } from \"semantic-ui-react\";\r\n\r\nconst RecentHistory = (props) => {\r\n  let history = useHistory();\r\n  const [recentActivities, setRecentActivities] = useState([]);\r\n  const [infants, setInfants] = useState([]);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [saving, setSaving] = useState(false);\r\n  // const [entryValueDisplay, setEntryValueDisplay] = useState({});\r\n\r\n  const [record, setRecord] = useState(null);\r\n  const toggle = () => setOpen(!open);\r\n  let notToBeUpdated = [\"pmtct_infant_information\"];\r\n  const [summartChart, setSummaryChart] = useState({\r\n    motherVisit: 0,\r\n    childVisit: 1,\r\n    childAlive: 0,\r\n    childDead: 0,\r\n  });\r\n  const [activeAccordionHeaderShadow, setActiveAccordionHeaderShadow] =\r\n    useState(0);\r\n\r\n\r\n  console.log(props);\r\n  useEffect(() => {\r\n    if (props?.allEntryPoint) {\r\n      // getPatientEntryType();\r\n    }\r\n    InfantInfo();\r\n    RecentActivities();\r\n    SummaryChart();\r\n  }, [props.patientObj.id]);\r\n  ///GET LIST OF Infants\r\n\r\n  const InfantInfo = () => {\r\n    if (props.patientObj.ancNo) {\r\n      axios\r\n        .get(\r\n          `${baseUrl}pmtct/anc/get-infant-by-ancno/${props.patientObj.ancNo}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          setInfants(response.data);\r\n        })\r\n\r\n        .catch((error) => {\r\n          //console.log(error);\r\n        });\r\n    } else {\r\n      axios\r\n        .get(\r\n          `${baseUrl}pmtct/anc/get-infant-by-mother-person-uuid/${\r\n            props.patientObj.person_uuid\r\n              ? props.patientObj.person_uuid\r\n              : props.patientObj.personUuid\r\n              ? props.patientObj.personUuid\r\n              : props.patientObj.uuid\r\n          }`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          setInfants(response.data);\r\n        })\r\n\r\n        .catch((error) => {\r\n          //console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const RecentActivities = () => {\r\n    // if patient has ANC No\r\n    // if (props.patientObj.ancNo) {\r\n    //   axios\r\n    //     .get(`${baseUrl}${props.patientObj.ancNo}`, {\r\n    //       headers: { Authorization: `Bearer ${token}` },\r\n    //     })\r\n    //     .then((response) => {\r\n    //       setRecentActivities(response.data);\r\n    //     })\r\n    //     .catch((error) => {\r\n    //     });\r\n    // } else {\r\n    axios\r\n      .get(\r\n        `${baseUrl}pmtct/anc/getAllActivities/${\r\n          props.patientObj.person_uuid\r\n            ? props.patientObj.person_uuid\r\n            : props.patientObj.personUuid\r\n        }`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setRecentActivities(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n    // }\r\n  };\r\n  const SummaryChart = () => {\r\n    // if patient has ANC No\r\n\r\n    if (props.patientObj.ancNo) {\r\n      axios\r\n        .get(\r\n          `${baseUrl}pmtct/anc/get-summary-chart/${props.patientObj.ancNo}`,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setSummaryChart(response.data);\r\n        })\r\n        .catch((error) => {\r\n          //console.log(error);\r\n        });\r\n    } else {\r\n      axios\r\n        .get(\r\n          `${baseUrl}pmtct/anc/get-pmtct-summary-chart/${\r\n            props.patientObj.person_uuid\r\n              ? props.patientObj.person_uuid\r\n              : props.patientObj.personUuid\r\n          }`,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setSummaryChart(response.data);\r\n        })\r\n        .catch((error) => {\r\n          //console.log(error);\r\n        });\r\n    }\r\n  };\r\n  const ActivityName = (name) => {\r\n    if (name === \"pmtct-enrollment\") {\r\n      return \"PE\";\r\n    } else if (name === \"anc-enrollment\") {\r\n      return \"AE\";\r\n    } else if (name === \"anc-delivery\") {\r\n      return \"AD\";\r\n    } else if (name === \"anc-mother-visit\") {\r\n      return \"MV\";\r\n    } else if (name === \"pmtct_infant_visit\") {\r\n      return \"IV\";\r\n    } else if (name === \"pmtct_infant_information\") {\r\n      return \"II\";\r\n    } else {\r\n      return \"RA\";\r\n    }\r\n  };\r\n\r\n  const LoadViewPage = (row, action) => {\r\n    if (row.path === \"anc-enrollment\") {\r\n      //props.setActiveContent({...props.activeContent, route:'anc-enrollment', id:row.id, actionType:action})\r\n      history.push({\r\n        pathname: \"/update-patient\",\r\n        state: {\r\n          id: row.recordId,\r\n          patientObj: props.patientObj,\r\n          actionType: action,\r\n          postValue: \"ANC\",\r\n          entrypointValue: props.entrypointValue,\r\n        },\r\n      });\r\n    } else if (row.path === \"anc-delivery\") {\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: \"labour-delivery\",\r\n        id: row.recordId,\r\n        actionType: action,\r\n      });\r\n    } else if (row.path === \"pmtct-enrollment\") {\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: \"anc-pnc\",\r\n        id: row.recordId,\r\n        activeTab: \"history\",\r\n        actionType: action,\r\n      });\r\n    } else if (row.path === \"anc-mother-visit\") {\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: \"consultation\",\r\n        id: row.recordId,\r\n        activeTab: \"home\",\r\n        actionType: action,\r\n      });\r\n    } else if (row.path === \"pmtct_infant_visit\") {\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: \"consultation\",\r\n        id: row.recordId,\r\n        activeTab: \"child\",\r\n        actionType: action,\r\n      });\r\n    } else if (row.path === \"pmtct_infant_information\") {\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: \"add-infant\",\r\n        id: row.recordId,\r\n        activeTab: \"home\",\r\n        actionType: action,\r\n      });\r\n    } else {\r\n    }\r\n  };\r\n  const LoadDeletePage = (row) => {\r\n    if (row.path === \"anc-enrollment\") {\r\n      setSaving(true);\r\n      //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}pmtct/anc/delete/anc/${row.recordId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities();\r\n          toggle();\r\n          setSaving(false);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else if (row.path === \"pmtct-enrollment\") {\r\n      setSaving(true);\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}pmtct/anc/delete/pmtct/${row.recordId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities();\r\n          toggle();\r\n          setSaving(false);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else if (row.path === \"anc-delivery\") {\r\n      setSaving(false);\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}pmtct/anc/delete/delivery/${row.recordId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities();\r\n          toggle();\r\n          setSaving(false);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else if (row.path === \"anc-mother-visit\") {\r\n      setSaving(true);\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}pmtct/anc/delete/delivery/${row.recordId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities();\r\n          toggle();\r\n          setSaving(false);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else if (row.path === \"pmtct_infant_visit\") {\r\n      setSaving(true);\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}pmtct/anc/delete/infantvisit/${row.recordId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities();\r\n          toggle();\r\n          setSaving(false);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else if (row.path === \"pmtct_infant_information\") {\r\n      setSaving(true);\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}pmtct/anc/delete/infantinfo/${row.recordId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities();\r\n          toggle();\r\n          setSaving(false);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else {\r\n    }\r\n  };\r\n  const LoadModal = (row) => {\r\n    toggle();\r\n    setRecord(row);\r\n  };\r\n  const index = 0;\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <Ext /> */}\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-4 col-xxl-4 col-lg-4\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header  border-0 pb-0\">\r\n              <h4 className=\"card-title\"> Recent Activities</h4>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <PerfectScrollbar\r\n                style={{ height: \"370px\" }}\r\n                id=\"DZ_W_Todo1\"\r\n                className=\"widget-media dz-scroll ps ps--active-y\"\r\n              >\r\n                <Accordion\r\n                  className=\"accordion accordion-header-bg accordion-header-shadow accordion-rounded \"\r\n                  defaultActiveKey=\"0\"\r\n                >\r\n                  <>\r\n                    {recentActivities &&\r\n                      recentActivities.map((data, i) => (\r\n                        <div className=\"accordion-item\" key={i}>\r\n                          <Accordion.Toggle\r\n                            as={Card.Text}\r\n                            eventKey={`${i}`}\r\n                            className={`accordion-header ${\r\n                              activeAccordionHeaderShadow === 1\r\n                                ? \"\"\r\n                                : \"collapsed\"\r\n                            } accordion-header-info`}\r\n                            onClick={() =>\r\n                              setActiveAccordionHeaderShadow(\r\n                                activeAccordionHeaderShadow === 1 ? -1 : i\r\n                              )\r\n                            }\r\n                          >\r\n                            <span className=\"accordion-header-icon\"></span>\r\n                            <span className=\"accordion-header-text\">\r\n                              Visit Date :{\" \"}\r\n                              <span className=\"\">{data.activityName}</span>{\" \"}\r\n                            </span>\r\n                            <span className=\"accordion-header-indicator\"></span>\r\n                          </Accordion.Toggle>\r\n                          <Accordion.Collapse\r\n                            eventKey={`${i}`}\r\n                            className=\"accordion__body\"\r\n                          >\r\n                            <div className=\"accordion-body-text\">\r\n                              <ul className=\"timeline\">\r\n                                <li>\r\n                                  <div className=\"timeline-panel\">\r\n                                    <div\r\n                                      className={\r\n                                        i % 2 == 0\r\n                                          ? \"media me-2 media-info\"\r\n                                          : \"media me-2 media-success\"\r\n                                      }\r\n                                    >\r\n                                      {ActivityName(data.path)}\r\n                                    </div>\r\n                                    <div className=\"media-body\">\r\n                                      <h5 className=\"mb-1\">\r\n                                        {data.activityName}\r\n                                      </h5>\r\n                                      <small className=\"d-block\">\r\n                                        {data.activityDate}\r\n                                      </small>\r\n                                    </div>\r\n                                    {!notToBeUpdated.includes(data.path) ? (\r\n                                      <Dropdown className=\"dropdown\">\r\n                                        <Dropdown.Toggle\r\n                                          variant=\" light\"\r\n                                          className=\"i-false p-0 btn-info sharp\"\r\n                                        >\r\n                                          <svg\r\n                                            width=\"18px\"\r\n                                            height=\"18px\"\r\n                                            viewBox=\"0 0 24 24\"\r\n                                            version=\"1.1\"\r\n                                          >\r\n                                            <g\r\n                                              stroke=\"none\"\r\n                                              strokeWidth=\"1\"\r\n                                              fill=\"none\"\r\n                                              fillRule=\"evenodd\"\r\n                                            >\r\n                                              <rect\r\n                                                x=\"0\"\r\n                                                y=\"0\"\r\n                                                width=\"24\"\r\n                                                height=\"24\"\r\n                                              />\r\n                                              <circle\r\n                                                fill=\"#000000\"\r\n                                                cx=\"5\"\r\n                                                cy=\"12\"\r\n                                                r=\"2\"\r\n                                              />\r\n                                              <circle\r\n                                                fill=\"#000000\"\r\n                                                cx=\"12\"\r\n                                                cy=\"12\"\r\n                                                r=\"2\"\r\n                                              />\r\n                                              <circle\r\n                                                fill=\"#000000\"\r\n                                                cx=\"19\"\r\n                                                cy=\"12\"\r\n                                                r=\"2\"\r\n                                              />\r\n                                            </g>\r\n                                          </svg>\r\n                                        </Dropdown.Toggle>\r\n                                        <Dropdown.Menu className=\"dropdown-menu\">\r\n                                          <Dropdown.Item\r\n                                            className=\"dropdown-item\"\r\n                                            onClick={() =>\r\n                                              LoadViewPage(data, \"view\")\r\n                                            }\r\n                                          >\r\n                                            View\r\n                                          </Dropdown.Item>\r\n                                          <Dropdown.Item\r\n                                            className=\"dropdown-item\"\r\n                                            onClick={() =>\r\n                                              LoadViewPage(data, \"update\")\r\n                                            }\r\n                                          >\r\n                                            Update\r\n                                          </Dropdown.Item>\r\n                                          <Dropdown.Item\r\n                                            className=\"dropdown-item\"\r\n                                            onClick={() =>\r\n                                              LoadModal(data, \"delete\")\r\n                                            }\r\n                                          >\r\n                                            Delete\r\n                                          </Dropdown.Item>\r\n                                        </Dropdown.Menu>\r\n                                      </Dropdown>\r\n                                    ) : (\r\n                                      \"\"\r\n                                    )}\r\n                                  </div>\r\n                                </li>\r\n                              </ul>\r\n                            </div>\r\n                          </Accordion.Collapse>\r\n                        </div>\r\n                      ))}\r\n                  </>\r\n                </Accordion>\r\n              </PerfectScrollbar>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {props.patientObj.dynamicHivStatus === \"Positive\" ||\r\n        props.patientObj.hivStatus === \"Positive\" ? (\r\n          <>\r\n            <div className=\"col-xl-8 col-xxl-8 col-lg-8\">\r\n              <div className=\"card\">\r\n                <div className=\"card-header border-0 pb-0\">\r\n                  <h4 className=\"card-title\">Patient Chart</h4>\r\n                </div>\r\n                <br />\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6 col-md-6 col-lg-6\">\r\n                    <div className=\"col-xl-12 col-xxl-12 col-sm-12\">\r\n                      <div className=\"card overflow-hidden\">\r\n                        <div className=\"social-graph-wrapper widget-facebook\">\r\n                          <span className=\"s-icon\">\r\n                            <span style={{ fontSize: \"16px\" }}>\r\n                              Total Clinic Visit\r\n                            </span>\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                          <div className=\"col-6 border-right\">\r\n                            <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                              <h4 className=\"m-1\">\r\n                                <span className=\"counter\">\r\n                                  <b>{summartChart.motherVisit}</b>\r\n                                </span>\r\n                              </h4>\r\n                              <p className=\"m-0\">\r\n                                <b>Mother Visit</b>\r\n                              </p>\r\n                            </div>\r\n                          </div>\r\n                          {infants.length > 0 && (\r\n                            <div className=\"col-6\">\r\n                              <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                                <h4 className=\"m-1\">\r\n                                  <span className=\"counter\">\r\n                                    <b>{summartChart.childVisit}</b>\r\n                                  </span>\r\n                                </h4>\r\n                                <p className=\"m-0\">\r\n                                  <b>Infant's Visit</b>\r\n                                </p>\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-xl-12 col-xxl-12 col-sm-12\">\r\n                      <div className=\"card overflow-hidden\">\r\n                        <div className=\"social-graph-wrapper widget-linkedin\">\r\n                          <span className=\"s-icon\">\r\n                            <span style={{ fontSize: \"16px\" }}>\r\n                              No. of Infants{\" \"}\r\n                              {infants.length > 0 ? \" : \" + infants.length : \"\"}\r\n                            </span>\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                          {infants.length > 0 ? (\r\n                            <>\r\n                              <div className=\"col-6 border-right\">\r\n                                <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                                  <h4 className=\"m-1\">\r\n                                    <span className=\"counter\">\r\n                                      {summartChart.childAlive}\r\n                                    </span>\r\n                                  </h4>\r\n                                  <p className=\"m-0\">\r\n                                    <b>Alive </b>\r\n                                  </p>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"col-6\">\r\n                                <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                                  <h4 className=\"m-1\">\r\n                                    <span className=\"counter\">\r\n                                      {summartChart.childDead}\r\n                                    </span>\r\n                                  </h4>\r\n                                  <p className=\"m-0\">\r\n                                    <b>Dead </b>\r\n                                  </p>\r\n                                </div>\r\n                              </div>\r\n                            </>\r\n                          ) : (\r\n                            <p>No Record</p>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-sm-6 col-md-6 col-lg-6\">\r\n                    <div className=\"card-body\">\r\n                      <h3>Current Infant's Details</h3>\r\n                      {infants.length > 0 ? (\r\n                        <PerfectScrollbar\r\n                          style={{ height: \"370px\" }}\r\n                          id=\"DZ_W_TimeLine1\"\r\n                          className=\"widget-timeline dz-scroll style-1 height370 ps ps--active-y\"\r\n                        >\r\n                          <ul className=\"timeline\">\r\n                            {infants.length > 0\r\n                              ? infants.map((obj) => (\r\n                                  <li key={index}>\r\n                                    <div\r\n                                      className={\r\n                                        index % 2 == 0\r\n                                          ? \"timeline-badge info\"\r\n                                          : \"timeline-badge success\"\r\n                                      }\r\n                                    ></div>\r\n                                    <span\r\n                                      className=\"timeline-panel text-muted\"\r\n                                      //onClick={()=>redirectLink()}\r\n                                      //to=\"\"\r\n                                    >\r\n                                      <h6 className=\"mb-0\">\r\n                                        Infant Given Name\r\n                                        <br />\r\n                                        {obj.firstName}\r\n                                      </h6>\r\n                                      <strong className=\"text-teal\">\r\n                                        Infant DOB\r\n                                        <br />\r\n                                        {obj.dateOfDelivery}\r\n                                      </strong>\r\n                                      <br />\r\n                                      <strong className=\"text-warning\">\r\n                                        Gender\r\n                                        <br />\r\n                                        {obj.sex}\r\n                                      </strong>\r\n                                    </span>\r\n                                  </li>\r\n                                ))\r\n                              : \"\"}\r\n                          </ul>\r\n                        </PerfectScrollbar>\r\n                      ) : (\r\n                        <p>No Record</p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {console.log(\r\n          props.patientObj.dynamicHivStatus === \"Unknown\",\r\n          props.patientObj.hivStatus === \"Unknown\"\r\n        )}\r\n        {/* props.patientObj.dynamicHivStatus === \"Unknown\" || */}\r\n        <>\r\n          <div className=\"col-sm-6 col-md-6 col-lg-6\">\r\n            <div className=\"card-body\">\r\n              {props.patientObj.hivStatus === \"Unknown\" ||\r\n              props.patientObj.staticHivStatus === \"Unknown\" ? (\r\n                <b>Patient has no HTS record. Please refer for testing...</b>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n          </div>\r\n        </>\r\n\r\n        <Modal\r\n          show={open}\r\n          toggle={toggle}\r\n          className=\"fade\"\r\n          size=\"md\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n          backdrop=\"static\"\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              Notification!\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <h4>\r\n              Are you Sure you want to delete{\" \"}\r\n              <b>{record && record.activityName}</b>\r\n            </h4>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => LoadDeletePage(record)}\r\n              style={{ backgroundColor: \"red\", color: \"#fff\" }}\r\n              disabled={saving}\r\n            >\r\n              {saving === false ? \"Yes\" : \"Deleting...\"}\r\n            </Button>\r\n            <Button\r\n              onClick={toggle}\r\n              style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n              disabled={saving}\r\n            >\r\n              No\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default RecentHistory;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js",["487","488"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import { makeStyles } from '@material-ui/core/styles'\r\nimport { useHistory } from \"react-router-dom\";\r\n//import {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst PatientnHistory = (props) => {\r\n  const [recentActivities, setRecentActivities] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  let history = useHistory();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [saving, setSaving] = useState(false);\r\n  const [record, setRecord] = useState(null);\r\n  const toggle = () => setOpen(!open);\r\n  let notToBeUpdated = [\"pmtct_infant_information\"];\r\n  useEffect(() => {\r\n    PatientHistory();\r\n  }, [props.patientObj.id]);\r\n  ///GET LIST OF Patients\r\n  const PatientHistory = () => {\r\n    setLoading(true);\r\n\r\n    // if (props.patientObj.ancNo) {\r\n    //   axios\r\n    //     .get(`${baseUrl}pmtct/anc/activities/${props.patientObj.ancNo}`, {\r\n    //       headers: { Authorization: `Bearer ${token}` },\r\n    //     })\r\n    //     .then((response) => {\r\n\r\n    //       setRecentActivities(response.data);\r\n    //     })\r\n\r\n    //     .catch((error) => {\r\n    //     });\r\n    // } else {\r\n    axios\r\n      .get(\r\n        `${baseUrl}pmtct/anc/getAllActivities/${\r\n          props.patientObj.person_uuid\r\n            ? props.patientObj.person_uuid\r\n            : props.patientObj.personUuid\r\n        }`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setLoading(false);\r\n        setRecentActivities(response.data);\r\n      })\r\n\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n    // }\r\n  };\r\n\r\n  const LoadViewPage = (row, action) => {\r\n    if (row.path === \"anc-enrollment\") {\r\n      //props.setActiveContent({...props.activeContent, route:'anc-enrollment', id:row.id, actionType:action})\r\n      history.push({\r\n        pathname: \"/update-patient\",\r\n        state: {\r\n          id: row.recordId,\r\n          patientObj: props.patientObj,\r\n          actionType: action,\r\n        },\r\n      });\r\n    } else if (row.path === \"anc-delivery\") {\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: \"labour-delivery\",\r\n        id: row.recordId,\r\n        actionType: action,\r\n      });\r\n    } else if (row.path === \"pmtct-enrollment\") {\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: \"anc-pnc\",\r\n        id: row.recordId,\r\n        activeTab: \"history\",\r\n        actionType: action,\r\n      });\r\n    } else if (row.path === \"anc-mother-visit\") {\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: \"consultation\",\r\n        id: row.recordId,\r\n        activeTab: \"home\",\r\n        actionType: action,\r\n      });\r\n    } else if (row.path === \"pmtct_infant_visit\") {\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: \"consultation\",\r\n        id: row.recordId,\r\n        activeTab: \"child\",\r\n        actionType: action,\r\n      });\r\n    } else if (row.path === \"pmtct_infant_information\") {\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: \"add-infant\",\r\n        id: row.recordId,\r\n        activeTab: \"home\",\r\n        actionType: action,\r\n      });\r\n    } else {\r\n    }\r\n  };\r\n  const LoadDeletePage = (row) => {\r\n    if (row.path === \"anc-enrollment\") {\r\n      setSaving(true);\r\n      //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}pmtct/anc/delete/anc/${row.recordId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          PatientHistory();\r\n          toggle();\r\n          setSaving(false);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else if (row.path === \"pmtct-enrollment\") {\r\n      setSaving(true);\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}pmtct/anc/delete/pmtct/${row.recordId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          PatientHistory();\r\n          toggle();\r\n          setSaving(false);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else if (row.path === \"anc-delivery\") {\r\n      setSaving(false);\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}pmtct/anc/delete/delivery/${row.recordId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          PatientHistory();\r\n          toggle();\r\n          setSaving(false);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else if (row.path === \"anc-mother-visit\") {\r\n      setSaving(true);\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}pmtct/anc/delete/delivery/${row.recordId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          PatientHistory();\r\n          toggle();\r\n          setSaving(false);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else if (row.path === \"pmtct_infant_visit\") {\r\n      setSaving(true);\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}pmtct/anc/delete/infantvisit/${row.recordId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          PatientHistory();\r\n          toggle();\r\n          setSaving(false);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else if (row.path === \"pmtct_infant_information\") {\r\n      setSaving(true);\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}pmtct/anc/delete/infantinfo/${row.recordId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          toast.success(\"Record Deleted Successfully\");\r\n          PatientHistory();\r\n          toggle();\r\n          setSaving(false);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else {\r\n    }\r\n  };\r\n  const LoadModal = (row) => {\r\n    toggle();\r\n    setRecord(row);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"Patient History \"\r\n        columns={[\r\n          { title: \"Description\", field: \"name\" },\r\n          {\r\n            title: \"Encounter Date\",\r\n            field: \"date\",\r\n          },\r\n          // { title: \"Status\", field: \"status\", filtering: false },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        isLoading={loading}\r\n        data={\r\n          recentActivities &&\r\n          recentActivities.map((row) => ({\r\n            name: row.activityName,\r\n            date: row.activityDate,\r\n            actions: !notToBeUpdated.includes(row.path) ? (\r\n              <div>\r\n                <Menu.Menu position=\"right\">\r\n                  <Menu.Item>\r\n                    <Button\r\n                      style={{ backgroundColor: \"rgb(153,46,98)\" }}\r\n                      primary\r\n                    >\r\n                      <Dropdown item text=\"Action\">\r\n                        <Dropdown.Menu style={{ marginTop: \"10px\" }}>\r\n                          {row.viewable && (\r\n                            <Dropdown.Item\r\n                              onClick={() => LoadViewPage(row, \"view\")}\r\n                            >\r\n                              {\" \"}\r\n                              <Icon name=\"eye\" />\r\n                              View{\" \"}\r\n                            </Dropdown.Item>\r\n                          )}\r\n                          {row.viewable && (\r\n                            <Dropdown.Item\r\n                              onClick={() => LoadViewPage(row, \"update\")}\r\n                            >\r\n                              <Icon name=\"edit\" />\r\n                              Edit\r\n                            </Dropdown.Item>\r\n                          )}\r\n                          <Dropdown.Item\r\n                            onClick={() => LoadModal(row, \"delete\")}\r\n                          >\r\n                            {\" \"}\r\n                            <Icon name=\"trash\" /> Delete\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </Button>\r\n                  </Menu.Item>\r\n                </Menu.Menu>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            ),\r\n          }))\r\n        }\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n      />\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        backdrop=\"static\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>\r\n            Are you Sure you want to delete{\" \"}\r\n            <b>{record && record.activityName}</b>\r\n          </h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={() => LoadDeletePage(record)}\r\n            style={{ backgroundColor: \"red\", color: \"#fff\" }}\r\n            disabled={saving}\r\n          >\r\n            {saving === false ? \"Yes\" : \"Deleting...\"}\r\n          </Button>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n            disabled={saving}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientnHistory;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Infants\\Index.js",["489","490"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token as token } from \"./../../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst InfantInformation = (props) => {\r\n  const [infants, setInfants] = useState([]);\r\n  const [delivery, setDelivery] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [aliveChild, setAliveChild] = useState(0);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [saving, setSaving] = useState(false);\r\n  const [record, setRecord] = useState(null);\r\n  const toggle = () => setOpen(!open);\r\n  useEffect(() => {\r\n    // if (props.patientObj.ancNo) {\r\n    //   InfantInfo();\r\n    //   console.log(\"it has anc \");\r\n    // } else {\r\n    InfantInfoByUuid();\r\n    //   console.log(\"it has  no anc \");\r\n    // }\r\n    DeliveryInfo();\r\n  }, []);\r\n  ///GET LIST OF Infants\r\n  const InfantInfo = () => {\r\n    setLoading(true);\r\n    axios\r\n      .get(\r\n        `${baseUrl}pmtct/anc/get-infant-by-ancno/${props.patientObj.ancNo}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setLoading(false);\r\n        setInfants(response.data);\r\n      })\r\n\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  const InfantInfoByUuid = () => {\r\n    setLoading(true);\r\n    axios\r\n      .get(\r\n        `${baseUrl}pmtct/anc/get-infant-by-mother-person-uuid/${\r\n          props.patientObj.person_uuid\r\n            ? props.patientObj.person_uuid\r\n            : props.patientObj.personUuid\r\n            ? props.patientObj.personUuid\r\n            : props.patientObj.uuid\r\n        }`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setLoading(false);\r\n        setInfants(response.data);\r\n      })\r\n\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  ///GET Delivery Object\r\n  const DeliveryInfo = () => {\r\n    setLoading(true);\r\n    if (props.patientObj.ancNo) {\r\n      axios\r\n        .get(`${baseUrl}pmtct/anc/view-delivery2/${props.patientObj.ancNo}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setLoading(false);\r\n          setDelivery(response.data.dateOfDelivery);\r\n          setAliveChild(\r\n            response.data && response.data.numberOfInfantsAlive\r\n              ? response.data.numberOfInfantsAlive\r\n              : 0\r\n          );\r\n        })\r\n\r\n        .catch((error) => {\r\n          //console.log(error);\r\n        });\r\n    } else {\r\n      axios\r\n        .get(\r\n          `${baseUrl}pmtct/anc/view-delivery-with-uuid/${\r\n            props.patientObj.person_uuid\r\n              ? props.patientObj.person_uuid\r\n              : props.patientObj.personUuid\r\n              ? props.patientObj.personUuid\r\n              : props.patientObj.uuid\r\n          }`,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setLoading(false);\r\n          setDelivery(response.data.dateOfDelivery);\r\n          setAliveChild(\r\n            response.data && response.data.numberOfInfantsAlive\r\n              ? response.data.numberOfInfantsAlive\r\n              : 0\r\n          );\r\n        })\r\n\r\n        .catch((error) => {\r\n          //console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const LoadPage = (obj, actionType) => {\r\n    props.setActiveContent({\r\n      ...props.activeContent,\r\n      route: \"add-infant\",\r\n      id: obj?.id,\r\n      actionType: actionType,\r\n      obj: obj,\r\n    });\r\n  };\r\n  const LoadDeletePage = (row) => {\r\n    setSaving(true);\r\n    //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\r\n    axios\r\n      .delete(`${baseUrl}pmtct/anc/delete/infantinfo/${row.id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        toast.success(\"Record Deleted Successfully\");\r\n        InfantInfo();\r\n        toggle();\r\n        setSaving(false);\r\n      })\r\n      .catch((error) => {\r\n        setSaving(false);\r\n        if (error.response && error.response.data) {\r\n          let errorMessage =\r\n            error.response.data.apierror &&\r\n            error.response.data.apierror.message !== \"\"\r\n              ? error.response.data.apierror.message\r\n              : \"Something went wrong, please try again\";\r\n          toast.error(errorMessage);\r\n        } else {\r\n          toast.error(\"Something went wrong. Please try again...\");\r\n        }\r\n      });\r\n  };\r\n  const LoadModal = (row) => {\r\n    toggle();\r\n    setRecord(row);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {infants.length < aliveChild &&\r\n        aliveChild > infants.length &&\r\n        props.patientObj.entryPoint !== \"POINT_ENTRY_PMTCT_POSTNATAL_WARD\" &&\r\n        props.patientObj.entryPoint !== \"621\" && (\r\n          <>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className=\" float-end  mr-2 mt-2\"\r\n              onClick={() => LoadPage(delivery, \"create\")}\r\n              style={{ backgroundColor: \"#014d88\" }}\r\n              startIcon={<FaUserPlus size=\"10\" />}\r\n            >\r\n              <span style={{ textTransform: \"capitalize\" }}>New Infant</span>\r\n            </Button>\r\n          </>\r\n        )}\r\n      {props.patientObj.entryPoint === \"POINT_ENTRY_PMTCT_POSTNATAL_WARD\" ||\r\n        (props.patientObj.entryPoint === \"621\" && (\r\n          <>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className=\" float-end  mr-2 mt-2\"\r\n              onClick={() => LoadPage(delivery, \"create\")}\r\n              style={{ backgroundColor: \"#014d88\" }}\r\n              startIcon={<FaUserPlus size=\"10\" />}\r\n            >\r\n              <span style={{ textTransform: \"capitalize\" }}>New Infant</span>\r\n            </Button>\r\n          </>\r\n        ))}\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"List of Infants \"\r\n        columns={[\r\n          { title: \"Infant Name\", field: \"name\" },\r\n          {\r\n            title: \"Hospital No.\",\r\n            field: \"hospital\",\r\n          },\r\n          { title: \"ANC NO.\", field: \"anc\" },\r\n          { title: \"Age\", field: \"nin\" },\r\n          { title: \"Date of Delivery\", field: \"date\" },\r\n          { title: \"Sex\", field: \"sex\", filtering: false },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        isLoading={loading}\r\n        data={infants.map((row) => ({\r\n          name: row.firstName + \" \" + row.surname,\r\n          hospital: row.hospitalNumber,\r\n          anc: row.ancNo,\r\n          nin:\r\n            row.nin !== \"0\" && row.nin !== \"1\"\r\n              ? row.nin + \" Months\"\r\n              : row.nin + \" Month\",\r\n          sex: row.sex,\r\n          date: row.dateOfDelivery,\r\n          actions: (\r\n            <div>\r\n              <Menu.Menu position=\"right\">\r\n                <Menu.Item>\r\n                  <Button style={{ backgroundColor: \"rgb(153,46,98)\" }} primary>\r\n                    <Dropdown item text=\"Action\">\r\n                      <Dropdown.Menu style={{ marginTop: \"10px\" }}>\r\n                        <Dropdown.Item onClick={() => LoadPage(row, \"view\")}>\r\n                          {\" \"}\r\n                          <Icon name=\"eye\" />\r\n                          View{\" \"}\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => LoadPage(row, \"update\")}>\r\n                          <Icon name=\"edit\" />\r\n                          Edit\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => LoadModal(row, \"delete\")}>\r\n                          {\" \"}\r\n                          <Icon name=\"trash\" /> Delete\r\n                        </Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Button>\r\n                </Menu.Item>\r\n              </Menu.Menu>\r\n            </div>\r\n          ),\r\n        }))}\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n      />\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        backdrop=\"static\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>\r\n            Are you Sure you want to delete -{\" \"}\r\n            <b>{record && record.firstName + \" \" + record.surname}</b>\r\n          </h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={() => LoadDeletePage(record)}\r\n            style={{ backgroundColor: \"red\", color: \"#fff\" }}\r\n            disabled={saving}\r\n          >\r\n            {saving === false ? \"Yes\" : \"Deleting...\"}\r\n          </Button>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n            disabled={saving}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfantInformation;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Partners\\AddNewPartner.js",["491","492","493","494"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardBody,\n  FormGroup,\n  Label,\n  Input,\n  InputGroup,\n} from \"reactstrap\";\nimport MatButton from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { url as baseUrl, token } from \"./../../../../api\";\n//import { useHistory } from \"react-router-dom\";\nimport \"react-summernote/dist/react-summernote.css\"; // import styles\nimport { Spinner } from \"reactstrap\";\nimport { Button } from \"semantic-ui-react\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    flexGrow: 1,\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst Labourpartner = (props) => {\n  const patientObj = props.patientObj;\n  //let history = useHistory();\n  const classes = useStyles();\n  const [saving, setSaving] = useState(false);\n  const [disabledField, setDisabledField] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [syphills, setSyphills] = useState([]);\n  const [referred, setReferred] = useState([]);\n  const [partnerHivStatus, setPartnerHivStatus] = useState(\"\");\n  const [partner, setpartner] = useState({\n    age: \"\",\n    dateOfBirth: \"\",\n    fullName: \"\",\n    hbStatus: \"\",\n    hcStatus: \"\",\n    postTestCounseled: \"\",\n    referredTo: \"\",\n    syphillsStatus: \"\",\n    referredToOthers: \"\",\n  });\n  useEffect(() => {\n    PARTNER_SYPHILIS_STATUS();\n    PARTNER_REFERRED_PMTCT();\n    if (props.activeContent && props.activeContent.id) {\n      setpartner(props.activeContent.obj);\n      setDisabledField(\n        props.activeContent.actionType === \"view\" ? true : false\n      );\n    }\n    if (props.patientObj.hivStatus) {\n      setPartnerHivStatus(props.patientObj.hivStatus);\n    } else if (props?.patientObj?.staticHivStatus) {\n      setPartnerHivStatus(props?.patientObj?.staticHivStatus);\n    } else if (props?.patientObj?.dynamicHivStatus) {\n      setPartnerHivStatus(props?.patientObj?.dynamicHivStatus);\n    }\n  }, [props.patientObj.id, props.activeContent]);\n  //Get list\n  const PARTNER_SYPHILIS_STATUS = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PARTNER_SYPHILIS_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setSyphills(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const PARTNER_REFERRED_PMTCT = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PARTNER_REFERRED_PMTCT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setReferred(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputChangepartnerDto = (e) => {\n    setErrors({ ...errors, [e.target.name]: \"\" });\n    setpartner({ ...partner, [e.target.name]: e.target.value });\n    if (e.target.name === \"referredTo\" && partner.referredTo !== \"OTHERS\") {\n      partner.referredToOthers = \"\";\n      setpartner({ ...partner, [\"referredToOthers\"]: \"\" });\n      setpartner({ ...partner, [e.target.name]: e.target.value });\n    }\n    setpartner({ ...partner, [e.target.name]: e.target.value });\n  };\n\n  //FORM VALIDATION\n  const validate = () => {\n    let temp = { ...errors };\n    temp.age = partner.age ? \"\" : \"This field is required\";\n    //temp.hbStatus = partner.hbStatus ? \"\" : \"This field is required\"\n    //temp.hcStatus = partner.hcStatus ? \"\" : \"This field is required\"\n    temp.postTestCounseled = partner.postTestCounseled\n      ? \"\"\n      : \"This field is required\";\n    temp.fullName = partner.fullName ? \"\" : \"This field is required\";\n    //temp.syphillisStatus = partner.syphillisStatus ? \"\" : \"This field is required\"\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  /**** Submit Button Processing  */\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      setSaving(true);\n      axios\n        .put(\n          `${baseUrl}pmtct/anc/update-partnerinformation-in-anc/${props.patientObj.id}`,\n          partner,\n          { headers: { Authorization: `Bearer ${token}` } }\n        )\n        .then((response) => {\n          setSaving(false);\n          //props.patientObj.commenced=true\n          toast.success(\"Record save successful\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n          props.setActiveContent({ ...props.activeContent, route: \"partners\" });\n        })\n        .catch((error) => {\n          setSaving(false);\n          toast.error(\"Something went wrong\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        });\n    } else {\n      toast.error(\"All field are required\", {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  };\n  const LoadPage = () => {\n    props.setActiveContent({\n      ...props.activeContent,\n      route: \"partners\",\n      id: \"\",\n      actionType: \"\",\n    });\n  };\n\n  return (\n    <div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className=\" float-end  mr-2 mt-2\"\n        onClick={() => LoadPage()}\n        style={{ backgroundColor: \"#014d88\" }}\n        //startIcon={<FaUserPlus size=\"10\"/>}\n      >\n        <span style={{ textTransform: \"capitalize\" }}> Back</span>\n      </Button>\n      <br />\n      <br />\n      <br />\n      <Card className={classes.root}>\n        <CardBody>\n          <form>\n            <div className=\"row\">\n              <h2>New Partner </h2>\n\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    ANC Number <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"ancNo\"\n                      id=\"ancNo\"\n                      onChange={handleInputChangepartnerDto}\n                      value={props.patientObj.ancNo}\n                      disabled\n                    />\n                  </InputGroup>\n                  {errors.ancNo !== \"\" ? (\n                    <span className={classes.error}>{errors.ancNo}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Partner HIV Status </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"partnerHivSTatus\"\n                      id=\"partnerHivSTatus\"\n                      //onChange={handleInputChangepartnerDto}\n                      value={partnerHivStatus}\n                      disabled\n                    />\n                    {console.log(\n                      props.patientObj.dynamicHivStatus,\n                      props?.patientObj?.staticHivStatus,\n                      props?.patientObj?.hivStatus\n                    )}\n                  </InputGroup>\n                  {errors.ancNo !== \"\" ? (\n                    <span className={classes.error}>{errors.ancNo}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Partner Full Name <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"fullName\"\n                      id=\"fullName\"\n                      onChange={handleInputChangepartnerDto}\n                      value={partner.fullName}\n                      disabled={disabledField}\n                    />\n                  </InputGroup>\n                  {errors.fullName !== \"\" ? (\n                    <span className={classes.error}>{errors.fullName}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Partner age <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"Number\"\n                      name=\"age\"\n                      id=\"age\"\n                      min={10}\n                      onChange={handleInputChangepartnerDto}\n                      value={partner.age}\n                      disabled={disabledField}\n                    />\n                  </InputGroup>\n                  {errors.ancNo !== \"\" ? (\n                    <span className={classes.error}>{errors.ancNo}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Pre-test Counseled <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"preTestCounseled\"\n                      id=\"preTestCounseled\"\n                      onChange={handleInputChangepartnerDto}\n                      value={partner.preTestCounseled}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </Input>\n                  </InputGroup>\n                  {errors.preTestCounseled !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.preTestCounseled}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Partner accepts HIV test</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"acceptHivTest\"\n                      id=\"acceptHivTest\"\n                      onChange={handleInputChangepartnerDto}\n                      value={partner.acceptHivTest}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </Input>\n                  </InputGroup>\n                  {errors.acceptHivTest !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.acceptHivTest}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Post-test counseled/ received test result</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"postTestCounseled\"\n                      id=\"postTestCounseled\"\n                      onChange={handleInputChangepartnerDto}\n                      value={partner.postTestCounseled}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </Input>\n                  </InputGroup>\n                  {errors.postTestCounseled !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.postTestCounseled}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>HBV status </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"hbStatus\"\n                      id=\"hbStatus\"\n                      onChange={handleInputChangepartnerDto}\n                      value={partner.hbStatus}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Positive\">Positive</option>\n                      <option value=\"Negative\">Negative</option>\n                    </Input>\n                  </InputGroup>\n                  {errors.hbStatus !== \"\" ? (\n                    <span className={classes.error}>{errors.hbStatus}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>HCV status </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"hcStatus\"\n                      id=\"hcStatus\"\n                      onChange={handleInputChangepartnerDto}\n                      value={partner.hcStatus}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Positive\">Positive</option>\n                      <option value=\"Negative\">Negative</option>\n                    </Input>\n                  </InputGroup>\n                  {errors.hcStatus !== \"\" ? (\n                    <span className={classes.error}>{errors.hcStatus}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Syphillis Status </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"syphillisStatus\"\n                      id=\"syphillisStatus\"\n                      onChange={handleInputChangepartnerDto}\n                      value={partner.syphillisStatus}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      {syphills.map((value) => (\n                        <option key={value.id} value={value.display}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </Input>\n                  </InputGroup>\n                  {errors.syphillisStatus !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.syphillisStatus}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Referred To</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"referredTo\"\n                      id=\"referredTo\"\n                      onChange={handleInputChangepartnerDto}\n                      value={partner.referredTo}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      {referred.map((value) => (\n                        <option key={value.id} value={value.display}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </Input>\n                  </InputGroup>\n                  {errors.referredTo !== \"\" ? (\n                    <span className={classes.error}>{errors.referredTo}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {partner.referredTo === \"OTHERS\" && (\n                <div className=\"form-group mb-3 col-md-6\">\n                  <FormGroup>\n                    <Label>Referred To Others (Please specify)</Label>\n                    <InputGroup>\n                      <Input\n                        type=\"text\"\n                        name=\"referredToOthers\"\n                        id=\"referredToOthers\"\n                        onChange={handleInputChangepartnerDto}\n                        value={partner.referredToOthers}\n                        disabled={disabledField}\n                      ></Input>\n                    </InputGroup>\n                  </FormGroup>\n                </div>\n              )}\n            </div>\n\n            {saving ? <Spinner /> : \"\"}\n            <br />\n            {props.activeContent &&\n            props.activeContent.actionType === \"update\" ? (\n              <>\n                <MatButton\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.button}\n                  disabled={saving}\n                  startIcon={<SaveIcon />}\n                  style={{ backgroundColor: \"#014d88\" }}\n                  onClick={handleSubmit}\n                >\n                  {!saving ? (\n                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\n                  ) : (\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      Updating\n                    </span>\n                  )}\n                </MatButton>\n              </>\n            ) : (\n              <>\n                <MatButton\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  hidden={disabledField}\n                  className={classes.button}\n                  disabled={saving}\n                  startIcon={<SaveIcon />}\n                  style={{ backgroundColor: \"#014d88\" }}\n                  onClick={handleSubmit}\n                >\n                  {!saving ? (\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                  ) : (\n                    <span style={{ textTransform: \"capitalize\" }}>Saving</span>\n                  )}\n                </MatButton>\n              </>\n            )}\n\n            <MatButton\n              variant=\"contained\"\n              className={classes.button}\n              startIcon={<CancelIcon />}\n              style={{ backgroundColor: \"#992E62\" }}\n              onClick={() => LoadPage()}\n            >\n              <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\n            </MatButton>\n          </form>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default Labourpartner;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Infants\\InfantRegistration.js",["495","496","497","498","499"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  InputGroup,\r\n} from \"reactstrap\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport axios from \"axios\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"./../../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"react-summernote/dist/react-summernote.css\"; // import styles\r\nimport { Spinner } from \"reactstrap\";\r\nimport moment from \"moment\";\r\nimport { NoStroller } from \"@mui/icons-material\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst LabourinfantInfo = (props) => {\r\n  const patientObj = props.patientObj;\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  const [saving, setSaving] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [disabledField, setDisabledField] = useState(false);\r\n  const [genders, setGenders] = useState([]);\r\n  const [newDateOfDelivery, setNewDateOfDelivery] = useState(\"\");\r\n\r\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\r\n  const [infantInfo, setInfantInfo] = useState({\r\n    ancNo: patientObj?.ancNo,\r\n    dateOfinfantInfo: \"\",\r\n    firstName: \"\",\r\n    middleName: \"\",\r\n    nin: \"\",\r\n    sex: \"\",\r\n    surname: \"\",\r\n    uuid: patientObj.ancUuid,\r\n    dateOfDelivery: \"\",\r\n    // hospitalNumber: patientObj?.hospitalNumber,\r\n    hospitalNumber: \"\",\r\n\r\n    personUuid: props.patientObj.person_uuid\r\n      ? props.patientObj.person_uuid\r\n      : props.patientObj.personUuid\r\n      ? props.patientObj.personUuid\r\n      : props.patientObj.uuid,\r\n  });\r\n\r\n  useEffect(() => {\r\n    SEX();\r\n    //console.log(props.activeContent.obj)\r\n    if (props.activeContent && props.activeContent.actionType === \"create\") {\r\n      infantInfo.dateOfDelivery = props.activeContent.obj;\r\n    }\r\n    if (props.activeContent && props.activeContent.id) {\r\n      setInfantInfo({ ...infantInfo, ...props.activeContent.obj });\r\n      setDisabledField(\r\n        props.activeContent.actionType === \"view\" ? true : false\r\n      );\r\n      //props.activeContent.obj.hospitalNumber2=props.activeContent.obj.hospitalNumber\r\n    }\r\n  }, [props.patientObj.id, props.activeContent.id]);\r\n\r\n  const SEX = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setGenders(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const handleInputChangeinfantInfoDto = (e) => {\r\n    setErrors({ ...errors, [e.target.name]: \"\" });\r\n    if (e.target.name === \"hospitalNumber\" && e.target.value !== \"\") {\r\n      async function getHosiptalNumber() {\r\n        const hosiptalNumber = e.target.value;\r\n        const response = await axios.post(\r\n          `${baseUrl}pmtct/anc/exist/infant-hospital-number`,\r\n          hosiptalNumber,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        );\r\n        if (response.data !== true) {\r\n          setHospitalNumStatus(false);\r\n          errors.hospitalNumber = \"\";\r\n        } else {\r\n          errors.hospitalNumber = \"\";\r\n          toast.error(\"Error! Hosiptal Number already exist\");\r\n          setHospitalNumStatus(true);\r\n        }\r\n      }\r\n      getHosiptalNumber();\r\n    }\r\n    setInfantInfo({ ...infantInfo, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  //FORM VALIDATION\r\n  const validate = () => {\r\n    let temp = { ...errors };\r\n    temp.firstName = infantInfo.firstName ? \"\" : \"This field is required\";\r\n    temp.surname = infantInfo.surname ? \"\" : \"This field is required\";\r\n    temp.hospitalNumber = infantInfo.hospitalNumber\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    //temp.dateOfinfantInfo = infantInfo.dateOfinfantInfo ? \"\" : \"This field is required\"\r\n    temp.sex = infantInfo.sex ? \"\" : \"This field is required\";\r\n    //temp.bookingStatus = infantInfo.bookingStatus ? \"\" : \"This field is required\"\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n  /**** Submit Button Processing  */\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      setSaving(true);\r\n      if (props.activeContent && props.activeContent.actionType === \"update\") {\r\n        axios\r\n          .put(\r\n            `${baseUrl}pmtct/anc/update-infant/${props.activeContent.id}`,\r\n            infantInfo,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          )\r\n          .then((response) => {\r\n            setSaving(false);\r\n            //props.patientObj.commenced=true\r\n            toast.success(\"Record save successful\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n            props.setActiveContent({\r\n              ...props.activeContent,\r\n              route: \"infants\",\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setSaving(false);\r\n            toast.error(\"Something went wrong\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          });\r\n      } else {\r\n        axios\r\n          .post(`${baseUrl}pmtct/anc/add-infants`, infantInfo, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          })\r\n          .then((response) => {\r\n            setSaving(false);\r\n            //props.patientObj.commenced=true\r\n            toast.success(\"Record save successful\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n            props.setActiveContent({\r\n              ...props.activeContent,\r\n              route: \"infants\",\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setSaving(false);\r\n            toast.error(\"Something went wrong\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          });\r\n      }\r\n    } else {\r\n      toast.error(\"All field are required\", {\r\n        position: toast.POSITION.BOTTOM_CENTER,\r\n      });\r\n    }\r\n  };\r\n\r\n  const LoadPage = () => {\r\n    props.setActiveContent({\r\n      ...props.activeContent,\r\n      route: \"infants\",\r\n      id: \"\",\r\n      actionType: \"\",\r\n    });\r\n  };\r\n\r\n  console.log(\"date Of Delivery\", patientObj);\r\n  console.log(\"date Of Delivery\", props.activeContent.obj);\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\" float-end  mr-2 mt-2\"\r\n        onClick={() => LoadPage()}\r\n        style={{ backgroundColor: \"#014d88\" }}\r\n        //startIcon={<FaUserPlus size=\"10\"/>}\r\n      >\r\n        <span style={{ textTransform: \"capitalize\" }}>Back</span>\r\n      </Button>\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <form>\r\n            <div className=\"row\">\r\n              <h2>New Infant Registration</h2>\r\n              <div className=\"row\">\r\n                {patientObj?.ancNo && (\r\n                  <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <Label>ANC Number</Label>\r\n                      <InputGroup>\r\n                        <Input\r\n                          type=\"text\"\r\n                          name=\"ancNo\"\r\n                          id=\"ancNo\"\r\n                          onChange={handleInputChangeinfantInfoDto}\r\n                          value={patientObj.ancNo}\r\n                          disabled\r\n                        />\r\n                      </InputGroup>\r\n                      {errors.ancNo !== \"\" ? (\r\n                        <span className={classes.error}>{errors.ancNo}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Hospital Number <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"hospitalNumber\"\r\n                        id=\"hospitalNumber\"\r\n                        onChange={handleInputChangeinfantInfoDto}\r\n                        value={infantInfo.hospitalNumber}\r\n                        // disabled={true}\r\n                      />\r\n                    </InputGroup>\r\n                    {errors.hospitalNumber !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.hospitalNumber}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    {hospitalNumStatus === true ? (\r\n                      <span className={classes.error}>\r\n                        {\"Hospital number already exist\"}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Date of Delivery <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <Input\r\n                        type=\"date\"\r\n                        disabled={true}\r\n                        name=\"dateOfDelivery\"\r\n                        id=\"dateOfDelivery\"\r\n                        onChange={handleInputChangeinfantInfoDto}\r\n                        min={props.patientObj.firstAncDate}\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        value={\r\n                          infantInfo.dateOfDelivery\r\n                            ? infantInfo.dateOfDelivery\r\n                            : newDateOfDelivery\r\n                        }\r\n                        // disabled={infantInfo.dateOfDelivery ? true : false}\r\n                      />\r\n                    </InputGroup>\r\n                    {errors.dateOfDelivery !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.dateOfDelivery}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Infant Given Name <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"firstName\"\r\n                        id=\"firstName\"\r\n                        onChange={handleInputChangeinfantInfoDto}\r\n                        value={infantInfo.firstName}\r\n                        disabled={disabledField}\r\n                      />\r\n                    </InputGroup>\r\n                    {errors.firstName !== \"\" ? (\r\n                      <span className={classes.error}>{errors.firstName}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>Infant Surname</Label>\r\n                    <InputGroup>\r\n                      <Input\r\n                        type=\"input\"\r\n                        name=\"surname\"\r\n                        id=\"surname\"\r\n                        onChange={handleInputChangeinfantInfoDto}\r\n                        value={infantInfo.surname}\r\n                        disabled={disabledField}\r\n                      ></Input>\r\n                    </InputGroup>\r\n                    {errors.surname !== \"\" ? (\r\n                      <span className={classes.error}>{errors.surname}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Sex <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <InputGroup>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"sex\"\r\n                        id=\"sex\"\r\n                        onChange={handleInputChangeinfantInfoDto}\r\n                        value={infantInfo.sex}\r\n                        disabled={disabledField}\r\n                      >\r\n                        <option value=\"\">Select </option>\r\n\r\n                        {genders.map((value) => (\r\n                          <option key={value.id} value={value.display}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </Input>\r\n                    </InputGroup>\r\n                    {errors.sex !== \"\" ? (\r\n                      <span className={classes.error}>{errors.sex}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                {/*  */}\r\n              </div>\r\n\r\n              {/* <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >National Identity  Number(NIN)</Label>\r\n                            <InputGroup> \r\n                                <Input \r\n                                    type=\"text\"\r\n                                    name=\"nin\"\r\n                                    id=\"nin\"\r\n                                    onChange={handleInputChangeinfantInfoDto}\r\n                                    value={infantInfo.nin} \r\n                                    disabled={disabledField}\r\n                                />\r\n\r\n                            </InputGroup>\r\n                            {errors.nin !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.nin}</span>\r\n                            ) : \"\" }\r\n                            </FormGroup>\r\n                    </div> */}\r\n            </div>\r\n\r\n            {saving ? <Spinner /> : \"\"}\r\n            <br />\r\n            {props.activeContent &&\r\n            props.activeContent.actionType === \"update\" ? (\r\n              <>\r\n                <MatButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  disabled={saving}\r\n                  startIcon={<SaveIcon />}\r\n                  style={{ backgroundColor: \"#014d88\" }}\r\n                  onClick={handleSubmit}\r\n                >\r\n                  {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                  ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>\r\n                      Updating\r\n                    </span>\r\n                  )}\r\n                </MatButton>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <MatButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  hidden={disabledField || hospitalNumStatus}\r\n                  className={classes.button}\r\n                  disabled={saving}\r\n                  startIcon={<SaveIcon />}\r\n                  style={{ backgroundColor: \"#014d88\" }}\r\n                  onClick={handleSubmit}\r\n                >\r\n                  {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                  ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving</span>\r\n                  )}\r\n                </MatButton>\r\n              </>\r\n            )}\r\n            <MatButton\r\n              variant=\"contained\"\r\n              className={classes.button}\r\n              startIcon={<CancelIcon />}\r\n              style={{ backgroundColor: \"#992E62\" }}\r\n              onClick={() => LoadPage()}\r\n            >\r\n              <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\r\n            </MatButton>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LabourinfantInfo;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Index.js",["500","501","502","503","504","505","506","507","508","509","510"],"import React, {useCallback, useEffect, useState} from \"react\";\nimport { Button} from 'semantic-ui-react'\nimport {Card, CardBody} from \"reactstrap\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\n\nimport 'react-phone-input-2/lib/style.css'\nimport { Icon, Menu, Sticky } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\nimport BasicInfo from './BasicInfo'\nimport PreTest from './PreTest'\nimport HivTestResult from './HivTestResult'\nimport IndexingContactTracing from './Elicitation/Index'\nimport Others from './Others'\nimport PostTest from './PostTest'\nimport RecencyTesting from './RecencyTesting'\nimport RiskStratification from './RiskStratification'\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    },  \n    success: {\n        color: \"#4BB543 \",\n        fontSize: \"11px\",\n    },\n}));\n\n\nconst PmtctHts = (props) => {\n    const classes = useStyles();\n    const history = useHistory();\n    const location = useLocation();\n    const locationState = location.state;\n    const [saving, setSaving] = useState(false);\n    const [activeItem, setactiveItem] = useState('hiv-test');\n    const [completed, setCompleted] = useState([]);\n    const [hideOtherMenu, setHideOtherMenu] = useState(true);\n    const [patientObj, setPatientObj] = useState({\n        breastFeeding: \"\",\n        capturedBy: \"\",\n        cd4: {},\n        clientCode: \"\",\n        riskStratificationCode:\"\",\n        confirmatoryTest: {},\n        dateVisit: \"\",\n        extra: {},\n        firstTimeVisit: \"\",\n        hepatitisTesting: {},\n        hivTestResult: \"\",\n        id: \"\",\n        indexClient: \"\",\n        indexClientCode: \"\",\n        indexElicitation: [\n          {\n            address: \"\",\n            altPhoneNumber: \"\",\n            archived: 0,\n            currentlyLiveWithPartner: true,\n            datePartnerCameForTesting: \"\",\n            dob: \"\",\n            extra: {},\n            facilityId: 0,\n            firstName: \"\",\n            hangOutSpots: \"\",\n            htsClient: {\n              archived: 0,\n              breastFeeding: 0,\n              capturedBy: \"\",\n              cd4: {},\n              clientCode: \"\",\n              confirmatoryTest: {},\n              dateVisit: \"\",\n              extra: {},\n              facilityId: 0,\n              firstTimeVisit: true,\n              hepatitisTesting: {},\n              hivTestResult: \"\",\n              id: 0,\n              indexClient: true,\n              indexClientCode: \"\",\n              indexNotificationServicesElicitation: {},\n              knowledgeAssessment: {},\n              numChildren: 0,\n              numWives: 0,\n              others: {},\n              person: {\n                active: \"\",\n                address: {},\n                archived: 0,\n                contact: {},\n                contactPoint: {},\n                createdDate: \"\",\n                dateOfBirth: \"\",\n                dateOfRegistration: \"\",\n                deceased: true,\n                deceasedDateTime: \"\",\n                education: {},\n                employmentStatus: {},\n                emrId: \"\",\n                facilityId: 0,\n                firstName: \"string\",\n                gender: {},\n                hospitalNumber: \"\",\n                id: \"\",\n                identifier: {},\n                isDateOfBirthEstimated: true,\n                lastModifiedDate: \"\",\n                maritalStatus: {},\n                new: true,\n                ninNumber: \"\",\n                organization: {},\n                otherName: \"\",\n                sex: \"\",\n                surname: \"\",\n                uuid: \"\"\n              },\n              personUuid: \"\",\n              postTestCounselingKnowledgeAssessment: {},\n              pregnant: \"\",\n              previouslyTested: true,\n              recency: {},\n              referredFrom: \"\",\n              relationWithIndexClient: \"\",\n              riskAssessment: {},\n              sexPartnerRiskAssessment: {},\n              stiScreening: {},\n              syphilisTesting: {},\n              targetGroup: 0,\n              tbScreening: {},\n              test1: {},\n              testingSetting: \"\",\n              tieBreakerTest: {},\n              typeCounseling: \"\",\n              uuid: \"\"\n            },\n            htsClientUuid: \"\",\n            id: \"\",\n            isDateOfBirthEstimated: true,\n            lastName: \"\",\n            middleName: \"\",\n            notificationMethod: \"\",\n            partnerTestedPositive: \"\",\n            phoneNumber: \"\",\n            physicalHurt: \"\",\n            relationshipToIndexClient: \"\",\n            sex: \"\",\n            sexuallyUncomfortable: \"\",\n            threatenToHurt: \"\",\n            uuid: \"\"\n          }\n        ],\n        indexNotificationServicesElicitation: {},\n        knowledgeAssessment: {},\n        numChildren: \"\",\n        numWives: \"\",\n        others: {},\n        personId: props.patientObj.personId,\n        personResponseDto: {\n          active: true,\n          \n        address: {\n            address: [\n              {\n                city: \"\",\n                line: [\n                  \"\"\n                ],\n                stateId: \"\",\n                district: \"\",\n                countryId: 1,\n                postalCode: \"\",\n                organisationUnitId: 0\n              }\n            ]\n          },\n          biometricStatus: true,\n          checkInDate: \"\",\n          contact: {},\n          contactPoint:{contactPoint:[\n            {\n                type: \"phone\",\n                value: \"\"\n            }\n            ]},\n          dateOfBirth: \"\",\n          dateOfRegistration: \"\",\n          deceased: true,\n          deceasedDateTime: \"\",\n          education: {},\n          employmentStatus: {},\n          emrId: \"\",\n          encounterDate: \"\",\n          facilityId: \"\",\n          firstName: \"\",\n          gender: {},\n          id: \"\",\n          identifier: {},\n          isDateOfBirthEstimated: true,\n          maritalStatus: {},\n          ninNumber: \"\",\n          organization: {},\n          otherName: \"\",\n          sex: \"\",\n          surname: \"\",\n          visitId: \"\"\n        },\n        postTestCounselingKnowledgeAssessment: {},\n        pregnant: \"\",\n        previouslyTested: \"\",\n        recency: {},\n        referredFrom: \"\",\n        relationWithIndexClient: \"\",\n        riskAssessment: {},\n        sexPartnerRiskAssessment: {},\n        stiScreening: {},\n        syphilisTesting: {},\n        targetGroup: \"\",\n        tbScreening: {},\n        test1: {},\n        test2: {},\n        testingSetting: \"\",\n        tieBreakerTest: {},\n        typeCounseling: \"\",\n        riskStratificationResponseDto:null\n        \n    });\n    const [extra, setExtra] = useState({\n    risk:\"\",\n    index:\"\",\n    pre:\"\",\n    post:\"\",\n    recency:\"\",\n    elicitation:\"\"\n});\n    const handleItemClick =(activeItem)=>{\n        setactiveItem(activeItem)\n        //setCompleted({...completed, ...completedMenu})\n    }\n    useEffect(() => { \n        // if(locationState && locationState.patientObj){\n        //     setPatientObj(locationState.patientObject)           \n        // }\n    }, []);\n\n\n    return (\n        <>\n            <ToastContainer autoClose={3000} hideProgressBar />\n           \n            <Card >\n                <CardBody>\n                <form >\n                    <div className=\"row\">\n                    <h3>PMTCT - HIV COUNSELLING AND TESTING \n                    </h3>\n                        <br/>\n                        <br/>\n                        \n                        <div className=\"col-md-3 col-sm-3 col-lg-3\">                       \n                        <Menu  size='large'  vertical  style={{backgroundColor:\"#014D88\"}}>\n                            <Menu.Item\n                                name='inbox'\n                                active={activeItem === 'hiv-test'}\n                                onClick={()=>handleItemClick('hiv-test')}\n                                style={{backgroundColor:activeItem === 'hiv-test' ? '#000': \"\"}}\n                                //disabled={activeItem !== 'hiv-test' ? true : false}\n                            >               \n                                <span style={{color:'#fff'}}>Request {\"&\"} Result Form\n                                {completed.includes('hiv-test') && (\n                                    <Icon name='check' color='green' />\n                                )}\n                                </span>\n                                \n                                {/* <Label color='teal'>3</Label> */}\n                            </Menu.Item>                            \n                            <Menu.Item\n                                name='spam'\n                                active={activeItem === 'recency-testing'}\n                                onClick={()=>handleItemClick('recency-testing')}\n                                style={{backgroundColor:activeItem === 'recency-testing' ? '#000': \"\"}}\n                                //disabled={activeItem !== 'recency-testing' ? true : false}\n                            >\n                            {/* <Label>4</Label> */}\n                            <span style={{color:'#fff'}}>HIV Recency Testing\n                                {completed.includes('recency-testing') && (\n                                    <Icon name='check' color='green' />\n                                )}\n                            </span>\n                           \n                            </Menu.Item>\n                            <Menu.Item\n                                name='spam'\n                                active={activeItem === 'indexing'}\n                                onClick={()=>handleItemClick('indexing')}\n                                style={{backgroundColor:activeItem === 'indexing' ? '#000': \"\"}}\n                                //disabled={activeItem !== 'indexing' ? true : false}\n                            >\n                            {/* <Label>4</Label> */}\n                            <span style={{color:'#fff'}}>Index Notification Services - Elicitation\n                            {completed.includes('indexing') && (\n                                <Icon name='check' color='green' />\n                            )}\n                            </span>\n                            \n                            </Menu.Item>\n                        </Menu>\n                        </div>\n                        \n                        <div className=\"col-md-9 col-sm-9 col-lg-9 \" style={{ backgroundColor:\"#fff\", margingLeft:\"-50px\", paddingLeft:\"-20px\"}}>\n                            {activeItem==='risk' && (<RiskStratification handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj}  setHideOtherMenu={setHideOtherMenu} patientAge={props.patientObj.age} setExtra={setExtra} extra={extra} activePage={props.activePage} setActivePage={props.setActivePage}/>)}\n                            {activeItem==='basic' && (<BasicInfo handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} clientCode={props.clientCode} patientAge={props.patientObj.age} setExtra={setExtra} extra={extra}/>)}\n                            {activeItem==='pre-test-counsel' && (<PreTest handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} clientCode={props.clientCode} patientAge={props.patientObj.age}/>)}\n                            {activeItem==='hiv-test' && (<HivTestResult handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} clientCode={props.clientCode} patientAge={props.patientObj.age}/>)}\n                            {activeItem==='post-test' && (<PostTest handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} clientCode={props.clientCode} patientAge={props.patientObj.age} patientsHistory={props.patients}/>)}\n                            {activeItem==='indexing' && (<IndexingContactTracing handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} clientCode={props.clientCode} patientAge={props.patientObj.age}/>)}\n                            {activeItem==='recency-testing' && (<RecencyTesting  handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} clientCode={props.clientCode} patientAge={props.patientObj.age}/>)}\n                            {activeItem==='others' && (<Others handleItemClick={handleItemClick} setCompleted={setCompleted} completed={completed} setPatientObj={setPatientObj} patientObj={patientObj} clientCode={props.clientCode} patientAge={props.patientObj.age}/>)}\n                            \n                        </div>                                   \n                    </div>\n\n                \n                    </form>\n                </CardBody>\n            </Card>                                 \n        </>\n    );\n};\n\nexport default PmtctHts","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PmtctServices\\PmtctEntryPoint\\index.js",["511","512","513","514","515","516","517","518","519","520","521"],"import Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { url as baseUrl, token } from \"../../../../api\";\r\nimport axios from \"axios\";\r\n\r\nimport React, { useState, Fragment, useEffect } from \"react\";\r\nconst PmtctEntryPoint = (props) => {\r\n  const [key, setKey] = useState(\"home\");\r\n  const [postPartumValue, setPostPartumValue] = useState(\"\");\r\n  const [entryPoint, setentryPoint] = useState([]);\r\n\r\n  const history = useHistory();\r\n\r\n  const POINT_ENTRY_PMTCT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PMTCT_ENTRY_POINT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setentryPoint(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setKey(\"home\");\r\n    console.log(props);\r\n    POINT_ENTRY_PMTCT();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"PMTCT-entryPoint\">\r\n      <Modal\r\n        {...props}\r\n        size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            PMTCT Entry Point{\" \"}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4> </h4>\r\n\r\n          <div\r\n            className=\" \"\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            {entryPoint.map((each, i) => {\r\n              if (each.display === \"ANC\") {\r\n                return (\r\n                  <Link\r\n                    to={{\r\n                      pathname: props.route,\r\n                      state: {\r\n                        showANC: true,\r\n                        postValue: each.display,\r\n                        entrypointValue: each.code,\r\n                        ...props.info,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      variant=\"primary\"\r\n                      color=\"primary\"\r\n                      className=\" mb-10 px-4\"\r\n                      style={{\r\n                        border: \"1px solid black\",\r\n                        color: \"white\",\r\n                        borderRadius: \"0\",\r\n                        width: \"120px\",\r\n                        height: \"35px\",\r\n                        backgroundColor: \"#007bb6\",\r\n                        borderRadius: \"3px\",\r\n                        border: \"none\",\r\n                        padding: \"0px\",\r\n                      }}\r\n                    >\r\n                      <span style={{ textTransform: \"capitalize\" }}>\r\n                        {each.display}\r\n                      </span>\r\n                    </Button>\r\n                  </Link>\r\n                );\r\n              } else if (each.display === \"L&D\") {\r\n                return (\r\n                  <Link\r\n                    to={{\r\n                      pathname: props.route,\r\n                      state: {\r\n                        showANC: false,\r\n                        postValue: each.display,\r\n                        entrypointValue: each.code,\r\n                        ...props.info,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      variant=\"primary\"\r\n                      color=\"primary\"\r\n                      className=\" mb-10 px-4\"\r\n                      style={{\r\n                        border: \"1px solid black\",\r\n                        color: \"white\",\r\n                        borderRadius: \"0\",\r\n                        width: \"120px\",\r\n                        margin: \"10px 20px \",\r\n                        height: \"35px\",\r\n                        backgroundColor: \"rgb(153, 46, 98)\",\r\n                        borderRadius: \"3px\",\r\n                        border: \"none\",\r\n                      }}\r\n                    >\r\n                      <span style={{ textTransform: \"capitalize\" }}>\r\n                        {each.display}\r\n                      </span>\r\n                    </Button>\r\n                  </Link>\r\n                );\r\n              } else if (each.display === \"Post-Partum\") {\r\n                return (\r\n                  <select\r\n                    style={{\r\n                      border: \"1px solid black\",\r\n                      color: \"white\",\r\n                      borderRadius: \"0\",\r\n                      width: \"120px\",\r\n                      height: \"35px\",\r\n                      padding: \"0px 5px\",\r\n                      backgroundColor: \"#21ba45\",\r\n                      borderRadius: \"3px\",\r\n                      border: \"none\",\r\n                    }}\r\n                    onChange={(e) => {\r\n                      setPostPartumValue(e.target.value);\r\n                      history.push({\r\n                        pathname: props.route,\r\n                        state: {\r\n                          showANC: false,\r\n                          postValue: each.display,\r\n                          subPostValue: e.target.value,\r\n                          entrypointValue: each.code,\r\n\r\n                          ...props.info,\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    <option defaultValue={\"\"}>{each.display}</option>\r\n\r\n                    <option value=\"≤ 72 hrs\">{\"≤  72 hrs\"}</option>\r\n                    <option value=\"> 72 hrs - < 6 month\">\r\n                      {\"> 72 hrs - < 6 month\"}\r\n                    </option>\r\n                    <option value=\"> 6 months - 12 months\">\r\n                      {\"> 6 months - 12 months\"}\r\n                    </option>\r\n                  </select>\r\n                );\r\n              }\r\n            })}\r\n            {/* <Link\r\n              to={{\r\n                pathname: props.route,\r\n                state: {\r\n                  showANC: true,\r\n                  postValue: \"ANC\",\r\n                  entrypointValue: \"619\",\r\n                  ...props.info,\r\n                },\r\n              }}\r\n            >\r\n              <Button\r\n                variant=\"primary\"\r\n                color=\"primary\"\r\n                className=\" mb-10 px-4\"\r\n                style={{\r\n                  border: \"1px solid black\",\r\n                  color: \"white\",\r\n                  borderRadius: \"0\",\r\n                  width: \"120px\",\r\n                  height: \"35px\",\r\n                  backgroundColor: \"#007bb6\",\r\n                  borderRadius: \"3px\",\r\n                  border: \"none\",\r\n                }}\r\n              >\r\n                <span style={{ textTransform: \"capitalize\" }}>ANC</span>\r\n              </Button>\r\n            </Link>\r\n\r\n            <Link\r\n              to={{\r\n                pathname: props.route,\r\n                state: {\r\n                  showANC: false,\r\n                  postValue: \"L&D\",\r\n                  entrypointValue: \"620\",\r\n                  ...props.info,\r\n                },\r\n              }}\r\n            >\r\n              <Button\r\n                variant=\"primary\"\r\n                color=\"primary\"\r\n                className=\" mb-10 px-4\"\r\n                style={{\r\n                  border: \"1px solid black\",\r\n                  color: \"white\",\r\n                  borderRadius: \"0\",\r\n                  width: \"120px\",\r\n                  margin: \"10px 20px \",\r\n                  height: \"35px\",\r\n                  backgroundColor: \"rgb(153, 46, 98)\",\r\n                  borderRadius: \"3px\",\r\n                  border: \"none\",\r\n                }}\r\n              >\r\n                <span style={{ textTransform: \"capitalize\" }}>L&D</span>\r\n              </Button>\r\n            </Link>\r\n\r\n            <select\r\n              style={{\r\n                border: \"1px solid black\",\r\n                color: \"white\",\r\n                borderRadius: \"0\",\r\n                width: \"120px\",\r\n                height: \"35px\",\r\n                padding: \"0px 5px\",\r\n                backgroundColor: \"#21ba45\",\r\n                borderRadius: \"3px\",\r\n                border: \"none\",\r\n              }}\r\n              onChange={(e) => {\r\n                setPostPartumValue(e.target.value);\r\n                history.push({\r\n                  pathname: props.route,\r\n                  state: {\r\n                    showANC: false,\r\n                    postValue: e.target.value,\r\n                    entrypointValue: \"621\",\r\n\r\n                    ...props.info,\r\n                  },\r\n                });\r\n              }}\r\n            >\r\n              <option defaultValue={\"\"}>Post Partum</option>\r\n\r\n              <option value=\"< 72 hrs\">{\"< 72 hrs\"}</option>\r\n              <option value=\"> 72 hrs - < 6 month\">\r\n                {\"> 72 hrs - < 6 month\"}\r\n              </option>\r\n              <option value=\"> 6 months - 12 months\">\r\n                {\"> 6 months - 12 months\"}\r\n              </option>\r\n            </select> */}\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className=\" float-end mb-10\"\r\n            style={{ backgroundColor: \"#014d88\", color: \"white\" }}\r\n            onClick={props.onHide}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PmtctEntryPoint;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\BasicInfo.js",["522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540"],"\nimport React, { useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport MatButton from \"@material-ui/core/Button\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\nimport * as moment from 'moment';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport {ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport { Button} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from 'react-phone-input-2'\nimport 'react-phone-input-2/lib/style.css'\nimport {  Modal } from \"react-bootstrap\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        }\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    },\n    success:{\n        color: 'green',\n        fontSize: '12.8px',\n        fontWeight:'bold'\n    }\n}));\n\n\nconst BasicInfo = (props) => {\n    console.log(props)\n    const classes = useStyles();\n    const history = useHistory();\n    const [errors, setErrors] = useState({});\n    const [saving, setSaving] = useState(false);\n    const [hideNumChild, setHideNumChild] = useState(false);\n    const [kP, setKP] = useState([]);\n    const [enrollSetting, setEnrollSetting] = useState([]);\n    const [sourceReferral, setSourceReferral] = useState([]);\n    const [gender, setGender] = useState([])\n    const [counselingType, setCounselingType] = useState([]);\n    const [pregnancyStatus, setPregnancyStatus] = useState([]);\n    const [indexTesting, setIndexTesting]= useState([]);\n    let temp = { ...errors }\n    const [clientCodeetail, setclientCodeetail]= useState(\"\");\n    const [clientCodeetail2, setclientCodeetail2]= useState(\"\");\n    const [clientCodeCheck, setClientCodeCheck]= useState(\"\");\n\n    const [objValues, setObjValues]= useState(\n        {\n            active: true,\n            personId: props.patientObj.personId,\n            clientCode: props.patientObj && props.patientObj.clientCode ? props.patientObj.clientCode :\"\",  \n            breastFeeding:props.patientObj && props.patientObj.breastFeeding ? props.patientObj.breastFeeding :\"\",\n            dateVisit: props.patientObj && props.patientObj.dateVisit ? props.patientObj.dateVisit :\"\",\n            firstTimeVisit: props.patientObj && props.patientObj.firstTimeVisit ? props.patientObj.firstTimeVisit :\"\",\n            indexClient: props.patientObj && props.patientObj.indexClient ? props.patientObj.indexClient :\"\",\n            numChildren: props.patientObj && props.patientObj.numChildren ? props.patientObj.numChildren :\"\",\n            numWives: props.patientObj && props.patientObj.numWives ? props.patientObj.numWives :\"\",\n            pregnant:props.patientObj && props.patientObj.pregnant ? props.patientObj.pregnant :\"\",           \n            previouslyTested: props.patientObj ? props.patientObj.previouslyTested :\"\",\n            referredFrom: props.patientObj ? props.patientObj.referredFrom :\"\",\n            riskAssessment:  props.patientObj && props.patientObj.riskAssessment? props.patientObj.riskAssessment : {},\n            riskStratificationCode:props.extra && props.extra.code!=='' ? props.extra.code : \"\",\n            targetGroup: props.patientObj && props.patientObj.targetGroup? props.patientObj.targetGroup :\"\",\n            testingSetting:props.patientObj ? props.patientObj.testingSetting :\"\",\n            typeCounseling: props.patientObj ? props.patientObj.typeCounseling :\"\",\n            relationshipWithIndexClient:props.patientObj ? props.patientObj.relationshipWithIndexClient :\"\",\n            indexClientCode:props.patientObj ? props.patientObj.indexClientCode :\"\",\n        }\n    )    \n    useEffect(() => { \n        KP(); \n        EnrollmentSetting(); \n        SourceReferral();\n        Genders();\n        CounselingType();\n        PregnancyStatus()\n        IndexTesting();\n    }, [ props.patientObj]);\n    //Get list of KP\n    const KP =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            setKP(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    //Get list of IndexTesting\n    const IndexTesting =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/INDEX_TESTING`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            setIndexTesting(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    //Get list of KP\n    const PregnancyStatus =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/PREGANACY_STATUS`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            setPregnancyStatus(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    \n    //Get list of KP\n    const CounselingType =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/COUNSELING_TYPE`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            setCounselingType(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    //Get list of HIV STATUS ENROLLMENT\n    const EnrollmentSetting =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/TEST_SETTING`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            //console.log(response.data);\n            setEnrollSetting(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n\n    //Get list of Source of Referral\n    const SourceReferral =()=>{\n            axios\n            .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                //console.log(response.data);\n                setSourceReferral(response.data);\n            })\n            .catch((error) => {\n            //console.log(error);\n            });        \n    }\n    //Get list of Genders from \n    const Genders =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/GENDER`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            //console.log(response.data);\n            setGender(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });        \n    }\n    const handleInputChange = e => { \n        setErrors({...temp, [e.target.name]:\"\"}) \n        if(e.target.name==='indexClientCode' && e.target.value!==''){\n            async function getIndexClientCode() {\n                const indexClientCode=e.target.value\n                const response = await axios.get(`${baseUrl}hts/client/${indexClientCode}`,\n                        { headers: {\"Authorization\" : `Bearer ${token}`, 'Content-Type': 'text/plain'} }\n                    );\n                if(response.data!=='Record Not Found'){\n                    setclientCodeetail2(\"\")\n                    setclientCodeetail(response.data)\n                    \n                }else{\n                    setclientCodeetail(\"\")\n                    setclientCodeetail2(response.data)\n                }\n            }\n            getIndexClientCode();\n        }         \n        setObjValues ({...objValues,  [e.target.name]: e.target.value});            \n    }\n\n    /*****  Validation  */\n    const validate = () => {\n        //HTS FORM VALIDATION\n        \n           temp.clientCode = objValues.clientCode ? \"\" : \"This field is required.\"\n            temp.typeCounseling = objValues.typeCounseling ? \"\" : \"This field is required.\"\n            temp.testingSetting = objValues.testingSetting ? \"\" : \"This field is required.\"\n            temp.targetGroup = objValues.targetGroup ? \"\" : \"This field is required.\"\n            temp.referredFrom = objValues.referredFrom ? \"\" : \"This field is required.\"\n            temp.previouslyTested = objValues.previouslyTested ? \"\" : \"This field is required.\" \n            temp.indexClient = objValues.indexClient ? \"\" : \"This field is required.\"  \n            temp.firstTimeVisit = objValues.firstTimeVisit ? \"\" : \"This field is required.\" \n            temp.dateVisit = objValues.dateVisit ? \"\" : \"This field is required.\"               \n                setErrors({ ...temp })\n        return Object.values(temp).every(x => x == \"\")\n    }\n    const handleItemClick =(page, completedMenu)=>{\n        props.handleItemClick(page)\n        if(props.completed.includes(completedMenu)) {\n\n        }else{\n            props.setCompleted([...props.completed, completedMenu])\n        }\n    }\n    //checkClientCode\n    const checkClientCode = e => { \n\n        async function getIndexClientCode() {\n            const indexClientCode=objValues.clientCode\n            const response = await axios.get(`${baseUrl}hts/client/${indexClientCode}`,\n                    { headers: {\"Authorization\" : `Bearer ${token}`, 'Content-Type': 'text/plain'} }\n                );\n            if(response.data!=='Record Not Found'){\n                setClientCodeCheck(\"Client code already exist\")\n            }else{\n                setClientCodeCheck(\"\")\n            }\n        }\n        getIndexClientCode();\n                          \n    }\n    const handleSubmit =(e)=>{\n        e.preventDefault();\n        const patientForm ={\n            clientCode: objValues.clientCode,\n            dateVisit: objValues.dateVisit,\n            extra: {},\n            firstTimeVisit: objValues.firstTimeVisit,\n            indexClient: objValues.indexClient,\n            numChildren: objValues.numChildren,\n            numWives: objValues.numWives,\n            personId: props.patientObj.personId,\n            hospitalNumber:objValues.clientCode,\n            previouslyTested: objValues.previouslyTested,\n            referredFrom: objValues.referredFrom,\n            targetGroup: objValues.targetGroup,\n            testingSetting: objValues.testingSetting,\n            typeCounseling:objValues.typeCounseling,\n            breastFeeding:objValues.breastFeeding,\n            pregnant:objValues.pregnant,\n            relationshipWithIndexClient:objValues.relationshipWithIndexClient,\n            riskStratificationCode:props.extra && props.extra.code!=='' ? props.extra.code : \"\",\n            }\n\n            if(validate()){\n            axios.post(`${baseUrl}hts`,patientForm,\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\n            \n            )\n            .then(response => {\n                setSaving(false);\n                props.setPatientObj(response.data)\n                //toast.success(\"HTS Test successful\");\n                if(props.patientAge>15){\n                    handleItemClick('pre-test-counsel', 'basic' )\n                }else{\n                    handleItemClick('hiv-test', 'baisc')\n                }\n\n            })\n            .catch(error => {\n                setSaving(false);\n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\n                }\n                else{\n                    toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\n                }\n            });\n            }else{\n                toast.error(\"All fields are required\",  {position: toast.POSITION.BOTTOM_CENTER});\n            }\n    }\n\n\n    return (\n        <>  \n        \n            <Card className={classes.root}>\n                <CardBody>   \n                <h2 style={{color:'#000'}}>CLIENT INTAKE FORM </h2>\n                <br/>\n                    <form >\n                        <div className=\"row\">\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Target Group *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"targetGroup\"\n                                        id=\"targetGroup\"\n                                        onChange={handleInputChange}\n                                        value={objValues.targetGroup}\n                                        disabled\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        {kP.map((value) => (\n                                            <option key={value.id} value={value.code}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                    </select>\n                                    {errors.targetGroup !==\"\" ? (\n                                        <span className={classes.error}>{errors.targetGroup}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Client Code *</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"clientCode\"\n                                    id=\"clientCode\"\n                                    value={objValues.clientCode}\n                                    onChange={handleInputChange}\n                                    //disabled={props.clientCode!==\"\" && props.clientCode!==null? true : false}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                />\n                                {errors.clientCode !==\"\" ? (\n                                    <span className={classes.error}>{errors.clientCode}</span>\n                                ) : \"\" }                                \n                                </FormGroup>\n                            </div>                           \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Referred From *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"referredFrom\"\n                                        id=\"referredFrom\"\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        {sourceReferral.map((value) => (\n                                            <option key={value.id} value={value.id}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                    </select>\n                                    {errors.referredFrom !==\"\" ? (\n                                        <span className={classes.error}>{errors.referredFrom}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Setting*</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"testingSetting\"\n                                        id=\"testingSetting\"\n                                        value={objValues.testingSetting}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        {enrollSetting.map((value) => (\n                                            <option key={value.id} value={value.code}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                    </select>\n                                    {errors.testingSetting !==\"\" ? (\n                                        <span className={classes.error}>{errors.testingSetting}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Visit Date  </Label>\n                                <Input\n                                    type=\"date\"\n                                    name=\"dateVisit\"\n                                    id=\"dateVisit\"\n                                    value={objValues.dateVisit}\n                                    onChange={handleInputChange}\n                                    min={objValues.dateOfRegistration}\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                    \n                                />\n                                {errors.dateVisit !==\"\" ? (\n                                    <span className={classes.error}>{errors.dateVisit}</span>\n                                ) : \"\" }\n                                </FormGroup>\n                            </div>\n\n                            {/* {(objValues.targetGroup!=='457' && objValues.targetGroup!==\"\") && (\n                            <div className=\"form-group  col-md-4\">\n                            <FormGroup>\n                                <Label>Gender</Label>\n                                <select\n                                    className=\"form-control\"\n                                    name=\"genderId\"\n                                    id=\"genderId\"\n                                    value={objValues.genderId}\n                                    onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                >\n                                    <option value={\"\"}></option>\n                                    {gender.map((value) => (\n                                        <option key={value.id} value={value.id}>\n                                            {value.display}\n                                        </option>\n                                    ))}\n                                </select>\n                               \n                            </FormGroup>\n                            </div>\n                            )} */}\n\n                            {(objValues.age>9 ) && (\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Number of Children {'<5'} years</Label>\n                                    <Input\n                                        type=\"number\"\n                                        name=\"numChildren\"\n                                        id=\"numChildren\"\n                                        min={0}\n                                        value={objValues.numChildren}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                    /> \n                                     \n                                </FormGroup>\n                            </div>\n                            )}\n                            {(objValues.age > 9 && objValues.sexId=='376') && (\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Number of wives/co-wives</Label>\n                                    <Input\n                                        type=\"number\"\n                                        name=\"numWives\"\n                                        id=\"numWives\"\n                                        min={0}\n                                        value={objValues.numWives}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                    />\n                                    \n                                </FormGroup>\n                            </div>\n                            )}\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Index Testing</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"indexClient\"\n                                        id=\"indexClient\"\n                                        value={objValues.indexClient}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">YES</option>\n                                        <option value=\"false\">NO</option>\n                                    </select>\n                                    {errors.indexClient !==\"\" ? (\n                                        <span className={classes.error}>{errors.indexClient}</span>\n                                    ) : \"\" }   \n                                </FormGroup>\n                            </div>\n                            {objValues.indexClient==='true' && (\n                            <>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Relationship of the index client</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"relationshipWithIndexClient\"\n                                        id=\"relationshipWithIndexClient\"\n                                        value={objValues.relationshipWithIndexClient}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        {indexTesting.map((value) => (\n                                            <option key={value.id} value={value.id}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                             <div className=\"form-group  col-md-4\">\n                             <FormGroup>\n                                 <Label>Index Client Code/ID</Label>\n                                 <Input\n                                     type=\"text\"\n                                     name=\"indexClientCode\"\n                                     id=\"indexClientCode\"\n                                     value={objValues.indexClientCode}\n                                     onBlur ={checkClientCode}\n                                     onChange={handleInputChange}\n                                     style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                \n                                 />\n                                 {clientCodeCheck!==\"\" ? (\n                                <span className={classes.error}>{clientCodeCheck}</span>\n                            ) : \"\" }  \n                             </FormGroup>\n                            </div>\n                            </>\n                            )}\n                            {objValues.sex==='377' && (\n                            <>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Pregnant</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"pregnant\"\n                                        id=\"pregnant\"\n                                        value={objValues.pregnant}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        {pregnancyStatus.map((value) => (\n                                            <option key={value.id} value={value.id}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Breast Feeding</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"breastFeeding\"\n                                        id=\"breastFeeding\"\n                                        value={objValues.breastFeeding}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">YES</option>\n                                        <option value=\"false\">NO</option>\n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            </>\n                            )}\n                           \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>First time visit</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"firstTimeVisit\"\n                                        id=\"firstTimeVisit\"\n                                        value={objValues.firstTimeVisit}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">YES</option>\n                                        <option value=\"false\">NO</option>\n                                        \n                                    </select>\n                                    {errors.firstTimeVisit !==\"\" ? (\n                                        <span className={classes.error}>{errors.firstTimeVisit}</span>\n                                    ) : \"\" }    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Previously tested within the last 3 months</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"previouslyTested\"\n                                        id=\"previouslyTested\"\n                                        value={objValues.previouslyTested}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">YES</option>\n                                        <option value=\"false\">NO</option>\n                                    </select>\n                                    {errors.previouslyTested !==\"\" ? (\n                                        <span className={classes.error}>{errors.previouslyTested}</span>\n                                    ) : \"\" }    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Type of Counseling</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"typeCounseling\"\n                                        id=\"typeCounseling\"\n                                        value={objValues.typeCounseling}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        {counselingType.map((value) => (\n                                            <option key={value.id} value={value.id}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                        \n                                    </select>\n                                    {errors.typeCounseling !==\"\" ? (\n                                        <span className={classes.error}>{errors.typeCounseling}</span>\n                                    ) : \"\" }   \n                                </FormGroup>\n                            </div>\n                            \n                            <br />\n                            <div className=\"row\">\n                            <div className=\"form-group mb-3 col-md-6\">\n\n                            <Button content='Save & Continue' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\n                            </div>\n                            </div>\n                        </div>\n                    </form>\n                </CardBody>\n            </Card>\n                                  \n        </>\n    );\n};\n\nexport default BasicInfo","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\PostTest.js",["541","542","543","544","545"],"import React, {useCallback, useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card} from \"@material-ui/core\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport { toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory, } from \"react-router-dom\";\nimport {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport {Label as LabelRibbon, Button, Message} from 'semantic-ui-react'\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        }\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst PostTest = (props) => {\n    const classes = useStyles();\n    const history = useHistory();\n    const patientID= props.patientObj && props.patientObj.personResponseDto ? props.patientObj.personResponseDto.id : \"\";\n    const clientId = props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n    const [saving, setSaving] = useState(false);\n    console.log(props.patientObj)\n    ///const [errors, setErrors] = useState({});\n    const [objValues, setObjValues]= useState(\n        {\n            htsClientId: clientId,\n            postTestCounselingKnowledgeAssessment: {},\n            personId: patientID,\n        }\n    )\n\n    const [postTest, setPostTest]= useState(\n        {\n            hivTestResult:\"\", \n            hivTestBefore:\"\", \n            hivRequestResult:\"\", \n            hivRequestResultCt:\"\",                             \n            clientReceivedHivTestResult:\"\", \n            postTestCounseling:\"\", \n            riskReduction:\"\", \n            postTestDisclosure:\"\",\n            bringPartnerHivtesting:\"\", \n            childrenHivtesting:\"\", \n            informationFp:\"\", \n            partnerFpThanCondom:\"\", \n            partnerFpUseCondom:\"\",\n            correctCondomUse:\"\", \n            condomProvidedToClient:\"\", \n            unprotectedSexRegularPartnerLastThreeMonth:\"\", \n            referredToServices:\"\",\n        }\n    )\n    useEffect(() => { \n        //console.log(props.patientObj)\n        if(props.patientObj && props.patientObj.postTestCounselingKnowledgeAssessment){\n            setPostTest(props.patientObj.postTestCounselingKnowledgeAssessment) \n        }else{\n            ///setPostTest(props.patientObj && props.patientObj.postTestCounselingKnowledgeAssessment!==null ? props.patientObj.postTestCounselingKnowledgeAssessment : {}) \n            if(postTest.hivTestResult===\"\" && props.patientObj.hivTestResult!==\"\" && props.patientObj.hivTestResult!==null && (props.patientObj.hivTestResult==='Positive' || props.patientObj.hivTestResult2==='Positive')){\n                postTest.hivTestResult='True'\n                setPostTest({...postTest, hivTestResult:'True' })\n            }else if(postTest.hivTestResult===\"\"  && props.patientObj.hivTestResult!==\"\" && props.patientObj.hivTestResult!==null && (props.patientObj.hivTestResult==='Negative' || props.patientObj.hivTestResult2==='Negative')){\n                postTest.hivTestResult='False'\n                setPostTest({...postTest, hivTestResult:'False' })\n            }\n        }\n    }, [props.patientObj,postTest.hivTestResult]);\n    const handleInputChangePostTest = e => { \n        //setErrors({...temp, [e.target.name]:\"\"})        \n        setPostTest ({...postTest,  [e.target.name]: e.target.value});           \n    }\n    const handleItemClick =(page, completedMenu)=>{\n        props.handleItemClick(page)\n        if(props.completed.includes(completedMenu)) {\n\n        }else{\n            props.setCompleted([...props.completed, completedMenu])\n        }\n    }\n    const handleSubmit =(e)=>{\n        e.preventDefault();\n        //handleItemClick('recency-testing', 'post-test')\n        if(!(Object.values(postTest).every(x => x === \"\"))){\n            objValues.htsClientId=  props.patientObj.id\n            objValues.postTestCounselingKnowledgeAssessment= postTest\n            objValues.personId= props.patientObj.personResponseDto.id\n            axios.put(`${baseUrl}hts/${ props.patientObj.id}/post-test-counseling`,objValues,\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\n            \n            )\n            .then(response => {\n                setSaving(false);\n                props.setPatientObj(response.data)\n                //toast.success(\"Risk Assesment successful\");\n                if(postTest.hivTestResult==='True'){\n                    handleItemClick('recency-testing', 'post-test')\n                }else if(postTest.hivTestResult==='False'){\n                    history.push('/');\n                }\n                \n\n            })\n            .catch(error => {\n                setSaving(false);\n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage);\n                }\n                else{\n                    toast.error(\"Something went wrong. Please try again...\");\n                }\n            });\n        }else{\n            toast.error(\"All post test fields are required\")  \n        \n        }\n            \n    }\n\n    console.log(postTest.hivTestResult)\n    return (\n        <>\n            <Card className={classes.root}>\n                <CardBody>\n               \n                <h2 >POST TEST COUNSELING</h2>\n                    <form >\n                        <div className=\"row\">\n                        <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\n                            {/* <h5 style={{color:'#fff'}}>Knowledge Assessment</h5> */}\n                        </LabelRibbon>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>HIV test result *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"hivTestResult\"\n                                        id=\"hivTestResult\"\n                                        value={postTest.hivTestResult}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"True\">Positive</option>\n                                        <option value=\"False\">Negative</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you been tested for HIV before within this year? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"hivTestBefore\"\n                                        id=\"hivTestBefore\"\n                                        value={postTest.hivTestBefore}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Not previously tested\">Not previously tested</option>\n                                        <option value=\"Previously tested negative\">Previously tested negative</option>\n                                        <option value=\"Previously tested positive in HIV care\">Previously tested positive in HIV care</option>\n                                        <option value=\"Previously tested positive not in HIV care\">Previously tested positive not in HIV care</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>HIV Request and Result form signed by tester *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"hivRequestResult\"\n                                        id=\"hivRequestResult\"\n                                        value={postTest.hivRequestResult}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>HIV Request and Result form filled with CT Intake Form *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"hivRequestResultCt\"\n                                        id=\"hivRequestResultCt\"\n                                        value={postTest.hivRequestResultCt}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Client received HIV test result *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"clientReceivedHivTestResult\"\n                                        id=\"clientReceivedHivTestResult\"\n                                        value={postTest.clientReceivedHivTestResult}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div> \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Post test counseling done *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"postTestCounseling\"\n                                        id=\"postTestCounseling\"\n                                        value={postTest.postTestCounseling}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Risk reduction plan developed *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"riskReduction\"\n                                        id=\"riskReduction\"\n                                        value={postTest.riskReduction}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Post test disclosure plan developed *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"postTestDisclosure\"\n                                        id=\"postTestDisclosure\"\n                                        value={postTest.postTestDisclosure}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>                            \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Will bring partner(s) for HIV testing *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"bringPartnerHivtesting\"\n                                        id=\"bringPartnerHivtesting\"\n                                        value={postTest.bringPartnerHivtesting}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Will bring own children {'<5'} years for HIV testing *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"childrenHivtesting\"\n                                        id=\"childrenHivtesting\"\n                                        value={postTest.childrenHivtesting}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Provided with information on FP and dual contraception *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"informationFp\"\n                                        id=\"informationFp\"\n                                        value={postTest.informationFp}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Client/Partner use FP methods (other than condom)*</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"partnerFpThanCondom\"\n                                        id=\"partnerFpThanCondom\"\n                                        value={postTest.partnerFpThanCondom}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Client/Partner use condoms as (one) FP method </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"partnerFpUseCondom\"\n                                        id=\"partnerFpUseCondom\"\n                                        value={postTest.partnerFpUseCondom}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Correct condom use demonstrated *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"correctCondomUse\"\n                                        id=\"correctCondomUse\"\n                                        value={postTest.correctCondomUse}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Condoms provided to client *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"condomProvidedToClient\"\n                                        id=\"condomProvidedToClient\"\n                                        value={postTest.condomProvidedToClient}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            {/* <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected sex with regular partner in the last 3months</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"unprotectedSexRegularPartnerLastThreeMonth\"\n                                        id=\"unprotectedSexRegularPartnerLastThreeMonth\"\n                                        value={postTest.unprotectedSexRegularPartnerLastThreeMonth}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div> */}\n                            {/* <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected sex with regular particular in the last 3 months</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"sex\"\n                                        id=\"sex\"\n                                        \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div> */}\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Client referred to other services *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"referredToServices\"\n                                        id=\"referredToServices\"\n                                        value={postTest.referredToServices}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <Message success>\n                                <h4>If client tests HIV negative, and HIV Risk Assessment Score {\">0\"} or\n                                    there is evidence for a STI syndrome, recommend re-testing after 3 months</h4>\n                                \n                            </Message>\n                                                \n                            {saving ? <Spinner /> : \"\"}\n                            <br />\n                            <div className=\"row\">\n                            <div className=\"form-group mb-3 col-md-12\">\n                                <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('hiv-test', 'hiv-test')}/>\n                                {postTest.hivTestResult==='True' && (\n                                    <Button content='Save & Continue' icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\n                                )}\n                                {postTest.hivTestResult==='False' && (\n                                    <Button content='Save & Finish' icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\n                                )}\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </CardBody>\n            </Card>                                 \n        </>\n    );\n};\n\nexport default PostTest","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\RiskStratification.js",["546","547","548","549","550","551"],"\nimport React, { useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\nimport * as moment from 'moment';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card,} from \"@material-ui/core\";\nimport { toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory, } from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport 'react-phone-input-2/lib/style.css'\nimport { Button} from 'semantic-ui-react'\nimport {  Modal } from \"react-bootstrap\";\nimport {Label as LabelRibbon, Message} from 'semantic-ui-react'\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        }\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    },\n    success:{\n        color: 'green',\n        fontSize: '12.8px',\n        fontWeight:'bold'\n    }\n}));\n\n\nconst RiskStratification = (props) => {\n    const classes = useStyles();\n    const history = useHistory();\n    console.log(props)\n    const [enrollSetting, setEnrollSetting] = useState([]);\n    let riskCountQuestion=[]\n    const [kP, setKP] = useState([]);\n    const [errors, setErrors] = useState({});\n    const [saving, setSaving] = useState(false);\n    let temp = { ...errors }\n    const [open, setOpen] = React.useState(false)\n    const toggle = () => setOpen(!open);\n    const [setting, setSetting] = useState([]);\n    const [riskCount, setRiskCount] = useState(0);\n    const [objValues, setObjValues]= useState(\n        {\n            age:props.patientAge,\n            dob:\"\",//props.patientObj.dateOfBirth && props.patientObj.dateOfBirth!==null ? props.patientObj.dateOfBirth :\"\",\n            visitDate: \"\",         \n            dateOfBirth: \"\",//props.patientObj.dateOfBirth && props.patientObj.dateOfBirth!==null ? props.patientObj.dateOfBirth :\"\",\n            dateOfRegistration: \"\",//props.patientObj.dateOfRegistration,\n            isDateOfBirthEstimated: \"\",//props.patientObj.isDateOfBirthEstimated,//\n            targetGroup:\"\",\n            testingSetting:\"\",//\n            modality  :\"\", //\n            code:\"\",\n            personId: props.patientObj.personId,\n            riskAssessment: {},\n            entryPoint:\"\"\n\n        }\n    )\n    const [riskAssessment, setRiskAssessment]= useState(\n        {\n            everHadSexualIntercourse:\"\",\n            bloodtransInlastThreeMonths:\"\",\n            uprotectedSexWithCasualLastThreeMonths:\"\",\n            uprotectedSexWithRegularPartnerLastThreeMonths:\"\", \n            unprotectedVaginalSex:\"\",  \n            uprotectedAnalSex:\"\",   \n            stiLastThreeMonths:\"\",\n            sexUnderInfluence :\"\",\n            moreThanOneSexPartnerLastThreeMonths:\"\",\n            experiencePain:\"\",\n            haveSexWithoutCondom:\"\",\n            abuseDrug:\"\",\n            bloodTransfusion:\"\",\n            consistentWeightFeverNightCough:\"\",\n            soldPaidVaginalSex:\"\",\n            //New Question\n            lastHivTestForceToHaveSex:\"\", \n            lastHivTestHadAnal:\"\",\n            lastHivTestInjectedDrugs:\"\",\n            whatWasTheResult:\"\",\n            lastHivTestDone:\"\",\n            diagnosedWithTb:\"\",\n            lastHivTestPainfulUrination:\"\",\n            lastHivTestBloodTransfusion:\"\",\n            lastHivTestVaginalOral:\"\",\n            lastHivTestBasedOnRequest:\"\"\n        }\n    )\n    useEffect(() => { \n        KP();\n        EnrollmentSetting();\n    }, [props.patientObj]);\n    //Get list of HIV STATUS ENROLLMENT\n    const EnrollmentSetting =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/TEST_SETTING`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            //console.log(response.data);\n            setEnrollSetting(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    //Get list of KP\n    const KP =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            setKP(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    const handleInputChange = e => { \n        setErrors({...temp, [e.target.name]:\"\"})\n        if(e.target.name==='testingSetting' && e.target.value!==\"\"){\n            SettingModality(e.target.value)\n            setObjValues ({...objValues,  [e.target.name]: e.target.value}); \n        }\n        if(e.target.name==='modality' && e.target.value!==\"\"){\n            //SettingModality(e.target.value)\n            if(e.target.value===\"TEST_SETTING_STANDALONE_HTS_PMTCT_(ANC1_ONLY)\"){\n                setRiskCount(1)\n                setObjValues ({...objValues,  [e.target.name]: e.target.value}); \n            }else if(e.target.value===\"TEST_SETTING_STANDALONE_HTS_EMERGENCY\"){\n                //setRiskCount(1)\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\n            }else if(e.target.value===\"TEST_SETTING_STANDALONE_HTS_INDEX\"){\n                setRiskCount(1)\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\n            }else if(e.target.value===\"TEST_SETTING_STANDALONE_HTS_PMTCT_(POST_ANC1:_PREGNANCYL&DBF)\"){\n                setRiskCount(1)\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\n            }else if(e.target.value===\"TEST_SETTING_STANDALONE_HTS_STI\"){\n                setRiskCount(1)\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\n            }else if(e.target.value===\"TEST_SETTING_STANDALONE_HTS_TB\"){\n                setRiskCount(1)\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\n            }else if(e.target.value===\"TEST_SETTING_CT_STI\"){\n                setRiskCount(1)\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\n            }else if(e.target.value===\"TEST_SETTING_CT_PMTCT\"){\n                setRiskCount(1)\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\n            }else if(e.target.value===\"TEST_SETTING_CT_TB\"){\n                setRiskCount(1)\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\n            }else if(e.target.value===\"TEST_SETTING_TB_TB\"){\n                setRiskCount(1)\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\n            }else if(e.target.value===\"TEST_SETTING_STI_STI\"){\n                setRiskCount(1)\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\n            }else if(e.target.value===\"TEST_SETTING_OPD_STI\"){\n                //setRiskCount(1)\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\n            }else if(e.target.value===\"TEST_SETTING_OUTREACH_INDEX\"){\n                setRiskCount(1)\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\n            }else{\n                setRiskCount(0)\n                setObjValues ({...objValues,  [e.target.name]: e.target.value});\n            }\n            \n        }\n        \n        setObjValues ({...objValues,  [e.target.name]: e.target.value});            \n    }\n    //Date of Birth and Age handle \n    //Get list of DSD Model Type\n    function SettingModality (settingId) {\n        const setting = settingId\n        axios\n           .get(`${baseUrl}application-codesets/v2/${setting}`,\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\n           )\n           .then((response) => {\n               setSetting(response.data);\n           })\n           .catch((error) => {\n           //console.log(error);\n           });\n       \n    }\n    //End of Date of Birth and Age handling \n    /*****  Validation  */\n    const validate = () => {\n        //HTS FORM VALIDATION\n            temp.dateVisit = objValues.visitDate ? \"\" : \"This field is required.\"  \n            temp.testingSetting = objValues.testingSetting ? \"\" : \"This field is required.\"\n            temp.modality = objValues.modality ? \"\" : \"This field is required.\"  \n            props.patientObj.age>15 && (temp.targetGroup = objValues.targetGroup ? \"\" : \"This field is required.\" )             \n            //targetGroup            \n                setErrors({ ...temp })\n        return Object.values(temp).every(x => x == \"\")\n    }\n    const handleItemClick =(page, completedMenu)=>{\n        props.handleItemClick(page)\n        if(props.completed.includes(completedMenu)) {\n\n        }else{\n            props.setCompleted([...props.completed, completedMenu])\n        }\n    }\n         // Getting the number count of riskAssessment True\n    const actualRiskCountTrue=Object.values(riskAssessment)\n    riskCountQuestion=actualRiskCountTrue.filter((x)=> x==='true')\n    const handleInputChangeRiskAssessment = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setRiskAssessment ({...riskAssessment,  [e.target.name]: e.target.value}); \n                            \n    }\n    const handleSubmit =(e)=>{\n        e.preventDefault();\n            //console.log(riskAssessment)\n            props.patientObj.targetGroup = objValues.targetGroup\n            props.patientObj.testingSetting = objValues.testingSetting\n            props.patientObj.dateVisit= objValues.visitDate\n            props.patientObj.riskAssessment =riskAssessment \n            \n            objValues.riskAssessment=riskAssessment\n            if((riskCount>0 || riskCountQuestion.length>0) && props.patientAge>15){\n                if(validate()){\n                    axios.post(`${baseUrl}risk-stratification`,objValues,\n                    { headers: {\"Authorization\" : `Bearer ${token}`}},\n                    \n                    )\n                    .then(response => {\n                        setSaving(false);\n                        objValues.code=response.data.code\n                        props.setExtra(objValues)\n                        handleItemClick('basic', 'risk' )\n                        props.setHideOtherMenu(false)\n                        //toast.success(\"Risk stratification save succesfully!\");\n                    })\n                    .catch(error => {\n                        setSaving(false);\n                        if(error.response && error.response.data){\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                            toast.error(errorMessage,  {position: toast.POSITION.BOTTOM_CENTER});\n                        }\n                        else{\n                            toast.error(\"Something went wrong. Please try again...\",  {position: toast.POSITION.BOTTOM_CENTER});\n                        }\n                    });\n                }else{\n                    toast.error(\"All fields are required\",  {position: toast.POSITION.BOTTOM_CENTER});\n                }  \n            }\n            // else{\n            //     if(validate()){\n            //         axios.post(`${baseUrl}risk-stratification`,objValues,\n            //         { headers: {\"Authorization\" : `Bearer ${token}`}},\n                    \n            //         )\n            //         .then(response => {\n            //             setSaving(false);\n            //             objValues.code=response.data.code\n            //             props.patientObj.riskStratificationResponseDto = response.data\n            //             props.setActivePage({...props.activePage, activePage:\"home\"})\n            //             //props.setExtra(objValues)\n            //             //handleItemClick('basic', 'risk' )\n            //             //props.setHideOtherMenu(false)\n            //             // history.push({\n            //             //     pathname: '/patient-history',\n            //             //     state: {patientObject: props.patientObj, patientObj: props.patientObj.personResponseDto, clientCode:props.patientObj.clientCode}\n            //             // });\n            //             toast.success(\"Risk stratification save succesfully!\",  {position: toast.POSITION.BOTTOM_CENTER});\n            //         })\n            //         .catch(error => {\n            //             console.log(error)\n            //             setSaving(false);\n            //             if(error.response && error.response.data){\n            //                 let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n            //                 toast.error(errorMessage,  {position: toast.POSITION.BOTTOM_CENTER});\n            //             }\n            //             else{\n            //                 toast.error(\"Something went wrong. Please try again...\",  {position: toast.POSITION.BOTTOM_CENTER});\n            //             }\n            //         });\n            //     }else{\n            //         toast.error(\"All fields are required\",  {position: toast.POSITION.BOTTOM_CENTER});\n            //     } \n            // }\n            if(props.patientAge<15){\n                if(validate()){\n                    axios.post(`${baseUrl}risk-stratification`,objValues,\n                    { headers: {\"Authorization\" : `Bearer ${token}`}},\n                    \n                    )\n                    .then(response => {\n                        setSaving(false);\n                        props.patientObj.riskStratificationResponseDto=response.data\n                        objValues.code=response.data.code\n                        props.setExtra(objValues)\n                        props.setHideOtherMenu(false)\n                        handleItemClick('basic', 'risk' )\n                        //toast.success(\"Risk stratification save succesfully!\");\n                    })\n                    .catch(error => {\n                        setSaving(false);\n                        if(error.response && error.response.data){\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                            toast.error(errorMessage,  {position: toast.POSITION.BOTTOM_CENTER});\n                        }\n                        else{\n                            toast.error(\"Something went wrong. Please try again...\");\n                        }\n                    });\n                }else{\n                    toast.error(\"All fields are required\",  {position: toast.POSITION.BOTTOM_CENTER});\n                }\n                \n            }else{\n                props.setExtra(objValues)\n                if(validate()){\n                    axios.post(`${baseUrl}risk-stratification`,objValues,\n                    { headers: {\"Authorization\" : `Bearer ${token}`}},\n                    \n                    )\n                    .then(response => {\n                        setSaving(false);\n                        props.patientObj.riskStratificationResponseDto=response.data\n                        objValues.code=response.data.code\n                        props.setExtra(objValues)\n                        //toast.success(\"Risk stratification save succesfully!\");\n                    })\n                    .catch(error => {\n                        setSaving(false);\n                        if(error.response && error.response.data){\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                            toast.error(errorMessage,  {position: toast.POSITION.BOTTOM_CENTER});\n                        }\n                        else{\n                            toast.error(\"Something went wrong. Please try again...\",  {position: toast.POSITION.BOTTOM_CENTER});\n                        }\n                    });\n                }else{\n                    toast.error(\"All fields are required\",  {position: toast.POSITION.BOTTOM_CENTER});\n                }\n            }\n            \n    }\n\n    return (\n        <>  \n        \n            <Card className={classes.root}>\n                <CardBody>   \n                <h2 style={{color:'#000'}}>RISK STRATIFICATION</h2>\n                <br/>\n                    <form >\n                        <div className=\"row\">\n                        <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#992E62', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >Modality</div>\n                            <div className=\"row\">\n                            <div className=\"form-group  col-md-6\">\n                                <FormGroup>\n                                    <Label>Entry Point </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"entryPoint\"\n                                        id=\"entryPoint\"\n                                        value={objValues.entryPoint}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}>Select</option>                                      \n                                        <option value=\"Facility\">Facility</option>\n                                        <option value=\"Community\">Community</option>\n                                    </select>\n                                    {errors.entryPoint !==\"\" ? (\n                                    <span className={classes.error}>{errors.entryPoint}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                <Label for=\"\">Visit Date * </Label>\n                                <Input\n                                    type=\"date\"\n                                    name=\"visitDate\"\n                                    id=\"visitDate\"\n                                    value={objValues.visitDate}\n                                    onChange={handleInputChange}\n                                    min=\"1983-12-31\"\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                    \n                                />\n                                {errors.dateVisit !==\"\" ? (\n                                    <span className={classes.error}>{errors.dateVisit}</span>\n                                ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-6\">\n                                <FormGroup>\n                                    <Label>Setting</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"testingSetting\"\n                                        id=\"testingSetting\"\n                                        value={objValues.testingSetting}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}>Select</option>\n                                        {enrollSetting.map((value) => (\n                                            <option key={value.id} value={value.code}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                        {/* <option value=\"TEST_SETTING_CT\">CT</option>\n                                        <option value=\"TEST_SETTING_TB\">TB</option>\n                                        <option value=\"TEST_SETTING_STI\">STI</option>\n                                        <option value=\"TEST_SETTING_OPD\">OPD</option>\n                                        <option value=\"TEST_SETTING_WARD\">WARD</option>\n                                        <option value=\"TEST_SETTING_STANDALONE_HTS\">STANDALONE HTS</option>\n                                        \n                                        <option value=\"TEST_SETTING_FP\">FP</option>\n                                        <option value=\"TEST_SETTING_OUTREACH\">OUTREACH</option>\n                                        <option value=\"TEST_SETTING_OTHERS\">OTHERS</option> */}\n\n                                    </select>\n                                    {errors.testingSetting !==\"\" ? (\n                                    <span className={classes.error}>{errors.testingSetting}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-6\">\n                                <FormGroup>\n                                    <Label>Modality</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"modality\"\n                                        id=\"modality\"\n                                        value={objValues.modality}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}>Select</option>\n                                        {setting.map((value) => (\n                                            <option key={value.code} value={value.code}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                        \n                                    </select>\n                                    {errors.modality !==\"\" ? (\n                                    <span className={classes.error}>{errors.modality}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            \n                            </div>\n                            <br/>\n                           \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Target Group *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"targetGroup\"\n                                        id=\"targetGroup\"\n                                        onChange={handleInputChange}\n                                        value={objValues.targetGroup}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        {kP.map((value) => (\n                                            <option key={value.id} value={value.code}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                    </select>\n                                    {errors.targetGroup !==\"\" ? (\n                                        <span className={classes.error}>{errors.targetGroup}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                           \n\n                            <br />\n                             \n                            {props.patientAge>15 && ( <>\n                            {/* {(objValues.targetGroup!==\"\" && objValues.targetGroup===\"TARGET_GROUP_GEN_POP\" )&& ( <>\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#992E62', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >HIV Risk Assessment  (Last 3 months)</div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Ever had sexual intercourse </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"everHadSexualIntercourse\"\n                                        id=\"everHadSexualIntercourse\"\n                                        value={riskAssessment.everHadSexualIntercourse}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.everHadSexualIntercourse !==\"\" ? (\n                                    <span className={classes.error}>{errors.everHadSexualIntercourse}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Blood transfusion in last 3 months *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"bloodtransInlastThreeMonths\"\n                                        id=\"bloodtransInlastThreeMonths\"\n                                        value={riskAssessment.bloodtransInlastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.bloodtransInlastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.bloodtransInlastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected sex with casual partner in last 3 months *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"uprotectedSexWithCasualLastThreeMonths\"\n                                        id=\"uprotectedSexWithCasualLastThreeMonths\"\n                                        value={riskAssessment.uprotectedSexWithCasualLastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.uprotectedSexWithCasualLastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.uprotectedSexWithCasualLastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected sex with regular partner in the last 3months</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\n                                        id=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\n                                        value={riskAssessment.uprotectedSexWithRegularPartnerLastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.uprotectedSexWithRegularPartnerLastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.uprotectedSexWithRegularPartnerLastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected vaginal sex</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"unprotectedVaginalSex\"\n                                        id=\"unprotectedVaginalSex\"\n                                        value={riskAssessment.unprotectedVaginalSex}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.unprotectedVaginalSex !==\"\" ? (\n                                    <span className={classes.error}>{errors.unprotectedVaginalSex}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected Anal sex</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"uprotectedAnalSex\"\n                                        id=\"uprotectedAnalSex\"\n                                        value={riskAssessment.uprotectedAnalSex}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.uprotectedAnalSex !==\"\" ? (\n                                    <span className={classes.error}>{errors.uprotectedAnalSex}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>         \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>STI in last 3 months *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"stiLastThreeMonths\"\n                                        id=\"stiLastThreeMonths\"\n                                        value={riskAssessment.stiLastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.stiLastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.stiLastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Sex under the influence of drugs or alcohol*</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"sexUnderInfluence\"\n                                        id=\"sexUnderInfluence\"\n                                        value={riskAssessment.sexUnderInfluence}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.sexUnderInfluence !==\"\" ? (\n                                    <span className={classes.error}>{errors.sexUnderInfluence}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>More than 1 sex partner during last 3 months*</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"moreThanOneSexPartnerLastThreeMonths\"\n                                        id=\"moreThanOneSexPartnerLastThreeMonths\"\n                                        value={riskAssessment.moreThanOneSexPartnerLastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.moreThanOneSexPartnerLastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.moreThanOneSexPartnerLastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                          \n                            <br/>\n                            </>)} */}\n                            {(objValues.targetGroup!==\"\" && objValues.targetGroup===\"TARGET_GROUP_GEN_POP\" ) && ( <>\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#992E62', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >HIV Risk Assessment  (Last 3 months)</div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Is this HIV test based on a Clinician/Doctor/Health Care Provider’s  request? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"lastHivTestBasedOnRequest\"\n                                        id=\"lastHivTestBasedOnRequest\"\n                                        value={riskAssessment.lastHivTestBasedOnRequest}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.lastHivTestBasedOnRequest !==\"\" ? (\n                                    <span className={classes.error}>{errors.lastHivTestBasedOnRequest}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>When was your last HIV test done?  *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"lastHivTestDone\"\n                                        id=\"lastHivTestDone\"\n                                        value={riskAssessment.lastHivTestDone}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.lastHivTestDone !==\"\" ? (\n                                    <span className={classes.error}>{errors.lastHivTestDone}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>What was the result? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"whatWasTheResult\"\n                                        id=\"whatWasTheResult\"\n                                        value={riskAssessment.whatWasTheResult}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.whatWasTheResult !==\"\" ? (\n                                    <span className={classes.error}>{errors.whatWasTheResult}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Since your last HIV test, have you had anal or vaginal or oral sex without a condom with someone who was HIV positive or unaware of their HIV status? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"lastHivTestVaginalOral\"\n                                        id=\"lastHivTestVaginalOral\"\n                                        value={riskAssessment.lastHivTestVaginalOral}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.lastHivTestVaginalOral !==\"\" ? (\n                                    <span className={classes.error}>{errors.lastHivTestVaginalOral}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Since your last HIV test, have you had a blood or blood product transfusion? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"lastHivTestBloodTransfusion\"\n                                        id=\"lastHivTestBloodTransfusion\"\n                                        value={riskAssessment.lastHivTestBloodTransfusion}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.lastHivTestBloodTransfusion !==\"\" ? (\n                                    <span className={classes.error}>{errors.lastHivTestBloodTransfusion}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>    \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Since your last HIV test, have you experienced painful urination, lower abdominal pain, vaginal or penile discharge, pain during sexual intercourse, thick, cloudy, or foul smelling discharge and/or small bumps or blisters near the mouth, penis, vagina, or anal areas? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"lastHivTestPainfulUrination\"\n                                        id=\"lastHivTestPainfulUrination\"\n                                        value={riskAssessment.lastHivTestPainfulUrination}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.lastHivTestPainfulUrination !==\"\" ? (\n                                    <span className={classes.error}>{errors.lastHivTestPainfulUrination}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>   \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you been diagnosed with TB or currently have any of the following symptoms : cough, fever, weight loss, night sweats? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"diagnosedWithTb\"\n                                        id=\"diagnosedWithTb\"\n                                        value={riskAssessment.diagnosedWithTb}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.diagnosedWithTb !==\"\" ? (\n                                    <span className={classes.error}>{errors.diagnosedWithTb}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Since your last HIV test, have you ever injected drugs, shared needles or other sharp objects with someone known to be HIV positive or who you didn’t know their HIV status? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"lastHivTestInjectedDrugs\"\n                                        id=\"sexUnderInfluence\"\n                                        value={riskAssessment.lastHivTestInjectedDrugs}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.lastHivTestInjectedDrugs !==\"\" ? (\n                                    <span className={classes.error}>{errors.lastHivTestInjectedDrugs}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Since your last HIV test, have you had anal, oral or vaginal sex in exchange for money or other benefits? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"lastHivTestHadAnal\"\n                                        id=\"lastHivTestHadAnal\"\n                                        value={riskAssessment.lastHivTestHadAnal}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.lastHivTestHadAnal !==\"\" ? (\n                                    <span className={classes.error}>{errors.lastHivTestHadAnal}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div> \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Since your last HIV test, have you been forced to have sex? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"lastHivTestForceToHaveSex\"\n                                        id=\"moreThanOneSexPartnerLastThreeMonths\"\n                                        value={riskAssessment.lastHivTestForceToHaveSex}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.lastHivTestForceToHaveSex !==\"\" ? (\n                                    <span className={classes.error}>{errors.lastHivTestForceToHaveSex}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <br/>\n                            </>)}\n                            {(objValues.targetGroup!==\"\" && objValues.targetGroup!==\"TARGET_GROUP_GEN_POP\" ) && ( <>\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#992E62', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >HIV Risk Assessment  (Last 3 months)</div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/your partner experienced lower abdominal pain, smelly discharge, blisters and wounds around you/partner vagina, penis anus or mouth?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"experiencePain\"\n                                        id=\"experiencePain\"\n                                        value={riskAssessment.experiencePain}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.experiencePain !==\"\" ? (\n                                    <span className={classes.error}>{errors.experiencePain}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/partner had sex without a condom with someone of unknown HIV status, or you/partner raped by person with unknown HIV status? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"haveSexWithoutCondom\"\n                                        id=\"haveSexWithoutCondom\"\n                                        value={riskAssessment.haveSexWithoutCondom}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.haveSexWithoutCondom !==\"\" ? (\n                                    <span className={classes.error}>{errors.haveSexWithoutCondom}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you had a condom burst with your partner during sexual intercourse?  *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"haveCondomBurst\"\n                                        id=\"haveCondomBurst\"\n                                        value={riskAssessment.haveCondomBurst}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.haveCondomBurst !==\"\" ? (\n                                    <span className={classes.error}>{errors.haveCondomBurst}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Do you/partner share needles/syringes, other sharp objects or used abuse drug substances of any kind?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"abuseDrug\"\n                                        id=\"abuseDrug\"\n                                        value={riskAssessment.abuseDrug}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.abuseDrug !==\"\" ? (\n                                    <span className={classes.error}>{errors.abuseDrug}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/partner had any blood or blood product transfusion?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"bloodTransfusion\"\n                                        id=\"bloodTransfusion\"\n                                        value={riskAssessment.bloodTransfusion}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.bloodTransfusion !==\"\" ? (\n                                    <span className={classes.error}>{errors.bloodTransfusion}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/partner experienced coughing, weight loss, fever, night sweats consistently?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"consistentWeightFeverNightCough\"\n                                        id=\"consistentWeightFeverNightCough\"\n                                        value={riskAssessment.consistentWeightFeverNightCough}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.consistentWeightFeverNightCough !==\"\" ? (\n                                    <span className={classes.error}>{errors.consistentWeightFeverNightCough}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>            \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/partner paid or sold vaginal, anal or oral sex? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"soldPaidVaginalSex\"\n                                        id=\"soldPaidVaginalSex\"\n                                        value={riskAssessment.soldPaidVaginalSex}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.soldPaidVaginalSex !==\"\" ? (\n                                    <span className={classes.error}>{errors.soldPaidVaginalSex}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                           \n                            <br/>\n                            </>)}\n                            </>)}\n                            <br/>\n                            <Message warning>\n                                <h4>Personal HIV Risk assessment score </h4>\n                                <b>Score :{riskCount + (props.patientAge>15 ?riskCountQuestion.length : 0)}</b>\n                            </Message>\n                            <hr/>\n                            <br/>\n                            <div className=\"row\">\n                            <div className=\"form-group mb-3 col-md-6\">\n                           \n                            <Button content='Save' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\n                            </div>\n                            </div>\n                        </div>\n                    </form>\n                    \n                </CardBody>\n            </Card> \n            <Modal show={open} toggle={toggle} className=\"fade\" size=\"sm\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered>\n             <Modal.Header >\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n                Notification!\n            </Modal.Title>\n            </Modal.Header>\n                <Modal.Body>\n                    <h4>Are you Sure of the Age entered?</h4>\n                    \n                </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={toggle} style={{backgroundColor:\"#014d88\", color:\"#fff\"}}>Yes</Button>\n            </Modal.Footer>\n            </Modal>                             \n        </>\n    );\n};\n\nexport default RiskStratification","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\RecencyTesting.js",["552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567"],"import React, {useCallback, useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\nimport * as moment from 'moment';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport { toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport 'react-phone-input-2/lib/style.css'\nimport {Label as LabelRibbon, Button} from 'semantic-ui-react'\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport {token, url as baseUrl } from \"../../../api\";\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        }\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\nconst Recency = (props) => {\n    const classes = useStyles();\n    const patientID= props.patientObj && props.patientObj.personResponseDto ? props.patientObj.personResponseDto.id : \"\";\n    const clientId = props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n    const [saving, setSaving] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [hivTestDate, setHivTestDate] = useState(\"\");\n    let temp = { ...errors }\n    const handleItemClick =(page, completedMenu)=>{\n        props.handleItemClick(page)\n        if(props.completed.includes(completedMenu)) {\n        }else{\n            props.setCompleted([...props.completed, completedMenu])\n        }\n    }\n\n    const [objValues, setObjValues]= useState(\n        {\n            htsClientId: clientId,\n            recency: {},\n            personId: patientID,\n        }\n    )\n    const [recency, setRecency]= useState(\n        {\n            optOutRTRI:\"\", \n            optOutRTRITestName:\"\", \n            optOutRTRITestDate:\"\", \n            rencencyId:\"\",  \n            controlLine:\"\",  \n            verififcationLine:\"\", \n            longTermLine:\"\",  \n            rencencyInterpretation:\"\", \n            hasViralLoad:\"\", \n            sampleCollectedDate:\"\",\n            sampleReferanceNumber:\"\",\n            dateSampleSentToPCRLab:\"\",\n            sampleTestDate:\"\",\n            sampleType:\"\", \n            receivingPcrLab:\"\", \n            viralLoadResultClassification:\"\",\n            recencyResult:\"\", \n            finalRecencyResult:\"\",\n        }\n    )\n    \n    useEffect(() => { \n        if(props.patientObj){\n            setRecency(props.patientObj && props.patientObj.recency!==null ? props.patientObj.recency : {})\n            if(props.patientObj.confirmatoryTest && props.patientObj.confirmatoryTest.date!=='' ){\n                setHivTestDate(props.patientObj.confirmatoryTest.date)\n            }else if(props.patientObj.confirmatoryTest2 && props.patientObj.confirmatoryTest2.date2!=='' ){\n                setHivTestDate(props.patientObj.confirmatoryTest2.date2)\n            }else{\n                setHivTestDate(\"\")\n            }\n        }\n        if(recency.longTermLine==='true' && recency.verififcationLine==='true' && recency.controlLine==='true'){\n            recency.rencencyInterpretation=\"Long Term\"\n            setRecency ({...recency,  ['rencencyInterpretation']: 'Long Term'}); \n        \n        }else if(recency.longTermLine==='false' && recency.verififcationLine==='true' && recency.controlLine==='true'){\n            recency.rencencyInterpretation=\"Recent\"\n            setRecency ({...recency,  ['rencencyInterpretation']: 'Recent'});\n            //setRecency ({...recency,  ['hasViralLoad']: 'true'});\n            \n        }else if(recency.longTermLine==='false' && recency.verififcationLine==='false' && recency.controlLine==='true'){\n            recency.rencencyInterpretation=\"Negative\"\n            setRecency ({...recency,  ['rencencyInterpretation']: 'Negative'});\n            \n        }else if(recency.longTermLine==='true' && recency.verififcationLine==='true' && recency.controlLine==='false'){\n            recency.rencencyInterpretation=\"Invalid\"\n            setRecency ({...recency,  ['rencencyInterpretation']: 'Invalid'});\n           \n        }else if(recency.longTermLine==='true' && recency.verififcationLine==='false' && recency.controlLine==='true'){\n            recency.rencencyInterpretation=\"Invalid\"\n            setRecency ({...recency,  ['rencencyInterpretation']: 'Invalid'});\n            \n        }else{\n            \n            setRecency ({...recency,  ['rencencyInterpretation']: ''});\n        }\n    },[recency.longTermLine,recency.verififcationLine, recency.controlLine, props.patientObj]);\n    console.log(props.patientObj)\n    const handleInputChangeRecency = e => { \n        setErrors({...temp, [e.target.name]:\"\"})        \n        if(e.target.name ==='viralLoadResultClassification'){\n             \n            if(e.target.value ==='>=1000'){\n                recency.finalRecencyResult='RITA Recent'\n                setRecency ({...recency,  [e.target.name]: e.target.value}); \n            \n            }else if(e.target.value ==='<1000') {\n                recency.finalRecencyResult='RITA Long term'\n                setRecency ({...recency,  [e.target.name]: e.target.value}); \n            }else if(e.target.value ==='Failed run') {\n                recency.finalRecencyResult='RITA Inconclusive'\n                setRecency ({...recency,  [e.target.name]: e.target.value}); \n            }else if(e.target.value ==='Invalid viral load result') {\n                recency.finalRecencyResult='RITA Inconclusive'\n                setRecency ({...recency,  [e.target.name]: e.target.value}); \n            }else{\n                setRecency ({...recency,  [e.target.name]: e.target.value}); \n            }\n        }else if(e.target.name==='rencencyId' && e.target.value!==''){\n            const recencyIdNumberValue = checkRecencyLimit(e.target.value)\n            setRecency ({...recency,  [e.target.name]: recencyIdNumberValue});\n        }else {\n            setRecency ({...recency,  [e.target.name]: e.target.value}); \n        }\n         \n    }\n    const checkRecencyLimit=(e)=>{\n        const limit = 10;        \n        const acceptedNumber= e.slice(0, limit)\n        return  acceptedNumber   \n    }\n    /*****  Validation  */\n    const validate = () => {\n        //HTS FORM VALIDATION\n            {recency.sampleCollectedDate!=='' && (temp.sampleReferanceNumber = recency.sampleReferanceNumber ? \"\" : \"This field is required.\")}\n            {  recency.sampleCollectedDate!=='' && (temp.dateSampleSentToPCRLab = recency.dateSampleSentToPCRLab ? \"\" : \"This field is required.\")}\n            { recency.sampleCollectedDate!=='' && (temp.sampleType = recency.sampleType ? \"\" : \"This field is required.\")}\n            setErrors({ ...temp })\n        return Object.values(temp).every(x => x == \"\")\n    }\n    const handleSubmit =(e)=>{\n        e.preventDefault();\n       \n\n            objValues.htsClientId= clientId\n            objValues.recency= recency\n            objValues.personId= patientID\n            console.log(recency)\n            axios.put(`${baseUrl}hts/${clientId}/recency`,objValues,\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\n            \n            )\n            .then(response => {\n                setSaving(false);\n                props.setPatientObj(response.data)\n                //toast.success(\"Risk Assesment successful\");\n                handleItemClick('indexing', 'recency-testing' )\n\n            })\n            .catch(error => {\n                setSaving(false);\n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage);\n                }\n                else{\n                    toast.error(\"Something went wrong. Please try again...\");\n                }\n            });\n        \n            \n    }\n\n\n\n    return (\n        <>\n            <Card className={classes.root}>\n                <CardBody>               \n                <h2>RECENCY FORM</h2>\n                    <form >\n                        <div className=\"row\">\n                        <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\n                            <h5 style={{color:'#fff'}}>RENCENCY</h5>\n                        </LabelRibbon>\n                        <br/><br/><br/>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Opt Out of RTRI?*</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"optOutRTRI\"\n                                        id=\"optOutRTRI\"\n                                        value={recency.optOutRTRI}\n                                        onChange={handleInputChangeRecency}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-8\"></div>\n                            {recency.optOutRTRI==='false' && (\n                            <>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Test Name *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"optOutRTRITestName\"\n                                        id=\"optOutRTRITestName\"\n                                        value={recency.optOutRTRITestName}\n                                        onChange={handleInputChangeRecency}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Asante\">Asante</option>\n                                        <option value=\"Others\">Others</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Test Date *</Label>\n                                    <Input\n                                        type=\"date\"\n                                        name=\"optOutRTRITestDate\"\n                                        id=\"optOutRTRITestDate\"\n                                        value={recency.optOutRTRITestDate}\n                                        onChange={handleInputChangeRecency}\n                                        min={hivTestDate!==\"\" && hivTestDate!==null ? hivTestDate :\"\"}\n                                        max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                    \n                                    />\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Recency ID *</Label>\n                                    <Input\n                                        className=\"form-control\"\n                                        name=\"rencencyId\"\n                                        id=\"rencencyId\"\n                                        type=\"text\"\n                                        value={recency.rencencyId}\n                                        onChange={handleInputChangeRecency}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    />\n                                 \n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Control Line *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"controlLine\"\n                                        id=\"controlLine\"\n                                        value={recency.controlLine}\n                                        onChange={handleInputChangeRecency}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div> \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Verification Line *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"verififcationLine\"\n                                        id=\"verififcationLine\"\n                                        value={recency.verififcationLine}\n                                        onChange={handleInputChangeRecency}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Long Term Line *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"longTermLine\"\n                                        id=\"longTermLine\"\n                                        value={recency.longTermLine}\n                                        onChange={handleInputChangeRecency}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Recency Interpretation *</Label>\n                                    <Input\n                                        className=\"form-control\"\n                                        name=\"rencencyInterpretation\"\n                                        id=\"rencencyInterpretation\"\n                                        type=\"text\"\n                                        value={recency.rencencyInterpretation}\n                                        disabled\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    />\n                                       \n                                    \n                                </FormGroup>\n                            </div>\n                            {recency.rencencyInterpretation==='Recent' && (\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Has viral load request been made? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"hasViralLoad\"\n                                        id=\"hasViralLoad\"\n                                        value={recency.hasViralLoad}\n                                        onChange={handleInputChangeRecency}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            )}\n                            {recency.hasViralLoad==='true' && (\n                            <>\n                                <div className=\"row\">\n                                    <h4>Viral Load Classification :</h4>\n                                    <br/>\n                                <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label>Sample Collected Date</Label>\n                                        <Input\n                                            className=\"form-control\"\n                                            name=\"sampleCollectedDate\"\n                                            id=\"sampleCollectedDate\"\n                                            type=\"date\"\n                                            value={recency.sampleCollectedDate}\n                                            min={recency.optOutRTRITestDate}\n                                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                            onChange={handleInputChangeRecency}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        />\n                                    \n                                    </FormGroup>\n                                </div>\n                                <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label>Sample Refernce Number</Label>\n                                        <Input\n                                            className=\"form-control\"\n                                            name=\"sampleReferanceNumber\"\n                                            id=\"sampleReferanceNumber\"\n                                            type=\"text\"\n                                            value={recency.sampleReferanceNumber}\n                                            onChange={handleInputChangeRecency}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        />\n                                        {errors.sampleReferanceNumber !==\"\" ? (\n                                        <span className={classes.error}>{errors.sampleReferanceNumber}</span>\n                                        ) : \"\" }\n                                    </FormGroup>\n                                </div>\n                                <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label>Sample Type</Label>\n                                        <select\n                                            className=\"form-control\"\n                                            name=\"sampleType\"\n                                            id=\"sampleType\"\n                                            value={recency.sampleType}\n                                            onChange={handleInputChangeRecency}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        >\n                                            <option value={\"\"}></option>\n                                            <option value=\"DBS\">DBS</option>\n                                            <option value=\"Plasma\">Plasma</option>\n                                            \n                                        </select>\n                                        {errors.sampleType !==\"\" ? (\n                                        <span className={classes.error}>{errors.sampleType}</span>\n                                        ) : \"\" }\n                                    </FormGroup>\n                                </div>\n                                <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label>Date Sample Sent to PCR Lab</Label>\n                                        <Input\n                                            className=\"form-control\"\n                                            name=\"dateSampleSentToPCRLab\"\n                                            id=\"dateSampleSentToPCRLab\"\n                                            type=\"date\"\n                                            min={recency.optOutRTRITestDate}\n                                            value={recency.dateSampleSentToPCRLab}\n                                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                            onChange={handleInputChangeRecency}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        />\n                                         {errors.dateSampleSentToPCRLab !==\"\" ? (\n                                        <span className={classes.error}>{errors.dateSampleSentToPCRLab}</span>\n                                        ) : \"\" }\n                                    </FormGroup>\n                                </div>\n                                <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label>Sample Test Date</Label>\n                                        <Input\n                                            className=\"form-control\"\n                                            name=\"sampleTestDate\"\n                                            id=\"sampleTestDate\"\n                                            type=\"date\"\n                                            min={recency.optOutRTRITestDate}\n                                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                            value={recency.sampleTestDate}\n                                            onChange={handleInputChangeRecency}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        />\n                                        \n                                    </FormGroup>\n                                </div>\n                                <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label>Receiving PCR Lab</Label>\n                                        <Input\n                                            className=\"form-control\"\n                                            name=\"receivingPcrLab\"\n                                            id=\"receivingPcrLab\"\n                                            type=\"text\"\n                                            value={recency.receivingPcrLab}\n                                            onChange={handleInputChangeRecency}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        />\n                                        \n                                    </FormGroup>\n                                </div>\n                                <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label>Viral Load Result Classification and Result (copies/ml)</Label>\n                                        <select\n                                            className=\"form-control\"\n                                            name=\"viralLoadResultClassification\"\n                                            id=\"viralLoadResultClassification\"\n                                            value={recency.viralLoadResultClassification}\n                                            onChange={handleInputChangeRecency}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        >\n                                            <option value={\"\"}>Select</option>\n                                            <option value=\">=1000\">{\">= \"} 1000</option>\n                                            <option value=\"<1000\">{\"< \"} 1000</option>\n                                            <option value=\"Failed run\">Failed run</option>\n                                            <option value=\"Invalid viral load result\">Invalid viral load result</option>\n                                            \n                                        </select>\n                                        \n                                    </FormGroup>\n                                </div>\n                                {/* <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label>Result (copies/ml)</Label>\n                                        <Input\n                                            className=\"form-control\"\n                                            name=\"recencyResult\"\n                                            id=\"recencyResult\"\n                                            type=\"text\"\n                                            value={recency.recencyResult}\n                                            onChange={handleInputChangeRecency}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        />\n                                        \n                                    </FormGroup>\n                                </div> */}\n                                <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label>Final Recency Result</Label>\n                                        <Input\n                                            className=\"form-control\"\n                                            name=\"finalRecencyResult\"\n                                            id=\"finalRecencyResult\"\n                                            type=\"text\"\n                                            disabled\n                                            value={recency.finalRecencyResult}\n                                            onChange={handleInputChangeRecency}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        />\n\n                                    </FormGroup>\n                                </div>\n                                </div>\n                            </>\n                            )}\n                            </>)}\n                                                      \n                            {saving ? <Spinner /> : \"\"}\n                            <br />\n                            <div className=\"row\">\n                            <div className=\"form-group mb-3 col-md-12\">\n                            <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('post-test','post-test')}/>\n                            <Button content='Save & Continue' icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\n                            </div>\n                            </div>\n                        </div>\n                    </form>\n                </CardBody>\n            </Card>                                 \n        </>\n    );\n};\n\nexport default Recency","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Others.js",["568","569","570","571","572","573","574","575","576","577"],"import React, {useCallback, useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport MatButton from \"@material-ui/core/Button\";\nimport Button from \"@material-ui/core/Button\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\nimport * as moment from 'moment';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\n// import {ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\n// import {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport {Label as LabelRibbon} from 'semantic-ui-react'\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        }\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst BasicInfo = (props) => {\n    const classes = useStyles();\n    const [saving, setSaving] = useState(false);\n    const [errors, setErrors] = useState({});\n    const handleItemClick =(page, completedMenu)=>{\n        props.handleItemClick(page)\n        if(props.completed.includes(completedMenu)) {\n\n        }else{\n            props.setCompleted([...props.completed, completedMenu])\n        }\n    }\n\n    return (\n        <>\n            <Card className={classes.root}>\n                <CardBody>\n               \n                <h3 >OTHERS - (Resquest {\"& \"} Result Form)</h3>\n               <hr/>\n                <br/>\n                    <form >\n                        <div className=\"row\">\n                        <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\n                            <h5 style={{color:'#fff'}}>Syphilis Testing</h5>\n                        </LabelRibbon>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Syphilis test result *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"syphilisTestResult\"\n                                        id=\"syphilisTestResult\"\n                                        \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Reactive</option>\n                                        <option value=\"No\">Non-Reactive</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <hr/>\n                            <br/>\n                            <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\n                            <h5 style={{color:'#fff'}}>Hepatitis B Testing</h5>\n                            </LabelRibbon>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Hepatitis B virus test result *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"hepatitisBTestResult\"\n                                        id=\"hepatitisBTestResult\"\n                                        \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Positive</option>\n                                        <option value=\"No\">Negative</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Hepatitis C virus test result *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"hepatitisCTestResult\"\n                                        id=\"hepatitisCTestResult\"\n                                        \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                       <option value={\"\"}></option>\n                                        <option value=\"Yes\">Positive</option>\n                                        <option value=\"No\">Negative</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>HIV Request and Result form filled with CT Intake Form *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"hivRequestResultCT\"\n                                        id=\"hivRequestResultCT\"\n                                        \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Completed By</Label>\n                                <Input\n                                    type=\"number\"\n                                    name=\"completedBy\"\n                                    id=\"completedBy\"\n                                    // value={objValues.lastViralLoad}\n                                    // onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                />\n                                \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Longitude</Label>\n                                <Input\n                                    type=\"number\"\n                                    name=\"longitude\"\n                                    id=\"longitude\"\n                                    // value={objValues.lastViralLoad}\n                                    // onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                />\n                                \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Latitude</Label>\n                                <Input\n                                    type=\"number\"\n                                    name=\"latitude\"\n                                    id=\"latitude\"\n                                    // value={objValues.lastViralLoad}\n                                    // onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                />\n                                \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Adhoc Code</Label>\n                                <Input\n                                    type=\"number\"\n                                    name=\"adhocCode\"\n                                    id=\"adhocCode\"\n                                    // value={objValues.lastViralLoad}\n                                    // onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                />\n                                \n                                </FormGroup>\n                            </div>\n                                                      \n                            {saving ? <Spinner /> : \"\"}\n                            <br />\n                            <div className=\"row\">\n                            <div className=\"form-group mb-3 col-md-6\">\n                            <MatButton\n                            type=\"button\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.button}\n                            startIcon={<SaveIcon />}\n                            onClick={()=>handleItemClick('basic','others')}\n                            style={{backgroundColor:\"#014d88\"}}\n                            //disabled={objValues.dateOfEac1===\"\" ? true : false}\n                            >\n                            {!saving ? (\n                            <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                            ) : (\n                            <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\n                            )}\n                            </MatButton>\n                            </div>\n                            </div>\n                        </div>\n                    </form>\n                </CardBody>\n            </Card>                                 \n        </>\n    );\n};\n\nexport default BasicInfo","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\PreTest.js",["578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612"],"import React, {useCallback, useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport {toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport {Label as LabelRibbon, Button, Message} from 'semantic-ui-react'\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        }\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst BasicInfo = (props) => {\n    const classes = useStyles();\n    const patientID= props.patientObj && props.patientObj.personResponseDto ? props.patientObj.personResponseDto.id : \"\";\n    const sex= props.patientObj && props.patientObj.personResponseDto ? props.patientObj.personResponseDto.sex : \"\";\n    const clientId = props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n    const [saving, setSaving] = useState(false);\n    const [errors, setErrors] = useState({});\n    let temp = { ...errors }\n    const [riskAssessmentPartner, setRiskAssessmentPartner]= useState(\n        {\n            sexPartnerHivPositive:\"\",\n            newDiagnosedHivlastThreeMonths:\"\",\n            currentlyArvForPmtct :\"\",\n            knowHivPositiveOnArv :\"\",\n            knowHivPositiveAfterLostToFollowUp:\"\", \n            uprotectedAnalSex  :\"\",\n        }\n    )\n    const [objValues, setObjValues]= useState(\n        {\n            htsClientId: clientId,\n            knowledgeAssessment: {},\n            personId: patientID,\n            riskAssessment: {},\n            stiScreening: {},\n            tbScreening: {},\n            sexPartnerRiskAssessment:{}\n        }\n    )\n    const [knowledgeAssessment, setKnowledgeAssessment]= useState(\n        {\n            previousTestedHIVNegative:\"\",\n            timeLastHIVNegativeTestResult:\"\",\n            clientPregnant:\"\",\n            clientInformHivTransRoutes:\"\",\n            clientInformRiskkHivTrans:\"\",\n            clientInformPreventingsHivTrans:\"\", \n            clientInformPossibleTestResult:\"\",\n            informConsentHivTest:\"\",\n        }\n    )\n    const [riskAssessment, setRiskAssessment]= useState(\n        {\n            everHadSexualIntercourse:\"\",\n            bloodtransInlastThreeMonths:\"\",\n            uprotectedSexWithCasualLastThreeMonths:\"\",\n            uprotectedSexWithRegularPartnerLastThreeMonths:\"\", \n            unprotectedVaginalSex:\"\",  \n            uprotectedAnalSex:\"\",   \n            stiLastThreeMonths:\"\",\n            sexUnderInfluence :\"\",\n            moreThanOneSexPartnerLastThreeMonths:\"\",\n            experiencePain:\"\",\n            haveSexWithoutCondom:\"\",\n            abuseDrug:\"\",\n            bloodTransfusion:\"\",\n            consistentWeightFeverNightCough:\"\",\n            soldPaidVaginalSex:\"\",\n        }\n    )\n    const [stiScreening, setStiScreening]= useState(\n        {\n            vaginalDischarge:\"\",\n            lowerAbdominalPains :\"\",\n            urethralDischarge :\"\",\n            complaintsOfScrotal:\"\", \n            complaintsGenitalSore  :\"\",\n                \n        }\n    )\n    const [tbScreening, setTbScreening]= useState(\n        {\n            currentCough :\"\",\n            weightLoss  :\"\",\n            lymphadenopathy :\"\", \n            fever :\"\",  \n            nightSweats :\"\",\n        }\n    )\n    useEffect(() => { \n        //console.log(props.patientObj)\n        if(props.patientObj){\n            setKnowledgeAssessment(props.patientObj.knowledgeAssessment  && props.patientObj.knowledgeAssessment!==null ? props.patientObj.knowledgeAssessment : {})\n            setRiskAssessment(props.patientObj.riskAssessment  && props.patientObj.riskAssessment!==null ? props.patientObj.riskAssessment : {})\n            setRiskAssessmentPartner(props.patientObj.sexPartnerRiskAssessment && props.patientObj.sexPartnerRiskAssessment!==null ? props.patientObj.sexPartnerRiskAssessment : {})\n            setStiScreening(props.patientObj.stiScreening  && props.patientObj.stiScreening!==null? props.patientObj.stiScreening : {})\n            setTbScreening(props.patientObj.tbScreening  && props.patientObj.tbScreening!==null? props.patientObj.tbScreening : {})\n            //patientAge=calculate_age(moment(props.patientObj.personResponseDto.dateOfBirth).format(\"DD-MM-YYYY\"))\n            //console.log(props.patientObj.riskStratificationResponseDto.riskAssessment)\n            if(props.patientObj.riskStratificationResponseDto && Object.keys(props.patientObj.riskStratificationResponseDto.riskAssessment).length !== 0 && props.patientObj.riskAssessment===null){\n                setRiskAssessment({...riskAssessment, ...props.patientObj.riskStratificationResponseDto.riskAssessment})\n            }else{\n                setRiskAssessment({...riskAssessment, ...props.patientObj.riskAssessment})   \n            } \n        }\n    }, [props.patientObj]);\n    const handleItemClick =(page, completedMenu)=>{        \n        if(props.completed.includes(completedMenu)) {\n        }else{\n            props.setCompleted([...props.completed, completedMenu])\n        }\n        props.handleItemClick(page)\n    }\n\n    const handleInputChangeKnowledgeAssessment = e => { \n        //setErrors({...temp, [e.target.name]:\"\"})\n        \n        setKnowledgeAssessment ({...knowledgeAssessment,  [e.target.name]: e.target.value}); \n          \n    }\n    \n    const handleInputChangeRiskAssessment = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setRiskAssessment ({...riskAssessment,  [e.target.name]: e.target.value});                  \n    }\n    // Getting the number count of riskAssessment True\n    const actualRiskCountTrue=Object.values(riskAssessment)\n    const riskCount=actualRiskCountTrue.filter((x)=> x==='true')\n   \n    const handleInputChangeRiskAssessmentPartner = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setRiskAssessmentPartner ({...riskAssessmentPartner,  [e.target.name]: e.target.value});                       \n    }\n    // Getting the number count of sexPartRiskCount True\n    const actualSexPartRiskCountTrue=Object.values(riskAssessmentPartner)\n    const sexPartRiskCount=actualSexPartRiskCountTrue.filter((x)=> x==='true')\n\n    const handleInputChangeStiScreening = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setStiScreening ({...stiScreening,  [e.target.name]: e.target.value});            \n    }\n    // Getting the number count of STI True\n    const actualStiTrue=Object.values(stiScreening)\n    const stiCount=actualStiTrue.filter((x)=> x==='true')\n    \n    const [tbCount, settbCount] = useState(0);\n    const handleInputChangeTbScreening = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        \n        if(e.target.value==='true') {\n            const newcount = tbCount +1\n            if(newcount>=0 && newcount <=5){\n                settbCount(newcount)\n            }\n        }\n        if(e.target.value==='false') {\n            const newcount = tbCount -1\n            //settbCount(newcount)\n            //console.log(newcount)\n            if(newcount <=0 ){\n                \n                settbCount(0)\n            }else{\n                settbCount(newcount)\n            }\n        } \n        setTbScreening ({...tbScreening,  [e.target.name]: e.target.value});          \n    }\n     /*****  Validation  */\n     const validate = () => {\n        //HTS FORM VALIDATION\n           temp.previousTestedHIVNegative = knowledgeAssessment.previousTestedHIVNegative ? \"\" : \"This field is required.\"\n           {knowledgeAssessment.previousTestedHIVNegative==='true' && ( temp.timeLastHIVNegativeTestResult = knowledgeAssessment.timeLastHIVNegativeTestResult ? \"\" : \"This field is required.\")}\n           temp.clientPregnant = knowledgeAssessment.clientPregnant ? \"\" : \"This field is required.\"\n           temp.clientInformHivTransRoutes = knowledgeAssessment.clientInformHivTransRoutes ? \"\" : \"This field is required.\"\n           temp.clientInformRiskkHivTrans = knowledgeAssessment.clientInformRiskkHivTrans ? \"\" : \"This field is required.\"\n           temp.clientInformPreventingsHivTrans = knowledgeAssessment.clientInformPreventingsHivTrans ? \"\" : \"This field is required.\"\n           temp.clientInformPossibleTestResult = knowledgeAssessment.clientInformPossibleTestResult ? \"\" : \"This field is required.\"\n           temp.informConsentHivTest = knowledgeAssessment.informConsentHivTest ? \"\" : \"This field is required.\"  \n\n            temp.currentCough = tbScreening.currentCough ? \"\" : \"This field is required.\"\n            temp.weightLoss = tbScreening.weightLoss ? \"\" : \"This field is required.\"\n            temp.lymphadenopathy = tbScreening.lymphadenopathy ? \"\" : \"This field is required.\"\n            temp.fever = tbScreening.fever ? \"\" : \"This field is required.\"\n            temp.nightSweats = tbScreening.nightSweats ? \"\" : \"This field is required.\"\n\n            {props.patientObj && props.patientObj.personResponseDto.sex==='Female' && (temp.vaginalDischarge = stiScreening.vaginalDischarge ? \"\" : \"This field is required.\" )}\n            {props.patientObj && props.patientObj.personResponseDto.sex==='Female' && (temp.lowerAbdominalPains = stiScreening.lowerAbdominalPains ? \"\" : \"This field is required.\")}\n            {props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.urethralDischarge = stiScreening.urethralDischarge ? \"\" : \"This field is required.\")}\n            {props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.complaintsOfScrotal = stiScreening.complaintsOfScrotal ? \"\" : \"This field is required.\")}\n            {props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.complaintsGenitalSore = stiScreening.complaintsGenitalSore ? \"\" : \"This field is required.\")}\n \n            {props.patientObj.targetGroup===\"473\" && (temp.everHadSexualIntercourse = riskAssessment.everHadSexualIntercourse ? \"\" : \"This field is required.\")}\n            {props.patientObj.targetGroup===\"473\" && (temp.bloodtransInlastThreeMonths = riskAssessment.bloodtransInlastThreeMonths ? \"\" : \"This field is required.\")}\n            {props.patientObj.targetGroup===\"473\" && (temp.uprotectedSexWithCasualLastThreeMonths = riskAssessment.uprotectedSexWithCasualLastThreeMonths ? \"\" : \"This field is required.\")}\n            {props.patientObj.targetGroup===\"473\" && (temp.uprotectedSexWithRegularPartnerLastThreeMonths = riskAssessment.uprotectedSexWithRegularPartnerLastThreeMonths ? \"\" : \"This field is required.\")}\n            {props.patientObj.targetGroup===\"473\" && (temp.unprotectedVaginalSex = riskAssessment.unprotectedVaginalSex ? \"\" : \"This field is required.\")}\n\n            {props.patientObj.targetGroup===\"473\" && (temp.uprotectedAnalSex = riskAssessment.uprotectedAnalSex ? \"\" : \"This field is required.\")}\n            {props.patientObj.targetGroup===\"473\" && (temp.sexUnderInfluence = riskAssessment.sexUnderInfluence ? \"\" : \"This field is required.\")}\n            {props.patientObj.targetGroup===\"473\" && (temp.uprotectedSexWithCasualLastThreeMonths = riskAssessment.uprotectedSexWithCasualLastThreeMonths ? \"\" : \"This field is required.\")}\n            {props.patientObj.targetGroup===\"473\" && (temp.moreThanOneSexPartnerLastThreeMonths = riskAssessment.moreThanOneSexPartnerLastThreeMonths ? \"\" : \"This field is required.\")}\n            \n            \n            {props.patientObj.targetGroup!==\"473\" && (temp.experiencePain = riskAssessment.experiencePain ? \"\" : \"This field is required.\")}\n\n            {props.patientObj.targetGroup!==\"473\" && (temp.haveSexWithoutCondom = riskAssessment.haveSexWithoutCondom ? \"\" : \"This field is required.\")}\n            {props.patientObj.targetGroup!==\"473\" && (temp.abuseDrug = riskAssessment.abuseDrug ? \"\" : \"This field is required.\")}\n            {props.patientObj.targetGroup!==\"473\" && (temp.bloodTransfusion = riskAssessment.bloodTransfusion ? \"\" : \"This field is required.\")}\n            {props.patientObj.targetGroup!==\"473\" && (temp.consistentWeightFeverNightCough = riskAssessment.consistentWeightFeverNightCough ? \"\" : \"This field is required.\")}\n            {props.patientObj.targetGroup!==\"473\" && (temp.soldPaidVaginalSex = riskAssessment.soldPaidVaginalSex ? \"\" : \"This field is required.\")}\n\n            temp.sexPartnerHivPositive = tbScreening.sexPartnerHivPositive ? \"\" : \"This field is required.\"\n            {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.newDiagnosedHivlastThreeMonths = tbScreening.newDiagnosedHivlastThreeMonths ? \"\" : \"This field is required.\")}\n            {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.currentlyArvForPmtct = tbScreening.currentlyArvForPmtct ? \"\" : \"This field is required.\")}\n            {riskAssessmentPartner.sexPartnerHivPositive==='true' && ( temp.knowHivPositiveOnArv = tbScreening.knowHivPositiveOnArv ? \"\" : \"This field is required.\")}\n            {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.knowHivPositiveAfterLostToFollowUp = tbScreening.knowHivPositiveAfterLostToFollowUp ? \"\" : \"This field is required.\")}\n            {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.uprotectedAnalSex = tbScreening.uprotectedAnalSex ? \"\" : \"This field is required.\")}\n            \n            setErrors({ ...temp })\n        return Object.values(temp).every(x => x == \"\")\n    }\n    const handleSubmit =(e)=>{\n        e.preventDefault();\n\n            objValues.htsClientId= clientId\n            objValues.knowledgeAssessment= knowledgeAssessment\n            objValues.personId= patientID\n            objValues.riskAssessment= riskAssessment\n            objValues.stiScreening=stiScreening\n            objValues.tbScreening=tbScreening\n            objValues.sexPartnerRiskAssessment=riskAssessmentPartner\n            axios.put(`${baseUrl}hts/${clientId}/pre-test-counseling`,objValues,\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\n            \n            )\n            .then(response => {\n                setSaving(false);\n                props.setPatientObj(response.data)\n                //toast.success(\"Risk Assesment successful\");\n                handleItemClick('hiv-test', 'pre-test-counsel' )\n\n            })\n            .catch(error => {\n                setSaving(false);\n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage);\n                }\n                else{\n                    toast.error(\"Something went wrong. Please try again...\");\n                }\n            });\n            \n    }\n    console.log(riskAssessmentPartner)\n\n    return (\n        <>\n            <Card className={classes.root}>\n                <CardBody>\n               \n                <h2>PRE TEST COUNSELING</h2>\n                    <form >\n                        <div className=\"row\">\n\n                        <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'rgb(0,181,173)', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >Knowledge Assessment</div>\n                     \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Previously tested HIV negative *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"previousTestedHIVNegative\"\n                                        id=\"previousTestedHIVNegative\"\n                                        value={knowledgeAssessment.previousTestedHIVNegative}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.previousTestedHIVNegative !==\"\" ? (\n                                    <span className={classes.error}>{errors.previousTestedHIVNegative}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            {knowledgeAssessment.previousTestedHIVNegative==='true' && (\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Time of last HIV Negative test Result*</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"timeLastHIVNegativeTestResult\"\n                                        id=\"timeLastHIVNegativeTestResult\"\n                                        value={knowledgeAssessment.timeLastHIVNegativeTestResult}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"<1\"> {\"< 1\"} month</option>\n                                        <option value=\"1-3 Months\">1-3 Months</option>\n                                        <option value=\"4-6 Months\">4-6 Months</option>\n                                        <option value=\">6 Months\"> {\">6\"} Months</option>\n                                        \n                                    </select>\n                                    {errors.timeLastHIVNegativeTestResult !==\"\" ? (\n                                    <span className={classes.error}>{errors.timeLastHIVNegativeTestResult}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            )}\n                            {sex ==='Female' && (\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Client pregnant *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"clientPregnant\"\n                                        id=\"clientPregnant\"\n                                        value={knowledgeAssessment.clientPregnant}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.clientPregnant !==\"\" ? (\n                                    <span className={classes.error}>{errors.clientPregnant}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                             )}\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Client informed about HIV transmission routes *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"clientInformHivTransRoutes\"\n                                        id=\"clientInformHivTransRoutes\"\n                                        value={knowledgeAssessment.clientInformHivTransRoutes}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.clientInformHivTransRoutes !==\"\" ? (\n                                    <span className={classes.error}>{errors.clientInformHivTransRoutes}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Client informed about risk factors for HIV transmission *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"clientInformRiskkHivTrans\"\n                                        id=\"clientInformRiskkHivTrans\"\n                                        value={knowledgeAssessment.clientInformRiskkHivTrans}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.clientInformRiskkHivTrans !==\"\" ? (\n                                    <span className={classes.error}>{errors.clientInformRiskkHivTrans}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Client informed on preventing HIV transmission methods *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"clientInformPreventingsHivTrans\"\n                                        id=\"clientInformPreventingsHivTrans\"\n                                        value={knowledgeAssessment.clientInformPreventingsHivTrans}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.clientInformPreventingsHivTrans !==\"\" ? (\n                                    <span className={classes.error}>{errors.clientInformPreventingsHivTrans}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Client informed about possible test results *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"clientInformPossibleTestResult\"\n                                        id=\"clientInformPossibleTestResult\"\n                                        value={knowledgeAssessment.clientInformPossibleTestResult}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.clientInformPossibleTestResult !==\"\" ? (\n                                    <span className={classes.error}>{errors.clientInformPossibleTestResult}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Informed consent for HIV testing given *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"informConsentHivTest\"\n                                        id=\"informConsentHivTest\"\n                                        value={knowledgeAssessment.informConsentHivTest}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.informConsentHivTest !==\"\" ? (\n                                    <span className={classes.error}>{errors.informConsentHivTest}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <hr/>\n                            <br/>\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#000', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >Clinical TB screening</div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Current cough *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"currentCough\"\n                                        id=\"currentCough\"\n                                        value={tbScreening.currentCough}\n                                        onChange={handleInputChangeTbScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.currentCough !==\"\" ? (\n                                    <span className={classes.error}>{errors.currentCough}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Weight loss *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"weightLoss\"\n                                        id=\"weightLoss\"\n                                        value={tbScreening.weightLoss}\n                                        onChange={handleInputChangeTbScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.weightLoss !==\"\" ? (\n                                    <span className={classes.error}>{errors.weightLoss}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Lymphadenopathy (swelling of the lymph nodes) *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"lymphadenopathy\"\n                                        id=\"lymphadenopathy\"\n                                        value={tbScreening.lymphadenopathy}\n                                        onChange={handleInputChangeTbScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.lymphadenopathy !==\"\" ? (\n                                    <span className={classes.error}>{errors.lymphadenopathy}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Fever *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"fever\"\n                                        id=\"fever\"\n                                        value={tbScreening.fever}\n                                        onChange={handleInputChangeTbScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.fever !==\"\" ? (\n                                    <span className={classes.error}>{errors.fever}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div> \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Night sweats*</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"nightSweats\"\n                                        id=\"nightSweats\"\n                                        value={tbScreening.nightSweats}\n                                        onChange={handleInputChangeTbScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.nightSweats !==\"\" ? (\n                                    <span className={classes.error}>{errors.nightSweats}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div> \n                            <Message warning>\n                                <h4>TB Screening score (calculate the sum of the TB assessment) If score {\">= 1\"}, test for Xper MTB RIF or refer to TB service </h4>\n                                <b>Score : {tbCount}</b>\n                            </Message>\n                            <hr/>\n                            <br/>\n                           {props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && ( <>\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#992E62', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >HIV Risk Assessment  (Last 3 months)</div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Ever had sexual intercourse </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"everHadSexualIntercourse\"\n                                        id=\"everHadSexualIntercourse\"\n                                        value={riskAssessment.everHadSexualIntercourse}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.everHadSexualIntercourse !==\"\" ? (\n                                    <span className={classes.error}>{errors.everHadSexualIntercourse}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Blood transfusion in last 3 months *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"bloodtransInlastThreeMonths\"\n                                        id=\"bloodtransInlastThreeMonths\"\n                                        value={riskAssessment.bloodtransInlastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.bloodtransInlastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.bloodtransInlastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected sex with casual partner in last 3 months *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"uprotectedSexWithCasualLastThreeMonths\"\n                                        id=\"uprotectedSexWithCasualLastThreeMonths\"\n                                        value={riskAssessment.uprotectedSexWithCasualLastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.uprotectedSexWithCasualLastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.uprotectedSexWithCasualLastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected sex with regular partner in the last 3months</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\n                                        id=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\n                                        value={riskAssessment.uprotectedSexWithRegularPartnerLastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.uprotectedSexWithRegularPartnerLastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.uprotectedSexWithRegularPartnerLastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected vaginal sex</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"unprotectedVaginalSex\"\n                                        id=\"unprotectedVaginalSex\"\n                                        value={riskAssessment.unprotectedVaginalSex}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.unprotectedVaginalSex !==\"\" ? (\n                                    <span className={classes.error}>{errors.unprotectedVaginalSex}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected Anal sex</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"uprotectedAnalSex\"\n                                        id=\"uprotectedAnalSex\"\n                                        value={riskAssessment.uprotectedAnalSex}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.uprotectedAnalSex !==\"\" ? (\n                                    <span className={classes.error}>{errors.uprotectedAnalSex}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>         \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>STI in last 3 months *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"stiLastThreeMonths\"\n                                        id=\"stiLastThreeMonths\"\n                                        value={riskAssessment.stiLastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.stiLastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.stiLastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Sex under the influence of drugs or alcohol*</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"sexUnderInfluence\"\n                                        id=\"sexUnderInfluence\"\n                                        value={riskAssessment.sexUnderInfluence}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.sexUnderInfluence !==\"\" ? (\n                                    <span className={classes.error}>{errors.sexUnderInfluence}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>More than 1 sex partner during last 3 months*</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"moreThanOneSexPartnerLastThreeMonths\"\n                                        id=\"moreThanOneSexPartnerLastThreeMonths\"\n                                        value={riskAssessment.moreThanOneSexPartnerLastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.moreThanOneSexPartnerLastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.moreThanOneSexPartnerLastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <Message warning>\n                                <h4>Personal HIV Risk assessment score (sum of all 7 answers)</h4>\n                                <b>Score : {riskCount.length}</b>\n                            </Message>\n                            <hr/>\n                            <br/>\n                            </>)}\n                            {props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && ( <>\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#992E62', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >HIV Risk Assessment  (Last 3 months)</div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/your partner experienced lower abdominal pain, smelly discharge, blisters and wounds around you/partner vagina, penis anus or mouth?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"experiencePain\"\n                                        id=\"experiencePain\"\n                                        value={riskAssessment.experiencePain}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.experiencePain !==\"\" ? (\n                                    <span className={classes.error}>{errors.experiencePain}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/partner had sex without a condom with someone of unknown HIV status, or you/partner raped by person with unknown HIV status? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"haveSexWithoutCondom\"\n                                        id=\"haveSexWithoutCondom\"\n                                        value={riskAssessment.haveSexWithoutCondom}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.haveSexWithoutCondom !==\"\" ? (\n                                    <span className={classes.error}>{errors.haveSexWithoutCondom}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you had a condom burst with your partner during sexual intercourse?  *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"haveCondomBurst\"\n                                        id=\"haveCondomBurst\"\n                                        value={riskAssessment.haveCondomBurst}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.haveCondomBurst !==\"\" ? (\n                                    <span className={classes.error}>{errors.haveCondomBurst}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Do you/partner share needles/syringes, other sharp objects or used abuse drug substances of any kind?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"abuseDrug\"\n                                        id=\"abuseDrug\"\n                                        value={riskAssessment.abuseDrug}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.abuseDrug !==\"\" ? (\n                                    <span className={classes.error}>{errors.abuseDrug}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/partner had any blood or blood product transfusion?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"bloodTransfusion\"\n                                        id=\"bloodTransfusion\"\n                                        value={riskAssessment.bloodTransfusion}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.bloodTransfusion !==\"\" ? (\n                                    <span className={classes.error}>{errors.bloodTransfusion}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/partner experienced coughing, weight loss, fever, night sweats consistently?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"consistentWeightFeverNightCough\"\n                                        id=\"consistentWeightFeverNightCough\"\n                                        value={riskAssessment.consistentWeightFeverNightCough}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.consistentWeightFeverNightCough !==\"\" ? (\n                                    <span className={classes.error}>{errors.consistentWeightFeverNightCough}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>            \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/partner paid or sold vaginal, anal or oral sex? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"soldPaidVaginalSex\"\n                                        id=\"soldPaidVaginalSex\"\n                                        value={riskAssessment.soldPaidVaginalSex}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.soldPaidVaginalSex !==\"\" ? (\n                                    <span className={classes.error}>{errors.soldPaidVaginalSex}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <Message warning>\n                                <h4>Personal HIV Risk assessment score (sum of all 7 answers)</h4>\n                                <b>Score :{riskCount.length}</b>\n                            </Message>\n                            <hr/>\n                            <br/>\n                            </>)}\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#992E62', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >Sex Partner Risk Assessment (Last 3 months)</div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you had sex with a partner who is HIV positive? </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"sexPartnerHivPositive\"\n                                        id=\"sexPartnerHivPositive\"\n                                        value={riskAssessmentPartner.sexPartnerHivPositive}\n                                        onChange={handleInputChangeRiskAssessmentPartner}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.sexPartnerHivPositive !==\"\" ? (\n                                    <span className={classes.error}>{errors.sexPartnerHivPositive}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            {riskAssessmentPartner.sexPartnerHivPositive==='true' && (<>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Is sex partner newly diagnosed with HIV and started treatment less than 3-6 months ago?*</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"newDiagnosedHivlastThreeMonths\"\n                                        id=\"newDiagnosedHivlastThreeMonths\"\n                                        value={riskAssessmentPartner.newDiagnosedHivlastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessmentPartner}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.newDiagnosedHivlastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.newDiagnosedHivlastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Is sex partner pregnant and currently receiving ARV for PMTCT?*</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"currentlyArvForPmtct\"\n                                        id=\"currentlyArvForPmtct\"\n                                        value={riskAssessmentPartner.currentlyArvForPmtct}\n                                        onChange={handleInputChangeRiskAssessmentPartner}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.currentlyArvForPmtct !==\"\" ? (\n                                    <span className={classes.error}>{errors.currentlyArvForPmtct}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Known HIV positive partner on ARV with an unsurpressed VL</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"knowHivPositiveOnArv\"\n                                        id=\"knowHivPositiveOnArv\"\n                                        value={riskAssessmentPartner.knowHivPositiveOnArv}\n                                        onChange={handleInputChangeRiskAssessmentPartner}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.knowHivPositiveOnArv !==\"\" ? (\n                                    <span className={classes.error}>{errors.knowHivPositiveOnArv}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Known HIV positive recently returned to treatment after being lost to follow up</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"knowHivPositiveAfterLostToFollowUp\"\n                                        id=\"knowHivPositiveAfterLostToFollowUp\"\n                                        value={riskAssessmentPartner.knowHivPositiveAfterLostToFollowUp}\n                                        onChange={handleInputChangeRiskAssessmentPartner}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.knowHivPositiveAfterLostToFollowUp !==\"\" ? (\n                                    <span className={classes.error}>{errors.knowHivPositiveAfterLostToFollowUp}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected Anal sex</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"uprotectedAnalSex\"\n                                        id=\"uprotectedAnalSex\"\n                                        value={riskAssessmentPartner.uprotectedAnalSex}\n                                        onChange={handleInputChangeRiskAssessmentPartner}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.uprotectedAnalSex !==\"\" ? (\n                                    <span className={classes.error}>{errors.uprotectedAnalSex}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            </>)}\n                            <Message warning>\n                                <h4>Sex Partner Risk Assessment score (sum of all 6 answers)</h4>\n                                <b>Score :{sexPartRiskCount.length}</b>\n                            </Message>        \n                            \n                            <hr/>\n                            <br/>\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#014D88', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >Syndromic STI Screening</div>\n                            {props.patientObj && props.patientObj.personResponseDto.sex==='Female' && (\n                            <>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Complaints of vaginal discharge or burning when urinating?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"vaginalDischarge\"\n                                        id=\"vaginalDischarge\"\n                                        value={stiScreening.vaginalDischarge}\n                                        onChange={handleInputChangeStiScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.vaginalDischarge !==\"\" ? (\n                                    <span className={classes.error}>{errors.vaginalDischarge}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Complaints of lower abdominal pains with or without vaginal discharge?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"lowerAbdominalPains\"\n                                        id=\"lowerAbdominalPains\"\n                                        value={stiScreening.lowerAbdominalPains}\n                                        onChange={handleInputChangeStiScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.lowerAbdominalPains !==\"\" ? (\n                                    <span className={classes.error}>{errors.lowerAbdominalPains}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            </>)}\n                            {props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (\n                            <>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Complaints of urethral discharge or burning when urinating?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"urethralDischarge\"\n                                        id=\"urethralDischarge\"\n                                        value={stiScreening.urethralDischarge}\n                                        onChange={handleInputChangeStiScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.urethralDischarge !==\"\" ? (\n                                    <span className={classes.error}>{errors.urethralDischarge}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div> \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Complaints of scrotal swelling and pain</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"complaintsOfScrotal\"\n                                        id=\"complaintsOfScrotal\"\n                                        value={stiScreening.complaintsOfScrotal}\n                                        onChange={handleInputChangeStiScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.complaintsOfScrotal !==\"\" ? (\n                                    <span className={classes.error}>{errors.complaintsOfScrotal}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div> \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Complaints of genital sore(s) or swollen inguinal lymph nodes with or without pains?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"complaintsGenitalSore\"\n                                        id=\"complaintsGenitalSore\"\n                                        value={stiScreening.complaintsGenitalSore}\n                                        onChange={handleInputChangeStiScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.complaintsGenitalSore !==\"\" ? (\n                                    <span className={classes.error}>{errors.complaintsGenitalSore}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            </>)} \n                            <Message warning>\n                                <h4>Calculate the sum of the STI screening. If {\">= \"}1, should be referred for STI test </h4>\n                                <b>Score :{stiCount.length}</b>\n                            </Message>\n                           \n                            {saving ? <Spinner /> : \"\"}\n                            <br />\n                            <div className=\"row\">\n                            <div className=\"form-group mb-3 col-md-12\">\n                            <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('basic','basic')}/>\n                            <Button content='Save & Continue' icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\n                            </div>\n                            </div>\n                        </div>\n                    </form>\n                </CardBody>\n            </Card>                                 \n        </>\n    );\n};\n\nexport default BasicInfo","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\HivTestResult.js",["613","614","615","616","617"],"import React, {useCallback, useEffect, useState} from \"react\";\n\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\nimport * as moment from 'moment';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport {toast} from \"react-toastify\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport axios from \"axios\";\nimport {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport {Label as LabelRibbon, Button} from 'semantic-ui-react'\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        }\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst HivTestResult = (props) => {\n    const classes = useStyles();\n    const [saving, setSaving] = useState(false);\n    const [errors, setErrors] = useState({});\n    let temp = { ...errors }\n    console.log(props.patientObj)\n    const patientID= props.patientObj && props.patientObj.personResponseDto ? props.patientObj.personResponseDto.id : \"\";\n    const clientId = props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n    const [hivTestDate, setHivTestDate] = useState(\"\");\n    const [showCD4Count, setShowCD4Count] = useState(true);\n    const calculate_age = dob => {\n        var today = new Date();\n        var dateParts = dob.split(\"-\");\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n        var age_now = today.getFullYear() - birthDate.getFullYear();\n        var m = today.getMonth() - birthDate.getMonth();\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n                    age_now--;\n                }\n            if (age_now === 0) {\n                    return m + \" month(s)\";\n                }\n                return age_now ;\n    };\n    const patientAge=calculate_age(moment(props.patientObj.personResponseDto && props.patientObj.personResponseDto.dateOfBirth ? props.patientObj.personResponseDto.dateOfBirth : 0).format(\"DD-MM-YYYY\"))\n   \n    const [objValues, setObjValues]= useState(\n        {\n            confirmatoryTest: {},\n            confirmatoryTest2: {},\n            hivTestResult: \"\",\n            hivTestResult2: \"\",\n            htsClientId:\"\",\n            personId: props.patientObj  ? props.patientObj.id : \"\",\n            test1: {},\n            test2: {},\n            tieBreakerTest: {},\n            tieBreakerTest2: {},\n            syphilisTesting:{},\n            hepatitisTesting:{},\n            others:{},\n            cd4:{},\n        }\n    )\n    const handleInputChange = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setObjValues ({...objValues,  [e.target.name]: e.target.value});            \n    }\n    const [initialTest1, setInitailTest]= useState(\n        {\n            date:\"\",\n            result:\"\",            \n        }\n    )\n    const [initialTest12, setInitailTest2]= useState(\n        {\n            date2 :\"\",\n            result2  :\"\",            \n        }\n    )\n    const handleInputChangeCd4Count = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setCd4Count ({...cd4Count,  [e.target.name]: e.target.value});            \n    }\n    const [cd4Count, setCd4Count]= useState(\n        {\n            cd4Count:\"\",\n            cd4SemiQuantitative:\"\",\n            cd4FlowCyteometry:\"\"            \n        }\n    )\n    const handleInputChangeInitial = e => { \n        //setErrors({...temp, [e.target.name]:\"\"})\n        if(e.target.value==='No'){\n            setInitailTest ({...initialTest1,  [e.target.name]: e.target.value}); \n            setConfirmatoryTest({\n                date :\"\",\n                result  :\"\",            \n            })\n            setTieBreakerTest({\n                date :\"\",\n                result  :\"\",            \n            })\n            //This is to show cd4 count section\n            setShowCD4Count(false)\n                \n        }else{\n            setInitailTest ({...initialTest1,  [e.target.name]: e.target.value});\n            //This is to show cd4 count section \n            setShowCD4Count(true)\n        }            \n    }\n    const handleInputChangeInitial2 = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        if(e.target.value==='No'){\n            setInitailTest2 ({...initialTest12,  [e.target.name]: e.target.value});  \n            setConfirmatoryTest2({\n                date2 :\"\",\n                result2  :\"\",            \n            })\n            setTieBreakerTest2({\n                date2 :\"\",\n                result2  :\"\",            \n            })\n            //This is to show cd4 count section\n            setShowCD4Count(false)\n        }else{\n            setInitailTest2 ({...initialTest12,  [e.target.name]: e.target.value});\n            //This is to show cd4 count section \n            setShowCD4Count(true) \n        }           \n    }\n    const [confirmatoryTest, setConfirmatoryTest]= useState(\n        {\n            date :\"\",\n            result  :\"\",            \n        }\n    )\n    const [confirmatoryTest2, setConfirmatoryTest2]= useState(\n        {\n            date2 :\"\",\n            result2  :\"\",            \n        }\n    )\n    const handleInputChangeConfirmatory = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setConfirmatoryTest ({...confirmatoryTest,  [e.target.name]: e.target.value});\n        //This is to show cd4 count section \n        if(initialTest1.result==='Yes' && e.target.value==='Yes'){\n            setShowCD4Count(true)\n\n        }else{\n            setShowCD4Count(true)\n        }              \n    }\n    const handleInputChangeConfirmatory2 = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setConfirmatoryTest2 ({...confirmatoryTest2,  [e.target.name]: e.target.value}); \n        //This is to show cd4 count section \n        if(initialTest12.result2==='Yes' && e.target.value==='Yes'){\n            setShowCD4Count(true)\n\n        }else{\n            setShowCD4Count(true)\n        }                 \n    }\n    const [tieBreakerTest, setTieBreakerTest]= useState(\n        {\n            date :\"\",\n            result  :\"\",            \n        }\n    )\n    const [tieBreakerTest2, setTieBreakerTest2]= useState(\n        {\n            date2 :\"\",\n            result2  :\"\",            \n        }\n    )\n    const handleInputChangeTie = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setTieBreakerTest ({...tieBreakerTest,  [e.target.name]: e.target.value});  \n        //This is to show cd4 count section\n        if(confirmatoryTest.result==='No' && e.target.value==='Yes'){\n            setShowCD4Count(true)\n        }else if(confirmatoryTest.result==='No' && e.target.value==='No'){\n            setShowCD4Count(false)\n        }else{\n            setShowCD4Count(true)\n        }         \n    }\n    const handleInputChangeTie2 = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setTieBreakerTest2 ({...tieBreakerTest2,  [e.target.name]: e.target.value});\n        //This is to show cd4 count section\n        if(confirmatoryTest2.result2==='No' && e.target.value==='Yes'){\n            setShowCD4Count(true)\n        }else if(confirmatoryTest2.result2==='No' && e.target.value==='No'){\n            setShowCD4Count(false)\n        }else{\n            setShowCD4Count(true)\n        }                     \n    }\n    const [syphills, setSyphills]= useState(\n        {\n            syphilisTestResult :\"\",\n           // result  :\"\",            \n        }\n    )\n    const handleInputChangeSyphills = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setSyphills ({...syphills,  [e.target.name]: e.target.value});            \n    }\n    const [hepatitis, setHepatitis]= useState(\n        {\n            hepatitisCTestResult :\"\",\n            hepatitisBTestResult  :\"\", \n            longitude:\"\",\n            latitude:\"\",\n            adhocCode :\"\"                       \n        }\n    )\n    const handleInputChangeHepatitis = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setHepatitis ({...hepatitis,  [e.target.name]: e.target.value});            \n    }\n    const [others, setOthers]= useState(\n        {\n            longitude:\"\",\n            latitude:\"\",\n            adhocCode :\"\"                       \n        }\n    )\n    useEffect(() => { \n        //console.log(props.patientObj)\n        if(props.patientObj){\n            if(props.patientObj.dateVisit && props.patientObj.dateVisit!=='' ){\n                setHivTestDate(props.patientObj.dateVisit)\n            }else{\n                setHivTestDate(\"\")\n            }\n            setCd4Count(props.patientObj  && props.patientObj.cd4!==null? props.patientObj.cd4 : {})\n            //setInitailTest(props.patientObj  && props.patientObj.test1!==null? props.patientObj.test1 : {})\n            //setConfirmatoryTest(props.patientObj  && props.patientObj.confirmatoryTest!==null? props.patientObj.confirmatoryTest : {})\n            setTieBreakerTest(props.patientObj && props.patientObj.tieBreakerTest!==null ? props.patientObj.tieBreakerTest : {})\n            setSyphills(props.patientObj  && props.patientObj.syphilisTesting!==null ? props.patientObj.syphilisTesting : {})\n            setHepatitis(props.patientObj  && props.patientObj.hepatitisTesting!==null ? props.patientObj.hepatitisTesting : {})\n            setOthers(props.patientObj  && props.patientObj.others!==null ? props.patientObj.others : {})\n            \n            //setInitailTest2(props.patientObj  && props.patientObj.test2!==null? props.patientObj.test2 : {})\n            //setConfirmatoryTest2(props.patientObj  && props.patientObj.confirmatoryTest2!==null? props.patientObj.confirmatoryTest2 : {})\n            //setTieBreakerTest2(props.patientObj && props.patientObj.tieBreakerTest2!==null ? props.patientObj.tieBreakerTest2 : {})\n        }\n    }, [props.patientObj]);//initialTest12, tieBreakerTest2, confirmatoryTest2, \n\n    const handleInputChangeOthers = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setOthers ({...others,  [e.target.name]: e.target.value});            \n    }\n    const handleItemClick =(page, completedMenu)=>{\n        props.handleItemClick(page)\n        if(props.completed.includes(completedMenu)) {\n\n        }else{\n            props.setCompleted([...props.completed, completedMenu])\n        }\n    }\n    const validate = () => {\n        //HTS FORM VALIDATION\n        initialTest1.date!==\"\" &&  (temp.date = initialTest1.result ? \"\" : \"This field is required.\")\n        // initialTest1.result!==\"\"  && (temp.date = confirmatoryTest.date ? \"\" : \"This field is required.\")\n        // initialTest1.result!==\"\"  && (temp.date = tieBreakerTest.date ? \"\" : \"This field is required.\")\n              \n                setErrors({ ...temp })\n        return Object.values(temp).every(x => x == \"\")\n    }\n    const handleSubmit =(e)=>{\n        e.preventDefault();\n        if(validate()){\n                    //logic to get Hiv result test\n        if(initialTest12.result2==='No' ){\n            objValues.hivTestResult2=\"Negative\"\n        }else if(initialTest12.result2==='Yes' && confirmatoryTest2.result2==='Yes'){\n            objValues.hivTestResult2=\"Positive\" \n        }\n        // else if(initialTest12.result2==='Yes' && confirmatoryTest2.result2==='No' && tieBreakerTest2.result2===''){\n        //     objValues.hivTestResult2=\"Negative\" \n        // }\n        else if(confirmatoryTest2.result2==='No' && tieBreakerTest2.result2==='Yes'){\n            objValues.hivTestResult2=\"Positive\" \n        }else if(confirmatoryTest2.result2==='No' && tieBreakerTest2.result2==='No'){\n            objValues.hivTestResult2=\"Negative\" \n        }else{\n            objValues.hivTestResult2=\"\"\n        }\n      \n        if(initialTest1.result==='No' ){\n            objValues.hivTestResult=\"Negative\"\n        }else if(initialTest1.result==='Yes' && confirmatoryTest.result==='Yes'){\n            objValues.hivTestResult=\"Positive\"\n        }\n        // else if(initialTest1.result==='Yes' && confirmatoryTest.result==='No' && tieBreakerTest.result===''){\n        //     objValues.hivTestResult=\"Negative\"\n        // }\n        else if(confirmatoryTest.result==='No' && tieBreakerTest.result==='Yes'){\n            objValues.hivTestResult=\"Positive\"\n        }else if(confirmatoryTest.result==='No' && tieBreakerTest.result==='No'){\n            objValues.hivTestResult=\"Negative\"\n        }else{\n            objValues.hivTestResult=\"\"\n        }\n            objValues.htsClientId= clientId\n            objValues.confirmatoryTest= confirmatoryTest\n            objValues.confirmatoryTest2= confirmatoryTest2\n            objValues.personId= patientID\n            objValues.test1= initialTest1\n            objValues.test2= initialTest12\n            objValues.tieBreakerTest=tieBreakerTest\n            objValues.tieBreakerTest2=tieBreakerTest2\n            objValues.syphilisTesting=syphills\n            objValues.hepatitisTesting=hepatitis\n           \n            objValues.cd4=cd4Count\n            objValues.others=others\n            axios.put(`${baseUrl}hts/${clientId}/request-result`,objValues,\n            { headers: {\"Authorization\" : `Bearer ${token}`}}, )\n            .then(response => {\n                setSaving(false);\n                props.setPatientObj(response.data)\n                //console.log(response.data)\n                //props.setPatientObj(props && props.patientObj ? props.patientObj : \"\")\n                //toast.success(\"HIV test successful\");\n                handleItemClick('post-test', 'hiv-test')\n            })\n            .catch(error => {\n                setSaving(false);\n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage);\n                }\n                else{\n                    toast.error(\"Something went wrong. Please try again...\");\n                }\n            });\n        }   \n    }\n\n    return (\n        <>\n            <Card className={classes.root}>\n                <CardBody>\n               \n                <h2 style={{color:'#000'}}>REQUEST AND RESULT FORM</h2>\n                    <form >\n                        <div className=\"row\">\n                        <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\n                        <h4 style={{color:'#fff'}}>HIV TEST RESULT</h4>\n                        </LabelRibbon>\n                           <br/>\n                           <div className=\"form-group  col-md-2\"></div>\n                            <h4>Initial HIV Test 1:</h4>\n                            <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                <Label for=\"\"> Date  </Label>\n                                <Input\n                                    type=\"date\"\n                                    name=\"date\"\n                                    id=\"date\"\n                                    value={initialTest1.date}\n                                    onChange={handleInputChangeInitial}\n                                    min={hivTestDate!==\"\" && hivTestDate!==null ? hivTestDate  :\"\"}\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                    required\n                                />\n                                {errors.date !==\"\" ? (\n                                    <span className={classes.error}>{errors.date}</span>\n                                ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            {initialTest1.date && (\n                            <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                    <Label>Result </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"result\"\n                                        id=\"result\"\n                                        value={initialTest1.result}\n                                        onChange={handleInputChangeInitial}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        disabled={ initialTest1.date===\"\"? true : false}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Reactive</option>\n                                        <option value=\"No\">Non Reactive</option>\n                                        \n                                    </select>\n                                    {errors.result !==\"\" ? (\n                                    <span className={classes.error}>{errors.result}</span>\n                                ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            )}\n                            <div className=\"form-group  col-md-2\"></div>\n                            {initialTest1.result ==='Yes' && (\n                            <>\n                            <h4>Confirmatory Test:</h4>\n                            <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                <Label for=\"\"> Date  </Label>\n                                <Input\n                                    type=\"date\"\n                                    name=\"date\"\n                                    id=\"date\"\n                                    value={confirmatoryTest.date}\n                                    onChange={handleInputChangeConfirmatory}\n                                    min={initialTest1.date}\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                    required\n                                />\n                                {errors.dateOfEac1 !==\"\" ? (\n                                    <span className={classes.error}>{errors.dateOfEac1}</span>\n                                ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            {confirmatoryTest.date && (\n                            <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                    <Label>Result </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"result\"\n                                        id=\"result\"\n                                        value={confirmatoryTest.result}\n                                        onChange={handleInputChangeConfirmatory}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        disabled={confirmatoryTest.date===''? true : false}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Reactive</option>\n                                        <option value=\"No\">Non Reactive</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            )}\n                            <div className=\"form-group  col-md-2\"></div>\n                            </>\n                            )}\n                            {confirmatoryTest.result ==='No' && (\n                            <>\n                            <h4>Tie Breaker Test:</h4>\n                            <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                <Label for=\"\"> Date  </Label>\n                                <Input\n                                    type=\"date\"\n                                    name=\"date\"\n                                    id=\"date\"\n                                    value={tieBreakerTest.date}\n                                    onChange={handleInputChangeTie}\n                                    min={confirmatoryTest.date}\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                    required\n                                />\n                               \n                                </FormGroup>\n                            </div>\n                            {tieBreakerTest.date && (\n                            <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                    <Label>Result </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"result\"\n                                        id=\"result\"\n                                        value={tieBreakerTest.result}\n                                        onChange={handleInputChangeTie}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        disabled={tieBreakerTest.date===''? true : false}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Reactive</option>\n                                        <option value=\"No\">Non Reactive</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            )}\n                            <div className=\"form-group  col-md-2\"></div>\n\n                            </>)}\n                            <div className=\"row\">\n                            <div className=\"form-group  col-md-12\">  \n                                {initialTest1.result==='No' &&  (\n                                    <LabelRibbon color=\"green\" >\n                                        Negative\n                                    </LabelRibbon>\n                                )}                       \n                                {initialTest1.result==='No' && confirmatoryTest.result==='No' &&  (\n                                    <LabelRibbon color=\"green\" >\n                                    Negative\n                                </LabelRibbon>\n                                )}\n                                \n                                {(initialTest1.result==='Yes' && confirmatoryTest.result==='Yes' ) && (\n                                    <>\n                                    <LabelRibbon color=\"red\" >\n                                        Positive\n                                    </LabelRibbon>\n                                    <br/>\n                                    <hr/>\n                                    <div className=\"row\">\n                                        <h4>Initial HIV Test 2:</h4>\n                                        <div className=\"form-group mb-3 col-md-5\">\n                                            <FormGroup>\n                                            <Label for=\"\"> Date </Label>\n                                            <Input\n                                                type=\"date\"\n                                                name=\"date2\"\n                                                id=\"date2\"\n                                                value={initialTest12.date2}\n                                                onChange={handleInputChangeInitial2}\n                                                min={confirmatoryTest.date}\n                                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                                required\n                                            />\n                                            {errors.date2 !==\"\" ? (\n                                                <span className={classes.error}>{errors.date2}</span>\n                                            ) : \"\" }\n                                            </FormGroup>\n                                        </div>\n\n                                        <div className=\"form-group  col-md-5\">\n                                            <FormGroup>\n                                                <Label>Result  </Label>\n                                                <select\n                                                    className=\"form-control\"\n                                                    name=\"result2\"\n                                                    id=\"result2\"\n                                                    value={initialTest12.result2}\n                                                    onChange={handleInputChangeInitial2}\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                    disabled={initialTest12.date2===''? true : false}\n                                                >\n                                                    <option value={\"\"}></option>\n                                                    <option value=\"Yes\">Reactive</option>\n                                                    <option value=\"No\">Non Reactive</option>\n                                                    \n                                                </select>\n                                                {errors.result2 !==\"\" ? (\n                                                <span className={classes.error}>{errors.result2}</span>\n                                            ) : \"\" }\n                                            </FormGroup>\n                                        </div>\n                                   \n                                        <div className=\"form-group  col-md-2\"></div>\n                                        {initialTest12.result2 ==='Yes' && (\n                                        <>\n                                        <h4>Confirmatory Test 2:</h4>\n                                        <div className=\"form-group mb-3 col-md-5\">\n                                            <FormGroup>\n                                            <Label for=\"\"> Date  </Label>\n                                            <Input\n                                                type=\"date\"\n                                                name=\"date2\"\n                                                id=\"date2\"\n                                                value={confirmatoryTest2.date2}\n                                                onChange={handleInputChangeConfirmatory2}\n                                                min={initialTest12.date2}\n                                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                                required\n                                            />\n                                           \n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group  col-md-5\">\n                                            <FormGroup>\n                                                <Label>Result </Label>\n                                                <select\n                                                    className=\"form-control\"\n                                                    name=\"result2\"\n                                                    id=\"result2\"\n                                                    value={confirmatoryTest2.result2}\n                                                    onChange={handleInputChangeConfirmatory2}\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                    disabled={confirmatoryTest2.date2===''? true : false}\n                                                >\n                                                    <option value={\"\"}></option>\n                                                    <option value=\"Yes\">Reactive</option>\n                                                    <option value=\"No\">Non Reactive</option>\n                                                    \n                                                </select>\n                                                \n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group  col-md-2\"></div>\n                                        </>\n                                        )}\n                                        {confirmatoryTest2.result2 ==='No' && (\n                                        <>\n                                        <h4>Tie Breaker Test 2:</h4>\n                                        <div className=\"form-group mb-3 col-md-5\">\n                                            <FormGroup>\n                                            <Label for=\"\"> Date  </Label>\n                                            <Input\n                                                type=\"date\"\n                                                name=\"date2\"\n                                                id=\"date2\"\n                                                value={tieBreakerTest2.date2}\n                                                onChange={handleInputChangeTie2}\n                                                min={confirmatoryTest2.date2}\n                                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                                required\n                                            />\n                                        \n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group  col-md-5\">\n                                            <FormGroup>\n                                                <Label>Result </Label>\n                                                <select\n                                                    className=\"form-control\"\n                                                    name=\"result2\"\n                                                    id=\"result2\"\n                                                    value={tieBreakerTest2.result2}\n                                                    onChange={handleInputChangeTie2}\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                    disabled={tieBreakerTest2.date2===''?true : false}\n                                                >\n                                                    <option value={\"\"}></option>\n                                                    <option value=\"Yes\">Reactive</option>\n                                                    <option value=\"No\">Non Reactive</option>\n                                                    \n                                                </select>\n                                                \n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group  col-md-2\"></div>\n            \n                                        </>)}\n                                    </div>\n                                    </>\n                                )}\n                                {/* This is result for Test 1 */}\n                                {/* {(initialTest1.result==='Yes' && confirmatoryTest.result==='No' && tieBreakerTest.result==='' ) && (\n                                    <LabelRibbon color=\"green\" >\n                                        Negative\n                                    </LabelRibbon>\n                                )} */}\n                                {(confirmatoryTest.result==='No' && tieBreakerTest.result==='Yes' ) && (<>\n                                    <LabelRibbon color=\"red\" >\n                                        Positive\n                                    </LabelRibbon>\n                                    <br/>\n                                    <hr/>\n                                   \n                                    <div className=\"row\">\n                                        <h4>Initial HIV Test 2:</h4>\n                                        <div className=\"form-group mb-3 col-md-5\">\n                                            <FormGroup>\n                                            <Label for=\"\"> Date  </Label>\n                                            <Input\n                                                type=\"date\"\n                                                name=\"date2\"\n                                                id=\"date2\"\n                                                value={initialTest12.date2}\n                                                onChange={handleInputChangeInitial2}\n                                                min={ tieBreakerTest.date}\n                                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                                required\n                                            />\n                                            {errors.date2 !==\"\" ? (\n                                                <span className={classes.error}>{errors.date2}</span>\n                                            ) : \"\" }\n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group  col-md-5\">\n                                            <FormGroup>\n                                                <Label>Result  </Label>\n                                                <select\n                                                    className=\"form-control\"\n                                                    name=\"result2\"\n                                                    id=\"result2\"\n                                                    value={initialTest12.result2}\n                                                    onChange={handleInputChangeInitial2}\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                    disabled={initialTest12.date2===''?true : false}\n                                                >\n                                                    <option value={\"\"}></option>\n                                                    <option value=\"Yes\">Reactive</option>\n                                                    <option value=\"No\">Non Reactive</option>\n                                                    \n                                                </select>\n                                                {errors.result2 !==\"\" ? (\n                                                <span className={classes.error}>{errors.result2}</span>\n                                            ) : \"\" }\n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group  col-md-2\"></div>\n                                        {initialTest12.result2 ==='Yes' && (\n                                        <>\n                                        <h4>Confirmatory Test 2:</h4>\n                                        <div className=\"form-group mb-3 col-md-5\">\n                                            <FormGroup>\n                                            <Label for=\"\"> Date  </Label>\n                                            <Input\n                                                type=\"date\"\n                                                name=\"date2\"\n                                                id=\"date2\"\n                                                value={confirmatoryTest2.date2}\n                                                onChange={handleInputChangeConfirmatory2}\n                                                min={initialTest12.date2}\n                                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                                required\n                                            />\n                                           \n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group  col-md-5\">\n                                            <FormGroup>\n                                                <Label>Result </Label>\n                                                <select\n                                                    className=\"form-control\"\n                                                    name=\"result2\"\n                                                    id=\"result2\"\n                                                    value={confirmatoryTest2.result2}\n                                                    onChange={handleInputChangeConfirmatory2}\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                    disabled={confirmatoryTest2.date2===''?true : false}\n                                                >\n                                                    <option value={\"\"}></option>\n                                                    <option value=\"Yes\">Reactive</option>\n                                                    <option value=\"No\">Non Reactive</option>\n                                                    \n                                                </select>\n                                                \n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group  col-md-2\"></div>\n                                        </>\n                                        )}\n                                        {confirmatoryTest2.result2 ==='No' && (\n                                        <>\n                                        <h4>Tie Breaker Test 2:</h4>\n                                        <div className=\"form-group mb-3 col-md-5\">\n                                            <FormGroup>\n                                            <Label for=\"\"> Date  </Label>\n                                            <Input\n                                                type=\"date\"\n                                                name=\"date2\"\n                                                id=\"date2\"\n                                                value={tieBreakerTest2.date2}\n                                                onChange={handleInputChangeTie2}\n                                                min={confirmatoryTest2.date2}\n                                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                                required\n                                            />\n                                        \n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group  col-md-5\">\n                                            <FormGroup>\n                                                <Label>Result </Label>\n                                                <select\n                                                    className=\"form-control\"\n                                                    name=\"result2\"\n                                                    id=\"result2\"\n                                                    value={tieBreakerTest2.result2}\n                                                    onChange={handleInputChangeTie2}\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                    disabled={tieBreakerTest2.date2===''?true : false}\n                                                >\n                                                    <option value={\"\"}></option>\n                                                    <option value=\"Yes\">Reactive</option>\n                                                    <option value=\"No\">Non Reactive</option>\n                                                    \n                                                </select>\n                                                \n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group  col-md-2\"></div>\n            \n                                        </>)}\n                                    </div>\n                                    </>\n                                )}\n                                {(confirmatoryTest.result==='No' && tieBreakerTest.result==='No' && (initialTest1.result==='Yes' || initialTest1.result==='Yes' || initialTest1.result==='')) && (\n                                    <LabelRibbon color=\"green\" >\n                                        Negative\n                                    </LabelRibbon>\n                                )}\n                                 {/* END of  result for Test 1 */}\n                                {/* This is result for Test 2 */}\n                                {initialTest12.result2 && initialTest12.result2==='No' &&  (\n                                    <LabelRibbon color=\"green\" >\n                                        Negative\n                                    </LabelRibbon>\n                                )} \n                                {initialTest12.result2==='No' && confirmatoryTest2.result2==='No'  && (\n                                    <LabelRibbon color=\"green\" >\n                                        Negative\n                                    </LabelRibbon>\n                                )}\n                                \n                                {(initialTest12.result2==='Yes' && confirmatoryTest2.result2==='Yes' ) && (\n                                    <>\n                                    <LabelRibbon color=\"red\" >\n                                        Positive\n                                    </LabelRibbon>\n                                    <br/>\n                                    </>\n                                )}\n                                {/* {(initialTest12.result2==='Yes' && confirmatoryTest2.result2==='No' && tieBreakerTest2.result2==='' ) && (\n                                    <LabelRibbon color=\"green\" >\n                                        Negative\n                                    </LabelRibbon>\n                                )} */}\n                                {(confirmatoryTest2.result2==='No' && tieBreakerTest2.result2==='Yes' ) && (\n                                    <LabelRibbon color=\"red\" >\n                                        Positive\n                                    </LabelRibbon>\n                                )}\n                                {(confirmatoryTest2.result2==='No' && tieBreakerTest2.result2==='No' && (initialTest12.result2==='Yes' || initialTest12.result2==='Yes' || initialTest12.result2==='')) && (\n                                    <LabelRibbon color=\"green\" >\n                                        Negative\n                                    </LabelRibbon>\n                                )}\n                                \n                                 {/* END of  result for Test 2*/}\n                            </div>\n                            </div>\n                            {showCD4Count && (<>\n                            <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\n                                <h5 style={{color:'#fff'}}>CD4 Count</h5>\n                            </LabelRibbon>\n                            <br/> <br/>\n                            <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                    <Label>CD4 Count </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"cd4Count\"\n                                        id=\"cd4Count\"\n                                        value={cd4Count.cd4Count}\n                                        onChange={handleInputChangeCd4Count}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Semi-Quantitative\">Semi-Quantitative</option>\n                                        <option value=\"Flow Cyteometry\">Flow Cyteometry</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            {cd4Count.cd4Count ==='Semi-Quantitative' && (\n                            <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                    <Label>CD4 Count Value</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"cd4SemiQuantitative\"\n                                        id=\"cd4SemiQuantitative\"\n                                        value={cd4Count.cd4SemiQuantitative}\n                                        onChange={handleInputChangeCd4Count}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Semi-Quantitative\">{\"<200\"}</option>\n                                        <option value=\"Flow Cyteometry\">{\">=200\"}</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            )}\n                            {cd4Count.cd4Count ==='Flow Cyteometry' && (\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">CD4 Count Value</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"cd4FlowCyteometry\"\n                                    id=\"cd4FlowCyteometry\"\n                                    value={cd4Count.cd4FlowCyteometry}\n                                    onChange={handleInputChangeCd4Count}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                    \n                                />\n                                 \n                                </FormGroup>\n                            </div>\n                            )}\n                            <div className=\"form-group  col-md-7\"></div>\n                           \n                            </>)}\n                            <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\n                            <h5 style={{color:'#fff'}}>Syphilis Testing</h5>\n                        </LabelRibbon>\n                        <br/> <br/>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Syphilis test result *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"syphilisTestResult\"\n                                        id=\"syphilisTestResult\"\n                                        value={syphills.syphilisTestResult}\n                                        onChange={handleInputChangeSyphills}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Reactive</option>\n                                        <option value=\"No\">Non-Reactive</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n \n                            <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\n                            <h5 style={{color:'#fff'}}>Hepatitis Testing</h5>\n                            </LabelRibbon>\n                            <br/> <br/>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Hepatitis B virus test result *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"hepatitisBTestResult\"\n                                        id=\"hepatitisBTestResult\"\n                                        value={hepatitis.hepatitisBTestResult}\n                                        onChange={handleInputChangeHepatitis}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Positive</option>\n                                        <option value=\"No\">Negative</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Hepatitis C virus test result *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"hepatitisCTestResult\"\n                                        id=\"hepatitisCTestResult\"\n                                        value={hepatitis.hepatitisCTestResult}\n                                        onChange={handleInputChangeHepatitis}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                       <option value={\"\"}></option>\n                                        <option value=\"Yes\">Positive</option>\n                                        <option value=\"No\">Negative</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\n                            <h5 style={{color:'#fff'}}>Others</h5>\n                            </LabelRibbon>\n                            <br/> <br/>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Longitude</Label>\n                                <Input\n                                    type=\"number\"\n                                    name=\"longitude\"\n                                    id=\"longitude\"\n                                    value={others.longitude}\n                                    onChange={handleInputChangeOthers}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                />\n                                \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Latitude</Label>\n                                <Input\n                                    type=\"number\"\n                                    name=\"latitude\"\n                                    id=\"latitude\"\n                                    value={others.latitude}\n                                    onChange={handleInputChangeOthers}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                />\n                                \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Adhoc Code</Label>\n                                <Input\n                                    type=\"number\"\n                                    name=\"adhocCode\"\n                                    id=\"adhocCode\"\n                                    value={others.adhocCode}\n                                    onChange={handleInputChangeOthers}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                />\n                                \n                                </FormGroup>\n                            </div>\n                            \n                            {saving ? <Spinner /> : \"\"}\n                            <br />\n                            <div className=\"row\">\n                            <div className=\"form-group mb-3 col-md-12\">\n                            {patientAge<=15 ? \n                            (<>\n                                <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('basic', 'basic')}/>\n                            </>)\n                            :\n                            (<>\n                                <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('pre-test-counsel', 'pre-test-counsel')}/>\n                            </>)\n                            }\n                            \n                            <Button content='Save & Continue' icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\n                            </div>\n                            </div>\n                        </div>\n                    </form>\n                </CardBody>\n            </Card>                                 \n        </>\n    );\n};\n\nexport default HivTestResult","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Elicitation\\Index.js",["618","619","620","621","622"],"import React, {useState, Fragment } from \"react\";\n\nimport { Row, Col, Card, } from \"react-bootstrap\";\nimport AddIndexContact from './AddIndexContact';\nimport IndexContactList from './IndexContactList'\nimport { FaUserPlus } from \"react-icons/fa\";\nimport { Link } from 'react-router-dom';\n//import Button from '@material-ui/core/Button';\nimport {Label as LabelRibbon, Button} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\n\n\nconst Elicitation = (props) => {\n    //console.log(props.patientObj)\n    const [activePage, setActivePage]= useState('list')\n    const handleIClickPage =(activeItem)=>{\n        setActivePage(activeItem)\n    }\n    const handleItemClick =(page, completedMenu)=>{\n        props.handleItemClick(page)\n        if(props.completed.includes(completedMenu)) {\n\n        }else{\n            props.setCompleted([...props.completed, completedMenu])\n        }\n    }\n    const handleDone=()=>{\n      props.setActivePage({...props.activePage, activePage:\"recent-history\",})\n    }\n\n  return (\n    <Fragment>  \n     \n      <Row>       \n        <Col md={12}>\n            {activePage==='list' &&\n                (\n                    <IndexContactList activePage={activePage} setActivePage={setActivePage} handleIClickPage={handleIClickPage} patientObj={props.patientObj}/>\n                )\n            }\n            {activePage==='add' && (\n                  <AddIndexContact activePage={activePage} setActivePage={setActivePage} handleIClickPage={handleIClickPage} patientObj={props.patientObj}/>        \n            )}\n            <br />\n                <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-6\">\n                <Button content='Done' icon='list' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleDone()}/>\n                \n                </div>\n                </div>\n        </Col>\n        \n      </Row>\n    </Fragment>\n  );\n};\n\nexport default Elicitation;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Elicitation\\IndexContactList.js",["623","624","625","626","627","628","629","630"],"import React, { useEffect, useState } from 'react'\nimport MaterialTable from 'material-table';\nimport axios from \"axios\";\nimport { url as baseUrl, token } from \"./../../../../api\";\n//import { token as token } from \"./../../../api\";\nimport { forwardRef } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport { makeStyles } from '@material-ui/core/styles'\n//import { useHistory } from \"react-router-dom\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport \"@reach/menu-button/styles.css\";\nimport { Dropdown,Button, Menu, Icon } from 'semantic-ui-react'\nimport moment from \"moment\";\n\nconst tableIcons = {\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    },\n    error: {\n        color: \"#f85032\",\n        fontSize: \"11px\",\n    },\n    success: {\n        color: \"#4BB543 \",\n        fontSize: \"11px\",\n    }, \n}))\n\n\n\nconst PatientnHistory = (props) => {\n\n    const [indexClientList, setIndexClientList] = useState([])\n    //const [patientObj, setpatientObj] = useState([])\n    const patientId = props.patientObj && props.patientObj.id ? props.patientObj.id: null\n    //const [key, setKey] = useState('home');\n    //console.log(props)\n    useEffect(() => {\n        patients()\n      }, []);\n    ///GET LIST OF Patients\n    async function patients() {\n        axios\n            .get(`${baseUrl}hts/${props.patientObj.id}/index-elicitation`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                console.log(response.data)\n                setIndexClientList(response.data);\n            })\n            .catch((error) => {    \n            });        \n    }\n    const handleItemClickPage =(page)=>{\n        props.handleIClickPage(page)\n    }\n    const handleIEditIndex =(page, activePage)=> {\n        console.log(page)\n        console.log(activePage)\n        //props.setActivePage({...props.activePage, activePage:\"activePage\", activeObject:row, actionType:actionType})\n        //props.handleIClickPage(page)\n    }\n\n    const calculate_age = dob => {\n        var today = new Date();\n        var dateParts = dob.split(\"-\");\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n        var age_now = today.getFullYear() - birthDate.getFullYear();\n        var m = today.getMonth() - birthDate.getMonth();\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n                    age_now--;\n                }\n            if (age_now === 0) {\n                    return m + \" month(s)\";\n                }\n                return age_now + \" year(s)\";\n      };\n\n\n  return (\n    <div>     \n        <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className=\" float-end  mr-2 mt-2\"\n            onClick={()=>handleItemClickPage('add')}\n            //startIcon={<FaUserPlus size=\"10\"/>}\n        >\n            <span style={{ textTransform: \"capitalize\" }}>New Index Client </span>\n        </Button>\n        <br/><br/><br/><br/>\n            <MaterialTable\n            icons={tableIcons}\n              title=\"List of index client \"\n              columns={[\n              { title: \"Name\", field: \"name\" },\n              { title: \"Age\", field: \"age\" },\n              { title: \"Phone Number\", field: \"phone\" },  \n              {title: \"Adress\",field: \"address\",},   \n              { title: \"Actions\", field: \"actions\", filtering: false }, \n              ]}\n              data={ indexClientList.map((row) => ({\n                name: row.firstName + \" \" + row.lastName,\n                age:calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\n                phone:row.phoneNumber, \n                address:row.address,  \n                actions:(\n                        <>\n                        {/* <Menu.Menu position='right'  >\n                            <Menu.Item >\n                                <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\n                                <Dropdown item text='Action'>\n\n                                <Dropdown.Menu style={{ marginTop:\"10px\", }}>\n                                \n                                <Dropdown.Item  \n                                //onClick={()=>handleIEditIndex(row, 'update')}\n                                >\n                                    <Icon name='edit' />Edit</Dropdown.Item>\n                                <Dropdown.Item  \n                                //onClick={()=>LoadDeletePage(row, 'delete')}\n                                > <Icon name='trash' /> Delete</Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                                </Button>\n                            </Menu.Item>\n                        </Menu.Menu> */}\n                        </>\n                        )\n                    }))}\n            \n                        options={{\n                          headerStyle: {\n                              //backgroundColor: \"#9F9FA5\",\n                              color: \"#000\",\n                          },\n                          searchFieldStyle: {\n                              width : '200%',\n                              margingLeft: '250px',\n                          },\n                          filtering: false,\n                          exportButton: false,\n                          searchFieldAlignment: 'left',\n                          pageSizeOptions:[10,20,100],\n                          pageSize:10,\n                          debounceInterval: 400\n                      }}\n            />\n\n    </div>\n  );\n}\n\nexport default PatientnHistory;\n\n\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Elicitation\\AddIndexContact.js",["631","632","633","634","635","636","637","638","639","640"],"import React, {useCallback, useEffect, useState} from \"react\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\nimport * as moment from 'moment';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport {token, url as baseUrl } from \"../../../../api\";\nimport { toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\n// import {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport {Button} from 'semantic-ui-react'\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from 'react-phone-input-2'\nimport 'react-phone-input-2/lib/style.css'\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        }\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst AddIndexContact = (props) => {\n    const classes = useStyles();\n    const [saving, setSaving] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [sexs, setSexs] = useState([])\n    const [notificationContact, setNotificationContact] = useState([])\n    const [ageDisabled, setAgeDisabled] = useState(true);\n    const [indexTesting, setIndexTesting]= useState([]);\n    const [consent, setConsent]= useState([]);\n    const [hivTestDate, setHivTestDate] = useState(\"\");\n   \n    const [objValuesIndex, setObjValuesIndex]= useState( {\n        htsClientId: null,\n        indexNotificationServicesElicitation: {},\n        personId: null\n      })\n   \n    const [objValues, setObjValues]= useState(\n        {\n            firstName: \"\",\n            middleName: \"\",\n            lastName:\"\",\n            dob:\"\",\n            phoneNumber:\"\",\n            altPhoneNumber: \"\",\n            sex: \"\",\n            htsClientId:props  && props.patientObj ? props.patientObj.id : \"\",\n            physicalHurt: \"\",\n            threatenToHurt: \"\",\n            address: \"\", \n            hangOutSpots: \"\",\n            relativeToIndexClient: \"\",\n            currentlyLiveWithPartner: \"\", \n            partnerTestedPositive: \"\",\n            sexuallyUncomfortable: \"\", \n            notificationMethod : \"\",\n            datePartnerCameForTesting: \"\",\n        }\n    )\n           \n    useEffect(() => { \n        Sex();\n        NotificationContact();\n        IndexTesting();\n        Consent();\n        if(props.patientObj){\n\n            if(props.patientObj.dateVisit && props.patientObj.dateVisit!=='' ){\n                setHivTestDate(props.patientObj.dateVisit)\n            }else{\n                setHivTestDate(\"\")\n            }\n        }\n    }, [props.patientObj]);\n\n    //Get list of Genders from \n    const Sex =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/SEX`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            //console.log(response.data);\n            setSexs(response.data);\n\n        })\n        .catch((error) => {\n        //console.log(error);\n        });        \n    }\n    //Get list of IndexTesting\n    const IndexTesting =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/INDEX_TESTING`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            setIndexTesting(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    ///CONSENT\tYes\t\ten\tCONSENT\n    const Consent =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/CONSENT`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            setConsent(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    const NotificationContact =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/NOTIFICATION_CONTACT`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            //console.log(response.data);\n            setNotificationContact(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });        \n    }\n    const handleItemClick =(page, completedMenu)=>{\n        props.handleItemClick(page)\n        if(props.completed.includes(completedMenu)) {\n\n        }else{\n            props.setCompleted([...props.completed, completedMenu])\n        }\n        \n    }\n    const handleItemClickPage =(page)=>{\n        props.handleIClickPage(page)\n    }\n    const handleInputChange = e => { \n        //setErrors({...temp, [e.target.name]:\"\"})\n        if(e.target.name==='firstName' && e.target.value!==''){\n            const name = alphabetOnly(e.target.value)\n            setObjValues ({...objValues,  [e.target.name]: name});\n        }\n        if(e.target.name==='lastName' && e.target.value!==''){\n            const name = alphabetOnly(e.target.value)\n            setObjValues ({...objValues,  [e.target.name]: name});\n        }\n        if(e.target.name==='middleName' && e.target.value!==''){\n            const name = alphabetOnly(e.target.value)\n            setObjValues ({...objValues,  [e.target.name]: name});\n        } \n        // if((e.target.name !=='maritalStatusId' && e.target.value!=='5' )){//logic for marital status\n        //     setHideNumChild(true)\n        // }else{\n        //     setHideNumChild(false)\n        // }         \n        setObjValues ({...objValues,  [e.target.name]: e.target.value});            \n    }\n    //Date of Birth and Age handle \n    const handleDobChange = (e) => {\n        if (e.target.value) {\n            const today = new Date();\n            const birthDate = new Date(e.target.value);\n            let age_now = today.getFullYear() - birthDate.getFullYear();\n            const m = today.getMonth() - birthDate.getMonth();\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n                age_now--;\n            }\n            objValues.age=age_now\n            \n            //setBasicInfo({...basicInfo, age: age_now});        \n        } else {\n            setObjValues({...objValues, age:  \"\"});\n        }\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\n   \n        setObjValues({...objValues, dob: e.target.value});\n        \n    }\n    const handleDateOfBirthChange = (e) => {\n        if (e.target.value == \"Actual\") {\n            objValues.isDateOfBirthEstimated=false\n            setAgeDisabled(true);\n        } else if (e.target.value == \"Estimated\") {\n            objValues.isDateOfBirthEstimated=true\n            setAgeDisabled(false);\n        }\n    }\n    const handleAgeChange = (e) => {\n        if (!ageDisabled && e.target.value) {\n            const currentDate = new Date();\n            currentDate.setDate(15);\n            currentDate.setMonth(5);\n            const estDob = moment(currentDate.toISOString());\n            const dobNew = estDob.add((e.target.value * -1), 'years');\n            setObjValues({...objValues, dob: moment(dobNew).format(\"YYYY-MM-DD\")});\n            objValues.dob =moment(dobNew).format(\"YYYY-MM-DD\")\n\n        }\n        setObjValues({...objValues, age: e.target.value});\n    }\n    //End of Date of Birth and Age handling \n    const checkPhoneNumberBasic=(e, inputName)=>{\n        const limit = 10;\n        setObjValues({...objValues,  [inputName]: e.slice(0, limit)});     \n    }\n    const alphabetOnly=(value)=>{\n        const result = value.replace(/[^a-z]/gi, '');\n        return result\n    }\n    const handleSubmit =(e)=>{\n        e.preventDefault();     \n        objValues.isDateOfBirthEstimated=objValues.isDateOfBirthEstimated==true ? 1 : 0\n            axios.post(`${baseUrl}index-elicitation`,objValues,\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\n            \n            )\n            .then(response => {\n                setSaving(false);\n                toast.success(\"Record save successful\",  {position: toast.POSITION.BOTTOM_CENTER});\n                handleItemClickPage('list')\n\n            })\n            .catch(error => {\n                setSaving(false);\n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage,  {position: toast.POSITION.BOTTOM_CENTER});\n                }\n                else{\n                    toast.error(\"Something went wrong. Please try again...\",  {position: toast.POSITION.BOTTOM_CENTER});\n                }\n            });\n            \n    }\n\n    return (\n        <>\n            <Card className={classes.root}>\n                <CardBody>\n                \n                <h2 style={{color:'#000'}}>Index Notification Services - Elicitation \n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className=\" float-end  mr-2 mt-2\"\n                    onClick={()=>handleItemClickPage('list')}\n                    //startIcon={<FaUserPlus size=\"10\"/>}\n                >\n                    <span style={{ textTransform: \"capitalize\" }}> Back To Client Index List</span>\n                </Button>\n                </h2>\n                <br/><br/>    \n                    <form >\n                        <div className=\"row\">\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">First Name</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"firstName\"\n                                    id=\"firstName\"\n                                    value={objValues.firstName}\n                                    onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                />\n                                \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Middle Name</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"middleName\"\n                                    id=\"middleName\"\n                                    value={objValues.middleName}\n                                    onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                    \n                                />\n                                \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Last Name</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"lastName\"\n                                    id=\"lastName\"\n                                    value={objValues.lastName}\n                                    onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                />\n                                \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-2 col-md-2\">\n                                <FormGroup>\n                                    <Label>Date Of Birth</Label>\n                                    <div className=\"radio\">\n                                        <label>\n                                            <input\n                                                type=\"radio\"\n                                                value=\"Actual\"\n                                                name=\"dateOfBirth\"\n                                                defaultChecked\n                                                \n                                                onChange={(e) => handleDateOfBirthChange(e)}\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                            /> Actual\n                                        </label>\n                                    </div>\n                                    <div className=\"radio\">\n                                        <label>\n                                            <input\n                                                type=\"radio\"\n                                                value=\"Estimated\"\n                                                name=\"dateOfBirth\"\n                                                \n                                                onChange={(e) => handleDateOfBirthChange(e)}\n                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                            /> Estimated\n                                        </label>\n                                    </div>\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                    <Label>Date</Label>\n                                    <input\n                                        className=\"form-control\"\n                                        type=\"date\"\n                                        name=\"dob\"\n                                        id=\"dob\"\n                                        max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                        value={objValues.dob}\n                                        onChange={handleDobChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    />\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                    <Label>Age</Label>\n                                    <input\n                                        className=\"form-control\"\n                                        type=\"number\"\n                                        name=\"age\"\n                                        id=\"age\"\n                                        value={objValues.age}\n                                        disabled={ageDisabled}\n                                        onChange={handleAgeChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    />\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Phone Number</Label>\n                                \n                                    <PhoneInput\n                                        containerStyle={{width:'100%',border: \"1px solid #014D88\"}}\n                                        inputStyle={{width:'100%',borderRadius:'0px'}}\n                                        country={'ng'}\n                                        placeholder=\"(234)7099999999\"\n                                        minLength={10}\n                                        name=\"phoneNumber\"\n                                        id=\"phoneNumber\"\n                                        masks={{ng: '...-...-....', at: '(....) ...-....'}}\n                                        value={objValues.phoneNumber}\n                                        onChange={(e)=>{checkPhoneNumberBasic(e,'phoneNumber')}}\n                                        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\n                                    />\n                                    {errors.phoneNumber !==\"\" ? (\n                                        <span className={classes.error}>{errors.phoneNumber}</span>\n                                        ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            \n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Alternative Phone Number</Label>\n                                <PhoneInput\n                                        containerStyle={{width:'100%',border: \"1px solid #014D88\"}}\n                                        inputStyle={{width:'100%',borderRadius:'0px'}}\n                                        country={'ng'}\n                                        placeholder=\"(234)7099999999\"\n                                        minLength={10}\n                                        name=\"altPhoneNumber\"\n                                        id=\"altPhoneNumber\"\n                                        masks={{ng: '...-...-....', at: '(....) ...-....'}}\n                                        value={objValues.altPhoneNumber}\n                                        onChange={(e)=>{checkPhoneNumberBasic(e,'altPhoneNumber')}}\n                                        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\n                                    />\n                                \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Sex *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"sex\"\n                                        id=\"sex\"\n                                        value={objValues.sex}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        {sexs.map((value) => (\n                                            <option key={value.id} value={value.id}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>                           \n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Address</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"address\"\n                                    id=\"address\"\n                                    value={objValues.address}\n                                    onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                                   \n                                />                                \n                                </FormGroup>\n                            </div> \n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Hang-out spots</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"hangOutSpots\"\n                                    id=\"hangOutSpots\"\n                                    value={objValues.hangOutSpots}\n                                    onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}                                   \n                                />                                \n                                </FormGroup>\n                            </div>\n\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Relationship to Index Client *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"relativeToIndexClient\"\n                                        id=\"relativeToIndexClient\"\n                                        value={objValues.relativeToIndexClient}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        {indexTesting.map((value) => (\n                                            <option key={value.id} value={value.id}>\n                                                {value.display}\n                                            </option>\n                                            ))}\n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Do you currently live with this partner? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"currentlyLiveWithPartner\"\n                                        id=\"currentlyLiveWithPartner\"\n                                        value={objValues.currentlyLiveWithPartner}\n                                        onChange={handleInputChange}        \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value={\"true\"}>Yes</option>\n                                        <option value={\"false\"}>No</option>\n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>As far as you know, as this partner ever tested positive for HIV *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"partnerTestedPositive\"\n                                        id=\"partnerTestedPositive\"\n                                        value={objValues.partnerTestedPositive}\n                                        onChange={handleInputChange} \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        {consent.map((value) => (\n                                            <option key={value.id} value={value.id}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Has this partner ever hit, kick, slapped or otherwise physical hurt you? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"physicalHurt\"\n                                        id=\"physicalHurt\"\n                                        value={objValues.physicalHurt}\n                                        onChange={handleInputChange} \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                         <option value={\"\"}></option>\n                                        {consent.map((value) => (\n                                            <option key={value.id} value={value.id}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Has this partner ever threaten to hurt you? *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"threatenToHurt\"\n                                        id=\"threatenToHurt\"\n                                        value={objValues.threatenToHurt}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        {consent.map((value) => (\n                                            <option key={value.id} value={value.id}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                           \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Has this partner ever threaten force you to do something sexually that made you uncomfortable ?  *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"sexuallyUncomfortable\"\n                                        id=\"sexuallyUncomfortable\"\n                                        value={objValues.sexuallyUncomfortable}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                         <option value={\"\"}></option>\n                                        {consent.map((value) => (\n                                            <option key={value.id} value={value.id}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                    </select>\n                                    \n                                </FormGroup>\n                            </div> \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Notification Method selected*</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"notificationMethod\"\n                                        id=\"notificationMethod\"\n                                        value={objValues.notificationMethod}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        {notificationContact.map((value) => (\n                                            <option key={value.id} value={value.id}>\n                                                {value.display}\n                                            </option>\n                                        ))}\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">If contract by which date will partner come for testing?</Label>\n                                <Input\n                                    type=\"date\"\n                                    name=\"datePartnerCameForTesting\"\n                                    id=\"datePartnerCameForTesting\"\n                                    value={objValues.datePartnerCameForTesting}\n                                    onChange={handleInputChange}\n                                    min={hivTestDate}\n                                    //max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                    \n                                />\n                                {errors.datePartnerComeForTesting !==\"\" ? (\n                                    <span className={classes.error}>{errors.datePartnerComeForTesting}</span>\n                                ) : \"\" }\n                                </FormGroup>\n                            </div>\n                           \n                            {saving ? <Spinner /> : \"\"}\n                            <br />\n                            <div className=\"row\">\n                            <div className=\"form-group mb-3 col-md-6\">\n                           \n                            <Button content='Save' icon='save' labelPosition='left' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit}/>\n                            </div>\n                            </div>\n                        </div>\n                    </form>\n                </CardBody>\n            </Card>                                 \n        </>\n    );\n};\n\nexport default AddIndexContact","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Consultation\\InfantVisit.js",["641","642","643"],"import React, { useState, useEffect } from \"react\";\nimport { Grid, Segment, Label, List } from \"semantic-ui-react\";\n// Page titie\nimport {\n  FormGroup,\n  Label as FormLabelName,\n  Input,\n  InputGroup,\n  InputGroupText,\n} from \"reactstrap\";\nimport { url as baseUrl, token } from \"../../../api\";\nimport MatButton from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { toast } from \"react-toastify\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst ClinicVisit = (props) => {\n  let patientObj = props.patientObj ? props.patientObj : {};\n  //console.log(patientObj.pmtctEnrollmentRespondDto.pmtctEnrollmentDate)\n  const [errors, setErrors] = useState({});\n  const [infantHospitalNumber, setInfantHospitalNumber] = useState();\n  let temp = { ...errors };\n  const classes = useStyles();\n  const [saving, setSaving] = useState(false);\n  const [infants, setInfants] = useState([]);\n  const [formFilter, setFormFilter] = useState({\n    infantArv: false,\n    motherArt: false,\n    outCome: false,\n  });\n  const [timingOfArtInitiation, setTimingOfArtInitiation] = useState([]);\n  const [childStatus, setChildStatus] = useState([]);\n  const [timeMotherArt, setTimeMotherArt] = useState([]);\n  const [regimenType, setRegimenType] = useState([]);\n  const [adultRegimenLine, setAdultRegimenLine] = useState([]);\n  const [infantArv, setInfantArv] = useState([]);\n  const [agectx, setAgeCTX] = useState([]);\n  const [pcrResult, setPcrResult] = useState([]);\n  const [infantOutcome, setInfantOutcome] = useState([]);\n  const [disabledField, setDisabledField] = useState(false);\n  const [objValues, setObjValues] = useState({\n    infantVisitRequestDto: \"\",\n    infantArvDto: \"\",\n    infantMotherArtDto: \"\",\n    infantPCRTestDto: \"\",\n  });\n  const [infantVisitRequestDto, setInfantVisitRequestDto] = useState({\n    ageAtCtx: \"\",\n    ancNumber: props.patientObj.ancNo,\n    bodyWeight: \"\",\n    breastFeeding: \"\",\n    ctxStatus: \"\",\n    infantHospitalNumber: \"\",\n    uuid: \"\",\n    visitDate: \"\",\n    visitStatus: \"\",\n    infantOutcomeAt18Months: \"\",\n  });\n  const [infantArvDto, setInfantArvDto] = useState({\n    ageAtCtx: \"\",\n    ancNumber: props.patientObj.ancNo,\n    arvDeliveryPoint: \"\",\n    infantArvTime: \"\",\n    infantArvType: \"\",\n    infantHospitalNumber: infantHospitalNumber,\n  });\n  const [infantMotherArtDto, setInfantMotherArtDto] = useState({\n    ancNumber: props.patientObj.ancNo,\n    motherArtInitiationTime: \"\",\n    motherArtRegimen: \"\",\n    regimenTypeId: \"\",\n    regimenId: \"\",\n  });\n  const [infantPCRTestDto, setInfantPCRTestDto] = useState({\n    ageAtTest: \"\",\n    ancNumber: props.patientObj.ancNo,\n    dateResultReceivedAtFacility: \"\",\n    dateResultReceivedByCaregiver: \"\",\n    dateSampleCollected: \"\",\n    dateSampleSent: \"\",\n    infantHospitalNumber: infantHospitalNumber,\n    results: \"\",\n    testType: \"\",\n  });\n  //Vital signs clinical decision support\n  const [vitalClinicalSupport, setVitalClinicalSupport] = useState({\n    bodyWeight: \"\",\n  });\n\n  useEffect(() => {\n    InfantInfo();\n    TIME_ART_INITIATION_PMTCT();\n    CHILD_FOLLOW_UP_VISIT_STATUS();\n    TIMING_MOTHERS_ART_INITIATION();\n    AdultRegimenLine();\n    AGE_CTX_INITIATION();\n    INFANT_ARV_PROPHYLAXIS_TYPE();\n    INFANT_PCR_RESULT();\n    INFANT_OUTCOME_AT_18_MONTHS();\n    if (\n      props.activeContent.id &&\n      props.activeContent.id !== \"\" &&\n      props.activeContent.id !== null\n    ) {\n      GetVisit(props.activeContent.id);\n      setDisabledField(\n        props.activeContent.actionType === \"view\" ? true : false\n      );\n    }\n  }, [props.patientObj.ancNo, props.activeContent]);\n  //GEt visit information\n  const GetVisit = (id) => {\n    axios\n      .get(`${baseUrl}pmtct/anc/view-infantvisit/${props.activeContent.id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setObjValues(response.data);\n        setInfantVisitRequestDto({ ...response.data.infantVisitRequestDto });\n        setInfantArvDto({ ...response.data.infantArvDto });\n        setInfantMotherArtDto({ ...response.data.infantMotherArtDto });\n        setInfantPCRTestDto({ ...response.data.infantPCRTestDto });\n        GetInfantDetail2({ ...response.data.infantVisitRequestDto });\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //This is to get infant hospital numbet when viewing or updating infant\n  const GetInfantDetail2 = (obj) => {\n    setInfantHospitalNumber(obj.infantHospitalNumber);\n    const InfantVisit = () => {\n      //setLoading(true)\n      axios\n        .get(\n          `${baseUrl}pmtct/anc/get-form-filter/${obj.infantHospitalNumber}`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        )\n        .then((response) => {\n          infantVisitRequestDto.infantHospitalNumber = obj.infantHospitalNumber;\n          setFormFilter(response.data);\n        })\n\n        .catch((error) => {\n          //console.log(error);\n        });\n    };\n    InfantVisit();\n  };\n  ///GET LIST OF Infants\n  const InfantInfo = () => {\n    //setLoading(true)\n    // if (props.patientObj.ancNo) {\n    //   axios\n    //     .get(\n    //       `${baseUrl}pmtct/anc/get-infant-by-ancno/${props.patientObj.ancNo}`,\n    //       { headers: { Authorization: `Bearer ${token}` } }\n    //     )\n    //     .then((response) => {\n    //       setInfants(response.data);\n    //     })\n\n    //     .catch((error) => {\n    //     });\n    // } else {\n    axios\n      .get(\n        `${baseUrl}pmtct/anc/get-infant-by-mother-person-uuid/${\n          props.patientObj.person_uuid\n            ? props.patientObj.person_uuid\n            : props.patientObj.personUuid\n            ? props.patientObj.personUuid\n            : props.patientObj.uuid\n        }`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n\n      .then((response) => {\n        //setLoading(false)\n        setInfants(response.data);\n      })\n\n      .catch((error) => {\n        //console.log(error);\n      });\n    // }\n  };\n  const TIME_ART_INITIATION_PMTCT = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TIME_ART_INITIATION_PMTCT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setTimingOfArtInitiation(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const INFANT_OUTCOME_AT_18_MONTHS = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INFANT_OUTCOME_AT_18_MONTHS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setInfantOutcome(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const INFANT_PCR_RESULT = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INFANT_PCR_RESULT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setPcrResult(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const INFANT_ARV_PROPHYLAXIS_TYPE = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INFANT_ARV_PROPHYLAXIS_TYPE`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setInfantArv(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const AGE_CTX_INITIATION = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/AGE_CTX_INITIATION`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setAgeCTX(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const TIMING_MOTHERS_ART_INITIATION = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TIMING_MOTHERS_ART_INITIATION`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setTimeMotherArt(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const CHILD_FOLLOW_UP_VISIT_STATUS = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/CHILD_FOLLOW_UP_VISIT_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setChildStatus(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputValueCheckweight = (e) => {\n    if (\n      e.target.name === \"bodyWeight\" &&\n      (e.target.value < 3 || e.target.value > 150)\n    ) {\n      const message =\n        \"Body weight must not be greater than 150 and less than 3\";\n      setVitalClinicalSupport({ ...vitalClinicalSupport, bodyWeight: message });\n    } else {\n      setVitalClinicalSupport({ ...vitalClinicalSupport, bodyWeight: \"\" });\n    }\n  };\n  //GET AdultRegimenLine\n  const AdultRegimenLine = () => {\n    axios\n      .get(`${baseUrl}hiv/regimen/arv/adult`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        const artRegimen = response.data.filter(\n          (x) => x.id === 1 || x.id === 2 || x.id === 14\n        );\n        setAdultRegimenLine(artRegimen);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputChangeInfantVisitRequestDto = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    //console.log(e.target.name)\n    if (e.target.name === \"visitDate\" && e.target.value !== \"\") {\n      async function getGa() {\n        const ga = e.target.value;\n        const response = await axios.get(\n          `${baseUrl}pmtct/anc/calculate-ga3?hospitalNumber=${infantHospitalNumber}&visitDate=${ga}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data >= 0) {\n          infantPCRTestDto.ageAtTest = response.data;\n          setInfantVisitRequestDto({\n            ...infantVisitRequestDto,\n            [e.target.name]: e.target.value,\n          });\n        }\n      }\n      getGa();\n    }\n    setInfantVisitRequestDto({\n      ...infantVisitRequestDto,\n      [e.target.name]: e.target.value,\n    });\n  };\n  const handleInputChangeInfantArvDto = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    //console.log(e.target.name),\n    setInfantArvDto({ ...infantArvDto, [e.target.name]: e.target.value });\n  };\n  const handleInputChangeInfantMotherArtDto = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    //console.log(e.target.name),\n    setInfantMotherArtDto({\n      ...infantMotherArtDto,\n      [e.target.name]: e.target.value,\n    });\n  };\n  const handleInputChangeInfantPCRTestDto = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    //console.log(e.target.name)infantPCRTestDto, setInfantPCRTestDto\n    setInfantPCRTestDto({\n      ...infantPCRTestDto,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  //Validations of the forms\n  const validate = () => {\n    temp.visitDate = infantVisitRequestDto.visitDate\n      ? \"\"\n      : \"This field is required\";\n    temp.bodyWeight = infantVisitRequestDto.bodyWeight\n      ? \"\"\n      : \"This field is required\";\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x === \"\");\n  };\n\n  /**** Submit Button Processing  */\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      setSaving(true);\n      objValues.infantVisitRequestDto = infantVisitRequestDto;\n      objValues.infantArvDto = infantArvDto;\n      objValues.infantMotherArtDto = infantMotherArtDto;\n      objValues.infantPCRTestDto = infantPCRTestDto;\n      if (props.activeContent && props.activeContent.actionType) {\n        //Perform operation for updation action\n        axios\n          .put(\n            `${baseUrl}pmtct/anc/update-infant-visit/${props.activeContent.id}`,\n            objValues,\n            { headers: { Authorization: `Bearer ${token}` } }\n          )\n          .then((response) => {\n            setSaving(false);\n            toast.success(\"Clinic Visit save successful\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            props.setActiveContent({\n              ...props.activeContent,\n              route: \"recent-history\",\n            });\n          })\n          .catch((error) => {\n            setSaving(false);\n            if (error.response && error.response.data) {\n              let errorMessage =\n                error.response.data.apierror &&\n                error.response.data.apierror.message !== \"\"\n                  ? error.response.data.apierror.message\n                  : \"Something went wrong, please try again\";\n              toast.error(errorMessage, {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            } else {\n              toast.error(\"Something went wrong. Please try again...\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            }\n          });\n      } else {\n        axios\n          .post(`${baseUrl}pmtct/anc/infant-visit-consolidated`, objValues, {\n            headers: { Authorization: `Bearer ${token}` },\n          })\n          .then((response) => {\n            setSaving(false);\n            toast.success(\"Clinic Visit save successful\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            props.setActiveContent({\n              ...props.activeContent,\n              route: \"recent-history\",\n            });\n          })\n          .catch((error) => {\n            setSaving(false);\n            if (error.response && error.response.data) {\n              let errorMessage =\n                error.response.data.apierror &&\n                error.response.data.apierror.message !== \"\"\n                  ? error.response.data.apierror.message\n                  : \"Something went wrong, please try again\";\n              toast.error(errorMessage, {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            } else {\n              toast.error(\"Something went wrong. Please try again...\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            }\n          });\n      }\n    }\n  };\n  const handleSelecteRegimen = (e) => {\n    let regimenID = e.target.value;\n    //regimenTypeId regimenId\n    setInfantMotherArtDto({ ...infantMotherArtDto, regimenTypeId: regimenID });\n    RegimenType(regimenID);\n    //setErrors({...temp, [e.target.name]:\"\"})\n  };\n  //Get list of RegimenLine\n  const RegimenType = (id) => {\n    axios\n      .get(`${baseUrl}hiv/regimen/types/${id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setRegimenType(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  function GetInfantDetail(obj) {\n    setInfantHospitalNumber(obj.hospitalNumber);\n    const InfantVisit = () => {\n      //setLoading(true)\n      axios\n        .get(`${baseUrl}pmtct/anc/get-form-filter/${obj.hospitalNumber}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          infantVisitRequestDto.infantHospitalNumber = obj.hospitalNumber;\n          setFormFilter(response.data);\n        })\n\n        .catch((error) => {\n          //console.log(error);\n        });\n    };\n    InfantVisit();\n  }\n\n  return (\n    <div>\n      <h2>Clinic Follow-up Visit</h2>\n      <Grid columns=\"equal\">\n        <Grid.Column>\n          <Segment>\n            <Label as=\"a\" color=\"blue\" ribbon>\n              Infant's\n            </Label>\n            <br />\n            <List celled>\n              <List.Item>\n                Given Name\n                <span className=\"float-end\">\n                  <b>Hospital Number</b>\n                </span>\n              </List.Item>\n            </List>\n\n            {infants &&\n              infants.map((row) => (\n                <List celled>\n                  <List.Item\n                    onClick={() => GetInfantDetail(row)}\n                    style={{ cursor: \"pointer\" }}\n                  >\n                    <Label as=\"a\" color=\"blue\">\n                      {row.firstName}\n                    </Label>\n                    <Label as=\"a\" color=\"teal\" className=\"float-end\" tag>\n                      {row.hospitalNumber}\n                    </Label>\n                  </List.Item>\n                </List>\n              ))}\n          </Segment>\n        </Grid.Column>\n        <Grid.Column width={12}>\n          <Segment>\n            <Label\n              as=\"a\"\n              color=\"blue\"\n              style={{ width: \"106%\", height: \"35px\" }}\n              ribbon\n            >\n              <h4 style={{ color: \"#fff\" }}>\n                Infant Clinic Visit -{\" \"}\n                {infantVisitRequestDto &&\n                infantVisitRequestDto.infantHospitalNumber\n                  ? infantVisitRequestDto.infantHospitalNumber\n                  : \" \"}\n              </h4>\n            </Label>\n            <br />\n            <br />\n            <div className=\"row\">\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <FormLabelName>\n                    Date of Visit <span style={{ color: \"red\" }}> *</span>\n                  </FormLabelName>\n                  <Input\n                    type=\"date\"\n                    name=\"visitDate\"\n                    id=\"visitDate\"\n                    value={infantVisitRequestDto.visitDate}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    onChange={handleInputChangeInfantVisitRequestDto}\n                    min={props.patientObj.firstAncDate}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    //min={patientObj.pmtctEnrollmentRespondDto.pmtctEnrollmentDate}\n                    required\n                  />\n                  {errors.visitDate !== \"\" ? (\n                    <span className={classes.error}>{errors.visitDate}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <FormLabelName>\n                    Infant Hospital Number{\" \"}\n                    <span style={{ color: \"red\" }}> *</span>\n                  </FormLabelName>\n                  <Input\n                    type=\"text\"\n                    name=\"infantHospitalNumber\"\n                    id=\"infantHospitalNumber\"\n                    value={infantVisitRequestDto.infantHospitalNumber}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    onChange={handleInputChangeInfantVisitRequestDto}\n                    disabled\n                  />\n                  {errors.infantHospitalNumber !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.infantHospitalNumber}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <FormLabelName>\n                    Mother ANC number\n                    {/* <span style={{ color: \"red\" }}> *</span> */}\n                  </FormLabelName>\n                  <Input\n                    type=\"text\"\n                    name=\"ancNumber\"\n                    id=\"ancNumber\"\n                    value={infantVisitRequestDto.ancNumber}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    onChange={handleInputChangeInfantVisitRequestDto}\n                    disabled\n                  />\n                  {errors.ancNumber !== \"\" ? (\n                    <span className={classes.error}>{errors.ancNumber}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              <div className=\" mb-3 col-md-6\">\n                <FormGroup>\n                  <FormLabelName>\n                    Body Weight <span style={{ color: \"red\" }}> *</span>\n                  </FormLabelName>\n                  <InputGroup>\n                    <Input\n                      type=\"number\"\n                      name=\"bodyWeight\"\n                      id=\"bodyWeight\"\n                      onChange={handleInputChangeInfantVisitRequestDto}\n                      min=\"1\"\n                      max=\"150\"\n                      onKeyUp={handleInputValueCheckweight}\n                      value={infantVisitRequestDto.bodyWeight}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0rem\",\n                      }}\n                      disabled={disabledField}\n                    />\n                    <InputGroupText\n                      addonType=\"append\"\n                      style={{\n                        backgroundColor: \"#014D88\",\n                        color: \"#fff\",\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0rem\",\n                      }}\n                    >\n                      kg\n                    </InputGroupText>\n                  </InputGroup>\n                  {errors.bodyWeight !== \"\" ? (\n                    <span className={classes.error}>{errors.bodyWeight}</span>\n                  ) : (\n                    \"\"\n                  )}\n                  {vitalClinicalSupport.weight !== \"\" ? (\n                    <span className={classes.error}>\n                      {vitalClinicalSupport.weight}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                  {infantVisitRequestDto.bodyWeight !== \"\" &&\n                  infantVisitRequestDto.bodyWeight <= 0 ? (\n                    <span className={classes.error}>Invalid Body Weight </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <FormLabelName>Breast Feeding ?</FormLabelName>\n                  <Input\n                    type=\"select\"\n                    name=\"breastFeeding\"\n                    id=\"breastFeeding\"\n                    value={infantVisitRequestDto.breastFeeding}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    onChange={handleInputChangeInfantVisitRequestDto}\n                    disabled={disabledField}\n                  >\n                    <option value=\"\">Select </option>\n                    <option value=\"YES\">YES </option>\n                    <option value=\"NO\">NO </option>\n                  </Input>\n                  {errors.breastFeeding !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.breastFeeding}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <FormLabelName>CTX </FormLabelName>\n                  <Input\n                    type=\"select\"\n                    name=\"ctxStatus\"\n                    id=\"ctxStatus\"\n                    value={infantVisitRequestDto.ctxStatus}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    onChange={handleInputChangeInfantVisitRequestDto}\n                    disabled={disabledField}\n                  >\n                    <option value=\"\">Select </option>\n                    <option value=\"YES\">YES </option>\n                    <option value=\"NO\">NO </option>\n                  </Input>\n                  {errors.ctxStatus !== \"\" ? (\n                    <span className={classes.error}>{errors.ctxStatus}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <FormLabelName>Visit Status</FormLabelName>\n                  <Input\n                    type=\"select\"\n                    name=\"visitStatus\"\n                    id=\"visitStatus\"\n                    value={infantVisitRequestDto.visitStatus}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    onChange={handleInputChangeInfantVisitRequestDto}\n                    disabled={disabledField}\n                  >\n                    <option value=\"\">Select </option>\n                    {childStatus.map((value, index) => (\n                      <option key={index} value={value.code}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </Input>\n                  {errors.visitStatus !== \"\" ? (\n                    <span className={classes.error}>{errors.visitStatus}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {formFilter && formFilter.outCome === true && (\n                <div className=\"form-group mb-3 col-md-6\">\n                  <FormGroup>\n                    <FormLabelName>Infant outcome at 18 months</FormLabelName>\n                    <Input\n                      type=\"select\"\n                      name=\"infantOutcomeAt18Months\"\n                      id=\"infantOutcomeAt18Months\"\n                      value={infantVisitRequestDto.infantOutcomeAt18Months}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      onChange={handleInputChangeInfantVisitRequestDto}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select </option>\n                      {infantOutcome.map((value, index) => (\n                        <option key={index} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </Input>\n                    {errors.infantOutcomeAt18Months !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.infantOutcomeAt18Months}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n            </div>\n\n            <br />\n            {formFilter && formFilter.motherArt === false && (\n              <>\n                <Label\n                  as=\"a\"\n                  color=\"teal\"\n                  style={{ width: \"106%\", height: \"35px\" }}\n                  ribbon\n                >\n                  <h4 style={{ color: \"#fff\" }}> Mother's ART </h4>\n                </Label>\n                <br />\n                <br />\n                <div className=\"row\">\n                  <div className=\" mb-3 col-md-4\">\n                    <FormGroup>\n                      <FormLabelName>\n                        Timing of mother's ART Initiation{\" \"}\n                      </FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"motherArtInitiationTime\"\n                        id=\"motherArtInitiationTime\"\n                        value={infantMotherArtDto.motherArtInitiationTime}\n                        onChange={handleInputChangeInfantMotherArtDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"select\">Select </option>\n                        {timeMotherArt.map((value, index) => (\n                          <option key={index} value={value.code}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </Input>\n                      {errors.motherArtInitiationTime !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.motherArtInitiationTime}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <FormLabelName>Original Regimen Line </FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"regimenTypeId\"\n                        id=\"regimenTypeId\"\n                        value={infantMotherArtDto.regimenTypeId}\n                        onChange={handleSelecteRegimen}\n                        required\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"\"> Select</option>\n\n                        {adultRegimenLine.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.description}\n                          </option>\n                        ))}\n                      </Input>\n                      {errors.regimenTypeId !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.regimenTypeId}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <FormLabelName>Original Regimen </FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"regimenId\"\n                        id=\"regimenId\"\n                        value={infantMotherArtDto.regimenId}\n                        onChange={handleInputChangeInfantMotherArtDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"\"> Select</option>\n                        {regimenType.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.description}\n                          </option>\n                        ))}\n                      </Input>\n                      {errors.regimenId !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.regimenId}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                </div>\n              </>\n            )}\n            <br />\n            {formFilter && formFilter.infantArv === false && (\n              <>\n                <Label\n                  as=\"a\"\n                  color=\"blue\"\n                  style={{ width: \"106%\", height: \"35px\" }}\n                  ribbon\n                >\n                  <h4 style={{ color: \"#fff\" }}> Infant ARV & CTX</h4>\n                </Label>\n                <br />\n                <br />\n                {/* LAB Screening Form */}\n                <div className=\"row\">\n                  <div className=\" mb-3 col-md-4\">\n                    <FormGroup>\n                      <FormLabelName>Age at CTX Initiation </FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"ageAtCtx\"\n                        id=\"ageAtCtx\"\n                        value={infantArvDto.ageAtCtx}\n                        onChange={handleInputChangeInfantArvDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"select\">Select </option>\n                        {agectx.map((value, index) => (\n                          <option key={index} value={value.code}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </Input>\n                      {errors.ageAtCtx !== \"\" ? (\n                        <span className={classes.error}>{errors.ageAtCtx}</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\" mb-3 col-md-4\">\n                    <FormGroup>\n                      <FormLabelName>Infant ARV Type </FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"infantArvType\"\n                        id=\"infantArvType\"\n                        value={infantArvDto.infantArvType}\n                        onChange={handleInputChangeInfantArvDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"select\">Select </option>\n                        {infantArv.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </Input>\n                      {errors.infantArvType !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.infantArvType}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\" mb-3 col-md-4\">\n                    <FormGroup>\n                      <FormLabelName> Timing of ARV Prophylaxis </FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"arvDeliveryPoint\"\n                        id=\"arvDeliveryPoint\"\n                        value={infantArvDto.arvDeliveryPoint}\n                        onChange={handleInputChangeInfantArvDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"select\">Select </option>\n                        <option value=\"Within 72 hour\">Within 72 hour </option>\n                        <option value=\"After 72 hour \">After 72 hour </option>\n                      </Input>\n                      {errors.arvDeliveryPoint !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.arvDeliveryPoint}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\" mb-3 col-md-4\">\n                    <FormGroup>\n                      <FormLabelName> Place of Delivery </FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"infantArvTime\"\n                        id=\"infantArvTime\"\n                        value={infantArvDto.infantArvTime}\n                        onChange={handleInputChangeInfantArvDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"select\">Select </option>\n                        <option value=\"Facility Delivery\">\n                          Facility Delivery\n                        </option>\n                        <option value=\"Delivered outside facility\">\n                          Delivered outside facility{\" \"}\n                        </option>\n                      </Input>\n                      {errors.infantArvTime !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.infantArvTime}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                </div>\n              </>\n            )}\n            <br />\n            <Label\n              as=\"a\"\n              color=\"black\"\n              style={{ width: \"106%\", height: \"35px\" }}\n              ribbon\n            >\n              <h4 style={{ color: \"#fff\" }}> Infant PCR </h4>\n            </Label>\n            <br />\n            <br />\n            {/* LAB Screening Form */}\n            <div className=\"row\">\n              <div className=\" mb-3 col-md-6\">\n                <FormGroup>\n                  <FormLabelName>Age at Test(months)</FormLabelName>\n                  <Input\n                    type=\"number\"\n                    name=\"ageAtTest\"\n                    id=\"ageAtTest\"\n                    value={infantPCRTestDto.ageAtTest}\n                    onChange={handleInputChangeInfantPCRTestDto}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    disabled\n                  />\n                  {errors.ageAtTest !== \"\" ? (\n                    <span className={classes.error}>{errors.ageAtTest}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\" mb-3 col-md-6\">\n                <FormGroup>\n                  <FormLabelName> Sample Type</FormLabelName>\n                  <Input\n                    type=\"select\"\n                    name=\"testType\"\n                    id=\"testType\"\n                    value={infantPCRTestDto.testType}\n                    onChange={handleInputChangeInfantPCRTestDto}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    disabled={disabledField}\n                  >\n                    <option value=\"\">Select </option>\n                    <option value=\"First PCR\">First PCR</option>\n                    <option value=\"Second PCR\">Second PCR</option>\n                    <option value=\"Confirmatory PCR\">Confirmatory PCR</option>\n                    <option value=\"First Rapid Antibody\">\n                      First Rapid Antibody{\" \"}\n                    </option>\n                    <option value=\"Second Rapid Antibody \">\n                      Second Rapid Antibody{\" \"}\n                    </option>\n                  </Input>\n                  {errors.testType !== \"\" ? (\n                    <span className={classes.error}>{errors.testType}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\" mb-3 col-md-6\">\n                <FormGroup>\n                  <FormLabelName>Date sample collected</FormLabelName>\n                  <Input\n                    type=\"date\"\n                    name=\"dateSampleCollected\"\n                    id=\"dateSampleCollected\"\n                    value={infantPCRTestDto.dateSampleCollected}\n                    onChange={handleInputChangeInfantPCRTestDto}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    min={\n                      props.patientObj &&\n                      props.patientObj.pmtctEnrollmentRespondDto\n                        ? props.patientObj.pmtctEnrollmentRespondDto\n                            .pmtctEnrollmentDate\n                        : \"\"\n                    }\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    disabled={disabledField}\n                  />\n                  {errors.dateSampleCollected !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.dateSampleCollected}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\" mb-3 col-md-6\">\n                <FormGroup>\n                  <FormLabelName>Date Result Received</FormLabelName>\n                  <Input\n                    type=\"date\"\n                    name=\"dateResultReceivedAtFacility\"\n                    id=\"dateResultReceivedAtFacility\"\n                    value={infantPCRTestDto.dateResultReceivedAtFacility}\n                    onChange={handleInputChangeInfantPCRTestDto}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    min={infantPCRTestDto.dateSampleCollected}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    disabled={disabledField}\n                  />\n                  {errors.dateResultReceivedAtFacility !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.dateResultReceivedAtFacility}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\" mb-3 col-md-6\">\n                <FormGroup>\n                  <FormLabelName>\n                    Date Result Received By Caregiver\n                  </FormLabelName>\n                  <Input\n                    type=\"date\"\n                    name=\"dateResultReceivedByCaregiver\"\n                    id=\"dateResultReceivedByCaregiver\"\n                    value={infantPCRTestDto.dateResultReceivedByCaregiver}\n                    onChange={handleInputChangeInfantPCRTestDto}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    min={infantPCRTestDto.dateSampleCollected}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    disabled={disabledField}\n                  />\n                  {errors.dateResultReceivedByCaregiver !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.dateResultReceivedByCaregiver}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\" mb-3 col-md-6\">\n                <FormGroup>\n                  <FormLabelName>Date Sample Sent</FormLabelName>\n                  <Input\n                    type=\"date\"\n                    name=\"dateSampleSent\"\n                    id=\"dateSampleSent\"\n                    value={infantPCRTestDto.dateSampleSent}\n                    onChange={handleInputChangeInfantPCRTestDto}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    min={infantPCRTestDto.dateSampleCollected}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    disabled={disabledField}\n                  />\n                  {errors.dateSampleSent !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.dateSampleSent}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\" mb-3 col-md-6\">\n                <FormGroup>\n                  <FormLabelName>Result *</FormLabelName>\n                  <Input\n                    type=\"select\"\n                    name=\"results\"\n                    id=\"results\"\n                    value={infantPCRTestDto.results}\n                    onChange={handleInputChangeInfantPCRTestDto}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    disabled={disabledField}\n                  >\n                    <option value=\"select\">Select </option>\n                    {pcrResult.map((value) => (\n                      <option key={value.id} value={value.id}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </Input>\n                  {errors.results !== \"\" ? (\n                    <span className={classes.error}>{errors.results}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n            </div>\n            <br />\n            <br />\n            {infantVisitRequestDto &&\n            infantVisitRequestDto.infantHospitalNumber ? (\n              <>\n                {props.activeContent && props.activeContent.actionType ? (\n                  <>\n                    <MatButton\n                      type=\"submit\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      hidden={disabledField}\n                      className={classes.button}\n                      startIcon={<SaveIcon />}\n                      style={{ backgroundColor: \"#014d88\" }}\n                      onClick={handleSubmit}\n                      disabled={saving}\n                    >\n                      {!saving ? (\n                        <span style={{ textTransform: \"capitalize\" }}>\n                          Update\n                        </span>\n                      ) : (\n                        <span style={{ textTransform: \"capitalize\" }}>\n                          Updating...\n                        </span>\n                      )}\n                    </MatButton>\n                  </>\n                ) : (\n                  <>\n                    <MatButton\n                      type=\"submit\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className={classes.button}\n                      startIcon={<SaveIcon />}\n                      style={{ backgroundColor: \"#014d88\" }}\n                      onClick={handleSubmit}\n                      disabled={saving}\n                    >\n                      {!saving ? (\n                        <span style={{ textTransform: \"capitalize\" }}>\n                          Save\n                        </span>\n                      ) : (\n                        <span style={{ textTransform: \"capitalize\" }}>\n                          Saving...\n                        </span>\n                      )}\n                    </MatButton>\n                  </>\n                )}\n              </>\n            ) : (\n              \"\"\n            )}\n          </Segment>\n        </Grid.Column>\n      </Grid>\n      {/* <AddVitals toggle={AddVitalToggle} showModal={addVitalModal} /> */}\n    </div>\n  );\n};\n\nexport default ClinicVisit;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-module-main\\src\\main\\webapp\\jsx\\components\\Consultation\\Home.js",["644","645","646","647","648","649","650","651","652","653","654","655","656","657","658"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Grid,\r\n  Segment,\r\n  Label,\r\n  Icon,\r\n  List,\r\n  Button,\r\n  Card,\r\n  Feed,\r\n} from \"semantic-ui-react\";\r\n// Page titie\r\nimport { FormGroup, Label as FormLabelName, Input } from \"reactstrap\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst ClinicVisit = (props) => {\r\n  let patientObj = props.patientObj ? props.patientObj : {};\r\n  const [errors, setErrors] = useState({});\r\n  const [disabledField, setDisabledField] = useState(false);\r\n  let temp = { ...errors };\r\n  const classes = useStyles();\r\n  const [saving, setSaving] = useState(false);\r\n  //const [clinicalStage, setClinicalStage] = useState([]);\r\n  const [dsdModelType, setDsdModelType] = useState([]);\r\n  // const [currentVitalSigns, setcurrentVitalSigns] = useState({})\r\n  // const [showCurrentVitalSigns, setShowCurrentVitalSigns] = useState(false)\r\n  const [visitStatus, setVisitStatus] = useState([]);\r\n  const [maternalCome, setMaternalCome] = useState([]);\r\n  const [fp, setFp] = useState([]);\r\n  const [entryPoint, setEntryPoint] = useState([]);\r\n  //Vital signs clinical decision support\r\n  const entrypointRef = useRef(null);\r\n  const [objValues, setObjValues] = useState({\r\n    ancNo: patientObj.ancNo,\r\n    dateOfViralLoad: \"\",\r\n    dateOfVisit: \"\",\r\n    dateOfmeternalOutcome: \"\",\r\n    dsd: \"\",\r\n    dsdModel: \"\",\r\n    dsdOption: \"\",\r\n    enteryPoint:\r\n      props.patientObj.entryPoint === \"619\"\r\n        ? \"POINT_ENTRY_PMTCT_ANC\"\r\n        : \"POINT_ENTRY_PMTCT\",\r\n    fpCounseling: \"\",\r\n    fpMethod: \"\",\r\n    gaOfViralLoad: \"\",\r\n    id: \"\",\r\n    maternalOutcome: \"\",\r\n    nextAppointmentDate: \"\",\r\n    personUuid: patientObj.person_uuid\r\n      ? patientObj.person_uuid\r\n      : patientObj.personUuid,\r\n    resultOfViralLoad: \"\",\r\n    transferTo: \"\",\r\n    visitStatus: \"\",\r\n    timeOfViralLoad: \"\",\r\n  });\r\n  const [entryValueDisplay, setEntryValueDisplay] = useState({});\r\n\r\n  console.log(objValues.enteryPoint);\r\n  const POINT_ENTRY_PMTCT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PMTCT_ENTRY_POINT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setEntryPoint(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const getPatientEntryType = (id) => {\r\n    entryPoint.map((each, i) => {\r\n  \r\n\r\n      if (Number(each.id) === Number(props.patientObj.entryPoint)) {\r\n        setEntryValueDisplay(each);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    ///VitalSigns();\r\n    VISIT_STATUS_PMTCT();\r\n    MATERNAL_OUTCOME();\r\n    FAMILY_PLANNING_METHOD();\r\n    POINT_ENTRY_PMTCT();\r\n    if (\r\n      props.activeContent.id &&\r\n      props.activeContent.id !== \"\" &&\r\n      props.activeContent.id !== null\r\n    ) {\r\n      GetVisit(props.activeContent.id);\r\n      setDisabledField(\r\n        props.activeContent.actionType === \"view\" ? true : false\r\n      );\r\n    }\r\n  }, [props.activeContent]);\r\n\r\n  useEffect(() => {\r\n    getPatientEntryType();\r\n  }, []);\r\n\r\n  const GetVisit = (id) => {\r\n    axios\r\n      .get(`${baseUrl}pmtct/anc/view-mother-visit/${props.activeContent.id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setObjValues(response.data);\r\n        DsdModelType(response.data.dsdModel);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const VISIT_STATUS_PMTCT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/VISIT_STATUS_PMTCT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setVisitStatus(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  // const POINT_ENTRY_PMTCT = () => {\r\n  //   axios\r\n  //     .get(`${baseUrl}application-codesets/v2/POINT_ENTRY`, {\r\n  //       headers: { Authorization: `Bearer ${token}` },\r\n  //     })\r\n  //     .then((response) => {\r\n  //       console.log(response.data);\r\n  //       setEntryPoint(response.data);\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       //console.log(error);\r\n  //     });\r\n  // };\r\n  const FAMILY_PLANNING_METHOD = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/FAMILY_PLANNING_METHOD`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setFp(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const MATERNAL_OUTCOME = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/MATERNAL_OUTCOME`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setMaternalCome(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const handleInputChange = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n    if (e.target.name === \"dsdModel\") {\r\n      DsdModelType(e.target.value);\r\n    }\r\n    if (e.target.name === \"dateOfViralLoad\" && e.target.value !== \"\") {\r\n      async function getGa() {\r\n        const dateOfViralLoad = e.target.value;\r\n        //?ancNo=001&visitDate=2023-02-01\r\n        const response = await axios.get(\r\n          `${baseUrl}pmtct/anc/calculate-ga-from-person?personUuid=${\r\n            props.patientObj.person_uuid\r\n              ? props.patientObj.person_uuid\r\n              : props.patientObj.personUuid\r\n          }&visitDate=${dateOfViralLoad}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        );\r\n        if (response.data > 0) {\r\n          objValues.gaOfViralLoad = response.data;\r\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n        } else {\r\n          //toast.error(\"Please select a validate date\")\r\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n        }\r\n      }\r\n      getGa();\r\n    }\r\n    if (e.target.name === \"fpCounseling\" && e.target.value === \"No\") {\r\n      objValues.fpMethod = \"\";\r\n      setObjValues({ ...objValues, [\"fpMethod\"]: \"\" });\r\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    }\r\n    if (e.target.name === \"dsd\" && e.target.value !== \"Yes\") {\r\n      objValues.dsdModel = \"\";\r\n      objValues.dsdOption = \"\";\r\n      setObjValues({ ...objValues, [\"dsdModel\"]: \"\" });\r\n      setObjValues({ ...objValues, [\"dsdOption\"]: \"\" });\r\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    } //objValues.visitStatus==='VISIT_STATUS_PMTCT_TRANSFER_OUT'\r\n    if (\r\n      e.target.name === \"visitStatus\" &&\r\n      e.target.value !== \"VISIT_STATUS_PMTCT_TRANSFER_OUT\"\r\n    ) {\r\n      objValues.transferTo = \"\";\r\n      setObjValues({ ...objValues, [\"transferTo\"]: \"\" });\r\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    }\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  function DsdModelType(dsdmodel) {\r\n    const dsd =\r\n      dsdmodel === \"Facility\" ? \"DSD_MODEL_FACILITY\" : \"DSD_MODEL_COMMUNITY\";\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/${dsd}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        setDsdModelType(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  }\r\n\r\n  //Validations of the forms\r\n  const validate = () => {\r\n    temp.visitStatus = objValues.visitStatus ? \"\" : \"This field is required\";\r\n    temp.dateOfVisit = objValues.dateOfVisit ? \"\" : \"This field is required\";\r\n    temp.dsd = objValues.dsd ? \"\" : \"This field is required\";\r\n    temp.enteryPoint = objValues.enteryPoint ? \"\" : \"This field is required\";\r\n    temp.fpCounseling = objValues.fpCounseling ? \"\" : \"This field is required\";\r\n    //temp.fpMethod = objValues.fpMethod ? \"\" : \"This field is required\"\r\n    temp.dateOfmeternalOutcome = objValues.dateOfmeternalOutcome\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    temp.maternalOutcome = objValues.maternalOutcome\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n  /**** Submit Button Processing  */\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      setSaving(true);\r\n      if (props.activeContent && props.activeContent.actionType === \"update\") {\r\n        axios\r\n          .put(\r\n            `${baseUrl}pmtct/anc/update-mother-visit/${props.activeContent.id}`,\r\n            objValues,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          )\r\n          .then((response) => {\r\n            setSaving(false);\r\n            toast.success(\"Clinic Visit save successful\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n            props.setActiveContent({\r\n              ...props.activeContent,\r\n              route: \"recent-history\",\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setSaving(false);\r\n            if (error.response && error.response.data) {\r\n              let errorMessage =\r\n                error.response.data.apierror &&\r\n                error.response.data.apierror.message !== \"\"\r\n                  ? error.response.data.apierror.message\r\n                  : \"Something went wrong, please try again\";\r\n              toast.error(errorMessage, {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            } else {\r\n              toast.error(\"Something went wrong. Please try again...\", {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        axios\r\n          .post(`${baseUrl}pmtct/anc/pmtct-visit`, objValues, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          })\r\n          .then((response) => {\r\n            setSaving(false);\r\n            toast.success(\"Clinic Visit save successful\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n            props.setActiveContent({\r\n              ...props.activeContent,\r\n              route: \"recent-history\",\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setSaving(false);\r\n            if (error.response && error.response.data) {\r\n              let errorMessage =\r\n                error.response.data.apierror &&\r\n                error.response.data.apierror.message !== \"\"\r\n                  ? error.response.data.apierror.message\r\n                  : \"Something went wrong, please try again\";\r\n              toast.error(errorMessage, {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            } else {\r\n              toast.error(\"Something went wrong. Please try again...\", {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            }\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-8 \">\r\n          <h2>Mother Follow-up Visit</h2>\r\n        </div>\r\n      </div>\r\n      <Grid>\r\n        <Grid.Column>\r\n          <Segment>\r\n            <Label\r\n              as=\"a\"\r\n              color=\"blue\"\r\n              style={{ width: \"106%\", height: \"35px\" }}\r\n              ribbon\r\n            >\r\n              <h4 style={{ color: \"#fff\" }}>VITAL SIGNS</h4>\r\n            </Label>\r\n            <br />\r\n            <br />\r\n            <div className=\"row\">\r\n              <div className=\"form-group mb-3 col-md-3\">\r\n                <FormGroup>\r\n                  <FormLabelName>\r\n                    Date of Visit <span style={{ color: \"red\" }}> *</span>\r\n                  </FormLabelName>\r\n                  {console.log(\"visiting patient\", props.patientObj)}\r\n                  <Input\r\n                    type=\"date\"\r\n                    name=\"dateOfVisit\"\r\n                    id=\"dateOfVisit\"\r\n                    value={objValues.dateOfVisit}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    onChange={handleInputChange}\r\n                    min={props.patientObj.firstAncDate}\r\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                    //min={patientObj.pmtctEnrollmentRespondDto.pmtctEnrollmentDate}\r\n                    disabled={disabledField}\r\n                  />\r\n                  {errors.dateOfVisit !== \"\" ? (\r\n                    <span className={classes.error}>{errors.dateOfVisit}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n\r\n              {console.log(patientObj.entryPoint)}\r\n              <div className=\" mb-3 col-md-3\">\r\n                <FormGroup>\r\n                  <FormLabelName>\r\n                    Point of Entry <span style={{ color: \"red\" }}> *</span>\r\n                  </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"enteryPoint\"\r\n                    id=\"enteryPoint\"\r\n                    value={props.patientObj.entryPoint}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={true}\r\n                  >\r\n                    {/* <option value=\"select\">Select </option> */}\r\n\r\n                    {entryPoint.map((each, i) => {\r\n                      return (\r\n                        <option key={i} value={each.id}>\r\n                          {each.display}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </Input>\r\n                  {errors.enteryPoint !== \"\" ? (\r\n                    <span className={classes.error}>{errors.enteryPoint}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\" mb-3 col-md-3\">\r\n                <FormGroup>\r\n                  <FormLabelName>\r\n                    FP Counselling <span style={{ color: \"red\" }}> *</span>\r\n                  </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"fpCounseling\"\r\n                    id=\"fpCounseling\"\r\n                    value={objValues.fpCounseling}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disabledField}\r\n                  >\r\n                    <option value=\"\">Select </option>\r\n                    <option value=\"Yes\">YES </option>\r\n                    <option value=\"No\">NO </option>\r\n                  </Input>\r\n                  {errors.fpCounseling !== \"\" ? (\r\n                    <span className={classes.error}>{errors.fpCounseling}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {objValues.fpCounseling === \"Yes\" && (\r\n                <div className=\" mb-3 col-md-3\">\r\n                  <FormGroup>\r\n                    <FormLabelName>FP Method </FormLabelName>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"fpMethod\"\r\n                      id=\"fpMethod\"\r\n                      value={objValues.fpMethod}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.25rem\",\r\n                      }}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"select\">Select </option>\r\n                      {fp.map((value) => (\r\n                        <option key={value.id} value={value.id}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </Input>\r\n                    {errors.fpMethod !== \"\" ? (\r\n                      <span className={classes.error}>{errors.fpMethod}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <br />\r\n            <Label\r\n              as=\"a\"\r\n              color=\"teal\"\r\n              style={{ width: \"106%\", height: \"35px\" }}\r\n              ribbon\r\n            >\r\n              <h4 style={{ color: \"#fff\" }}> VIRAL LOAD </h4>\r\n            </Label>\r\n            <br />\r\n            <br />\r\n            {/* TB Screening Form */}\r\n            <div className=\"row\">\r\n              <div className=\" mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <FormLabelName>Viral Load Collection Date </FormLabelName>\r\n                  <Input\r\n                    type=\"date\"\r\n                    name=\"dateOfViralLoad\"\r\n                    id=\"dateOfViralLoad\"\r\n                    value={objValues.dateOfViralLoad}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    min={props.patientObj.firstAncDate}\r\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                    disabled={disabledField}\r\n                  />\r\n                  {errors.dateOfViralLoad !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.dateOfViralLoad}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\" mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <FormLabelName>GA at VL Collection </FormLabelName>\r\n                  <Input\r\n                    type=\"number\"\r\n                    name=\"gaOfViralLoad\"\r\n                    id=\"gaOfViralLoad\"\r\n                    value={objValues.gaOfViralLoad}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    min={props.patientObj.firstAncDate}\r\n                    disabled={disabledField === false ? true : disabledField}\r\n                  />\r\n                  {errors.gaOfViralLoad !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.gaOfViralLoad}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\" mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <FormLabelName>Result </FormLabelName>\r\n                  <Input\r\n                    type=\"number\"\r\n                    name=\"resultOfViralLoad\"\r\n                    id=\"resultOfViralLoad\"\r\n                    value={objValues.resultOfViralLoad}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disabledField}\r\n                  />\r\n                  {errors.resultOfViralLoad !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.resultOfViralLoad}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n            </div>\r\n            <br />\r\n\r\n            <br />\r\n            <Label\r\n              as=\"a\"\r\n              color=\"black\"\r\n              style={{ width: \"106%\", height: \"35px\" }}\r\n              ribbon\r\n            >\r\n              <h4 style={{ color: \"#fff\" }}> DSD MODEL & OUTCOME</h4>\r\n            </Label>\r\n            <br />\r\n            <br />\r\n            {/*  */}\r\n            <div className=\"row\">\r\n              <div className=\" mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <FormLabelName>\r\n                    DSD <span style={{ color: \"red\" }}> *</span>\r\n                  </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"dsd\"\r\n                    id=\"dsd\"\r\n                    value={objValues.dsd}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disabledField}\r\n                  >\r\n                    <option value=\"\">Select </option>\r\n                    <option value=\"Yes\">YES </option>\r\n                    <option value=\"No\">NO </option>\r\n                  </Input>\r\n                  {errors.dsd !== \"\" ? (\r\n                    <span className={classes.error}>{errors.dsd}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {objValues.dsd === \"Yes\" && (\r\n                <>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <FormLabelName>DSD Model</FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"dsdModel\"\r\n                        id=\"dsdModel\"\r\n                        value={objValues.dsdModel}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        disabled={disabledField}\r\n                      >\r\n                        <option value=\"\">Select </option>\r\n                        <option value=\"Facility\">Facility </option>\r\n                        <option value=\"Community\">Community </option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <FormLabelName>DSD Model Type</FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"dsdOption\"\r\n                        id=\"dsdOption\"\r\n                        value={objValues.dsdOption}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        disabled={disabledField}\r\n                      >\r\n                        <option value=\"\">Select </option>\r\n                        {dsdModelType.map((value) => (\r\n                          <option key={value.code} value={value.code}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </div>\r\n                </>\r\n              )}\r\n              <div className=\"form-group mb-3 col-md-3\">\r\n                <FormGroup>\r\n                  <FormLabelName>\r\n                    Maternal Outcome <span style={{ color: \"red\" }}> *</span>\r\n                  </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"maternalOutcome\"\r\n                    id=\"maternalOutcome\"\r\n                    value={objValues.maternalOutcome}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disabledField}\r\n                  >\r\n                    <option value=\"\">Select </option>\r\n                    {maternalCome.map((value) => (\r\n                      <option key={value.code} value={value.code}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\" mb-3 col-md-3\">\r\n                <FormGroup>\r\n                  <FormLabelName>\r\n                    Date of Outcome <span style={{ color: \"red\" }}> *</span>\r\n                  </FormLabelName>\r\n                  <Input\r\n                    type=\"date\"\r\n                    name=\"dateOfmeternalOutcome\"\r\n                    id=\"dateOfmeternalOutcome\"\r\n                    value={objValues.dateOfmeternalOutcome}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    min={props.patientObj.firstAncDate}\r\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                    disabled={disabledField}\r\n                  />\r\n                  {errors.dateOfmeternalOutcome !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.dateOfmeternalOutcome}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"form-group mb-3 col-md-3\">\r\n                <FormGroup>\r\n                  <FormLabelName>\r\n                    Client Visit Status <span style={{ color: \"red\" }}> *</span>\r\n                  </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"visitStatus\"\r\n                    id=\"visitStatus\"\r\n                    value={objValues.visitStatus}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disabledField}\r\n                  >\r\n                    <option value=\"\">Select </option>\r\n                    {visitStatus.map((value) => (\r\n                      <option key={value.code} value={value.code}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                  {errors.visitStatus !== \"\" ? (\r\n                    <span className={classes.error}>{errors.visitStatus}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {objValues.visitStatus === \"VISIT_STATUS_PMTCT_TRANSFER_OUT\" && (\r\n                <div className=\"form-group mb-3 col-md-3\">\r\n                  <FormGroup>\r\n                    <FormLabelName>Name of ART Facility </FormLabelName>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"transferTo\"\r\n                      id=\"transferTo\"\r\n                      value={objValues.transferTo}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.25rem\",\r\n                      }}\r\n                      disabled={disabledField}\r\n                    />\r\n                    {errors.transferTo !== \"\" ? (\r\n                      <span className={classes.error}>{errors.transferTo}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <br />\r\n            {props.activeContent && props.activeContent.actionType ? (\r\n              <>\r\n                <MatButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  hidden={disabledField}\r\n                  className={classes.button}\r\n                  startIcon={<SaveIcon />}\r\n                  style={{ backgroundColor: \"#014d88\" }}\r\n                  onClick={handleSubmit}\r\n                  disabled={saving}\r\n                >\r\n                  {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                  ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>\r\n                      Updating...\r\n                    </span>\r\n                  )}\r\n                </MatButton>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <MatButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  startIcon={<SaveIcon />}\r\n                  style={{ backgroundColor: \"#014d88\" }}\r\n                  onClick={handleSubmit}\r\n                  disabled={saving}\r\n                >\r\n                  {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                  ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>\r\n                      Saving...\r\n                    </span>\r\n                  )}\r\n                </MatButton>\r\n              </>\r\n            )}\r\n          </Segment>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClinicVisit;\r\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\index.js",["659"],["660","661"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\App.js",[],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Home.js",["662","663"],"import React, { useState, Fragment, useEffect } from \"react\";\nimport { Row, Col, Card, Tab, Tabs } from \"react-bootstrap\";\nimport NotEnrollPatients from \"./Patient/PatientList\";\nimport ActiveANCPatients from \"./Patient/ActiveANCPatientList\";\n//import VisualisationHome from './Visualisation/Index'\nimport { Link } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport PmtctEntryPoint from \"./PmtctServices/PmtctEntryPoint\";\nimport ANCPatients from \"./Patient/ActiveANCPatientList\";\nimport PmtctPatients from \"./Patient/PmtctPatients\";\n\n//import PageTitle from \"./../layouts/PageTitle\";\nconst divStyle = {\n  borderRadius: \"2px\",\n  fontSize: 14,\n};\n\nconst Home = (props) => {\n  const [key, setKey] = useState(\"home\");\n  const [modalShow, setModalShow] = useState(false);\n  useEffect(() => {\n    setKey(\"home\");\n  }, []);\n\n  return (\n    <Fragment>\n      <div\n        className=\"row page-titles mx-0\"\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\n      >\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item active\">\n            <h4>PMTCT</h4>\n          </li>\n        </ol>\n      </div>\n      {/* <Link to={\"register-patient\"}> */}\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className=\" float-end mb-10\"\n        startIcon={<FaUserPlus size=\"10\" />}\n        style={{ backgroundColor: \"#014d88\" }}\n        onClick={(e) => {\n          e.preventDefault();\n          setModalShow(true);\n        }}\n      >\n        <span style={{ textTransform: \"capitalize\" }}>New Patient</span>\n      </Button>\n      {/* </Link> */}\n      <br />\n      <br />\n      <Row>\n        <Col xl={12}>\n          <Card style={divStyle}>\n            <Card.Body>\n              {/* <!-- Nav tabs --> */}\n\n              <div className=\"custom-tab-1\">\n                <Tabs\n                  id=\"controlled-tab-example\"\n                  activeKey={key}\n                  onSelect={(k) => setKey(k)}\n                  className=\"mb-3\"\n                >\n                  <Tab eventKey=\"home\" title=\"Find Patients\">\n                    <NotEnrollPatients />\n                  </Tab>\n                  <Tab eventKey=\"anc\" title=\"ANC Patients\">\n                    <ANCPatients />\n                  </Tab>\n\n                  <Tab eventKey=\"pmtct\" title=\"General PMTCT Patients\">\n                    <PmtctPatients />\n                  </Tab>\n                  {/* <Tab eventKey=\"visualization\" title=\"Data Visualisation\">                   \n                    <VisualisationHome />\n                  </Tab>                     */}\n                </Tabs>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <PmtctEntryPoint\n        route=\"/register-patient\"\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </Fragment>\n  );\n};\n\nexport default Home;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js",["664","665","666"],"import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Link } from \"react-router-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport PatientCardDetail from \"./PatientCard\";\nimport { useHistory } from \"react-router-dom\";\nimport SubMenu from \"./SubMenu\";\n//import RecentHistory from './../History/RecentHistory';\nimport ClinicVisit from \"../Consultation/Index\";\nimport PmtctEnrollment from \"./../PmtctServices/PmtctEnrollment\";\nimport AncEnrollement from \"./../PmtctServices/AncEnrollement\";\nimport LabourDelivery from \"./../PmtctServices/LabourDelivery\";\nimport PmtctHts from \"./../PMTCTHTSEnrollment/Index\";\nimport Partners from \"./../PmtctServices/Partners/Index\";\nimport Infants from \"./../PmtctServices/Infants/Index\";\nimport AddPartners from \"./../PmtctServices/Partners/AddNewPartner\";\nimport AddInfants from \"./../PmtctServices/Infants/InfantRegistration\";\nimport PatientHistory from \"./../History/PatientHistory\";\nimport RecentHistory from \"./../History/RecentHistory\";\nimport axios from \"axios\";\nimport { url as baseUrl, token as token } from \"./../../../api\";\n\nconst styles = (theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: \"bottom\",\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: \"center\",\n  },\n  column: {\n    flexBasis: \"20.33%\",\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n});\n\nfunction PatientCard(props) {\n  let history = useHistory();\n  const [art, setArt] = useState(false);\n  const [PersonInfo, setPersonInfo] = useState({});\n  const [deliveryInfo, setDeliveryInfo] = useState([]);\n  const [allEntryPoint, setAllEntryPoint] = useState([]);\n\n  const [activeContent, setActiveContent] = useState({\n    route: \"recent-history\",\n    id: \"\",\n    activeTab: \"home\",\n    actionType: \"create\",\n    obj: {},\n  });\n  const { classes } = props;\n  const patientObj =\n    history.location && history.location.state\n      ? history.location.state.patientObj\n      : {};\n\n  const RecentActivities = () => {\n    // if patient has ANC No\n    // if (props.patientObj.ancNo) {\n    //   axios\n    //     .get(`${baseUrl}${props.patientObj.ancNo}`, {\n    //       headers: { Authorization: `Bearer ${token}` },\n    //     })\n    //     .then((response) => {\n    //       setRecentActivities(response.data);\n    //     })\n    //     .catch((error) => {\n    //     });\n    // } else {\n    axios\n      .get(\n        `${baseUrl}pmtct/anc/getAllActivities/${\n          patientObj.person_uuid\n            ? patientObj.person_uuid\n            : patientObj.personUuid\n        }`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        console.log(response.data);\n        setDeliveryInfo(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n    // }\n  };\n\n  const POINT_ENTRY_PMTCT = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PMTCT_ENTRY_POINT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setAllEntryPoint(response.data);\n        console.log(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    RecentActivities();\n    axios\n      .get(`${baseUrl}patient/${patientObj?.id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setPersonInfo(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n\n    POINT_ENTRY_PMTCT();\n  }, []);\n  console.log(patientObj);\n\n  return (\n    <div className={classes.root}>\n      <div\n        className=\"row page-titles mx-0\"\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\n      >\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item active\">\n            <h4>\n              {\" \"}\n              <Link to={\"/\"}>PMTCT /</Link> Patient Dashboard\n            </h4>\n          </li>\n        </ol>\n      </div>\n      <Card>\n        <CardContent>\n          {/* Patient Card Detail */}\n          <PatientCardDetail\n            patientObj={patientObj}\n            setArt={setArt}\n            setActiveContent={setActiveContent}\n          />\n          {/* Patient Dashboard menu */}\n          <SubMenu\n            patientObj={patientObj}\n            art={art}\n            setActiveContent={setActiveContent}\n            deliveryInfo={deliveryInfo}\n          />\n          <br />\n          {/* Patient dashboard menu route */}\n          {activeContent.route === \"recent-history\" && (\n            <RecentHistory\n              allEntryPoint={allEntryPoint}\n              patientObj={patientObj}\n              setActiveContent={setActiveContent}\n              activeContent={activeContent}\n              entrypointValue={\n                patientObj.ancNo\n                  ? \"PMTCT_ENTRY_POINT_ANC\"\n                  : patientObj.entryPoint\n              }\n            />\n          )}\n\n          {activeContent.route === \"consultation\" && (\n            <ClinicVisit\n              patientObj={patientObj}\n              setActiveContent={setActiveContent}\n              activeContent={activeContent}\n            />\n          )}\n          {activeContent.route === \"anc-pnc\" && (\n            <PmtctEnrollment\n              allEntryPoint={allEntryPoint}\n              entrypointValue={patientObj.entryPoint}\n              ancEntryType={patientObj.ancNo ? true : false}\n              patientObj={patientObj}\n              setActiveContent={setActiveContent}\n              activeContent={activeContent}\n              hideUpdateButton={true}\n            />\n          )}\n          {activeContent.route === \"anc-enrollment\" && (\n            <AncEnrollement\n              patientObj={patientObj}\n              setActiveContent={setActiveContent}\n              activeContent={activeContent}\n            />\n          )}\n          {activeContent.route === \"labour-delivery\" && (\n            <LabourDelivery\n              patientObj={patientObj}\n              setActiveContent={setActiveContent}\n              activeContent={activeContent}\n            />\n          )}\n          {activeContent.route === \"pmtct-hts\" && (\n            <PmtctHts\n              patientObj={patientObj}\n              patientAge={patientObj.age}\n              setActiveContent={setActiveContent}\n              activeContent={activeContent}\n            />\n          )}\n          {activeContent.route === \"partners\" && (\n            <Partners\n              patientObj={patientObj}\n              patientAge={patientObj.age}\n              setActiveContent={setActiveContent}\n              activeContent={activeContent}\n            />\n          )}\n          {activeContent.route === \"infants\" && (\n            <Infants\n              patientObj={patientObj}\n              patientAge={patientObj.age}\n              setActiveContent={setActiveContent}\n              activeContent={activeContent}\n            />\n          )}\n          {activeContent.route === \"add-partner\" && (\n            <AddPartners\n              patientObj={patientObj}\n              patientAge={patientObj.age}\n              setActiveContent={setActiveContent}\n              activeContent={activeContent}\n            />\n          )}\n          {activeContent.route === \"add-infant\" && (\n            <AddInfants\n              patientObj={patientObj}\n              patientAge={patientObj.age}\n              setActiveContent={setActiveContent}\n              activeContent={activeContent}\n            />\n          )}\n          {activeContent.route === \"patient-history\" && (\n            <PatientHistory\n              patientObj={patientObj}\n              setActiveContent={setActiveContent}\n              activeContent={activeContent}\n            />\n          )}\n          {/* History Pages */}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nPatientCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PatientCard);\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\UpdatePatientEnrollment.js",["667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport MatButton from \"@material-ui/core/Button\";\nimport Button from \"@material-ui/core/Button\";\nimport { FormGroup, Label, Spinner, Input, Form, InputGroup } from \"reactstrap\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faCheckSquare,\n  faCoffee,\n  faEdit,\n  faTrash,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport { TiArrowBack } from \"react-icons/ti\";\nimport { token, url as baseUrl } from \"../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"./patient.css\";\n// import Form from 'react-bootstrap/Form';\nimport { Modal } from \"react-bootstrap\";\n\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    flexGrow: 1,\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst UserRegistration = (props) => {\n  const [basicInfo, setBasicInfo] = useState({\n    fullname: \"\",\n    sex: \"\",\n    age: \"\",\n    hospitalNumber: \"\",\n  });\n  const [saving, setSaving] = useState(false);\n  const [disabledAgeBaseOnAge, setDisabledAgeBaseOnAge] = useState(false);\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [genders, setGenders] = useState([]);\n  const [ancNumberCheck, setAncNumberCheck] = useState(false);\n  const [errors, setErrors] = useState({});\n  const userDetail =\n    props.location && props.location.state ? props.location.state.user : null;\n  const classes = useStyles();\n  const history = useHistory();\n  const location = useLocation();\n  const [ANCSetting, setANCSetting] = useState([]);\n\n  //const [values, setValues] = useState([]);\n  const [objValues, setObjValues] = useState({\n    ancSetting: \"\",\n    ancNo: \"\",\n    gaweeks: \"\",\n    gravida: \"\",\n    expectedDeliveryDate: \"\",\n    firstAncDate: \"\",\n    lmp: \"\",\n    parity: \"\",\n    person_uuid: \"\",\n    hivDiognosicTime: \"\",\n    referredSyphilisTreatment: \"\",\n    testResultSyphilis: \"\",\n    testedSyphilis: \"\",\n    treatedSyphilis: \"\",\n    personDto: {},\n    pmtctHtsInfo: {},\n    syphilisInfo: {},\n    partnerNotification: {},\n    // sourceOfReferral: \"\",\n    staticHivStatus: \"\",\n  });\n  const [pregnancyStatus, setPregnancyStatus] = useState([]);\n  //set ro show the facility name field if is transfer in\n\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const locationState = location.state;\n  console.log(locationState);\n  let patientId = null;\n  let actionType = null;\n  let recordId = null;\n  let patientObj = {};\n  patientId = locationState ? locationState.patientId : null;\n  recordId = locationState ? locationState.id : null;\n  actionType = locationState ? locationState.actionType : null;\n  patientObj = locationState ? locationState.patientObj : {};\n  const [sourceOfReferral, setSourceOfReferral] = useState([]);\n  const [disabledField, setDisabledField] = useState(false);\n  const [allNewEntryPoint, setAllNewEntryPoint] = useState([]);\n  const [entryValueDisplay, setEntryValueDisplay] = useState({});\n\n  const NEW_POINT_ENTRY_PMTCT = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PMTCT_ENTRY_POINT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setAllNewEntryPoint(response.data);\n        console.log(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const getPatientEntryType = (id) => {\n    allNewEntryPoint.map((each, i) => {\n      if (each.code === locationState.entrypointValue) {\n        setEntryValueDisplay(each);\n        console.log(\"location choosennn\", each);\n      }\n    });\n  };\n\n  useEffect(() => {\n    getANCSetting();\n    loadGenders();\n    getSex();\n    PregnancyStatus();\n    //console.log(patientObj)\n    if (patientObj) {\n      setDisabledField(actionType === \"view\" ? true : false);\n      setObjValues({ ...patientObj });\n      basicInfo.fullname = patientObj.fullname;\n      basicInfo.age = patientObj.age;\n      basicInfo.hospitalNumber = patientObj.hospitalNumber;\n      basicInfo.sex = patientObj.sex;\n      //syphilisInfo\n    }\n\n    // SOURCE_REFERRAL_PMTCT();\n  }, [patientObj, patientId, actionType]);\n\n  useEffect(() => {\n    viewANCInfo();\n    if (locationState.entrypointValue) {\n      getPatientEntryType();\n    }\n  }, []);\n  //Get list of Source of Referral\n  const SOURCE_REFERRAL_PMTCT = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL_PMTCT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSourceOfReferral(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const viewANCInfo = () => {\n    axios\n      .get(`${baseUrl}pmtct/anc/${location.state.id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setObjValues({ ...response.data });\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //get ANC setting\n  const getANCSetting = (e) => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TEST_SETTING_CPMTCT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        console.log(response);\n        setANCSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const getSex = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        let patientSex = \"\";\n        if (\n          patientObj.sex === \"female\" ||\n          patientObj.sex === \"Female\" ||\n          patientObj.sex === \"FEMALE\"\n        ) {\n          patientSex = \"Female\";\n        }\n        if (\n          patientObj.sex === \"Male\" ||\n          patientObj.sex === \"male\" ||\n          patientObj.sex === \"MALE\"\n        ) {\n          patientSex = \"Male\";\n        }\n        const getSexId = response.data.find((x) => x.display === patientSex); //get patient sex ID by filtering the request\n        basicInfo.sexId = getSexId.display;\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const loadGenders = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/SEX`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setGenders(response.data);\n    } catch (e) {}\n  }, []);\n\n  const handleAgeChange = (e) => {\n    const ageNumber = e.target.value.replace(/\\D/g, \"\");\n    if (!ageDisabled && ageNumber) {\n      if (ageNumber !== \"\" && ageNumber >= 60) {\n        toggle();\n      }\n      if (ageNumber <= 1) {\n        setDisabledAgeBaseOnAge(true);\n      } else {\n        setDisabledAgeBaseOnAge(false);\n      }\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(ageNumber * -1, \"years\");\n      //setBasicInfo({...basicInfo, dob: moment(dobNew).format(\"YYYY-MM-DD\")});\n      basicInfo.dob = moment(dobNew).format(\"YYYY-MM-DD\");\n    }\n    setBasicInfo({ ...basicInfo, age: ageNumber });\n  };\n  //End of Date of Birth and Age handling\n  /*****  Validation  */\n  const validate = () => {\n    let temp = { ...errors };\n\n    //temp.firstAncDate = objValues.firstAncDate ? \"\" : \"This field is required\"\n    temp.gaweeks = objValues.gaweeks ? \"\" : \"This field is required\";\n    temp.gravida = objValues.gravida ? \"\" : \"This field is required\";\n    objValues.testResultSyphilis === \"Yes\" &&\n      (temp.referredSyphilisTreatment = objValues.referredSyphilisTreatment\n        ? \"\"\n        : \"This field is required\");\n    temp.lmp = objValues.lmp ? \"\" : \"This field is required\";\n    temp.parity = objValues.parity !== \"\" ? \"\" : \"This field is required\";\n    temp.testedSyphilis = objValues.testedSyphilis\n      ? \"\"\n      : \"This field is required\";\n    objValues.testResultSyphilis === \"Yes\" &&\n      (temp.treatedSyphilis = objValues.treatedSyphilis\n        ? \"\"\n        : \"This field is required\");\n    // temp.sourceOfReferral = objValues.sourceOfReferral\n    //   ? \"\"\n    //   : \"This field is required\";\n    objValues.testedSyphilis === \"Yes\" &&\n      (temp.testResultSyphilis = objValues.testResultSyphilis\n        ? \"\"\n        : \"This field is required\");\n    temp.staticHivStatus = objValues.staticHivStatus\n      ? \"\"\n      : \"This field is required\";\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  //Handle Input Change for Basic Infor\n  const handleInputChangeBasic = (e) => {\n    setErrors({ ...errors, [e.target.name]: \"\" });\n    setBasicInfo({ ...basicInfo, [e.target.name]: e.target.value });\n  };\n\n  //Get list of KP\n  const PregnancyStatus = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PREGANACY_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setPregnancyStatus(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputChange = (e) => {\n    setErrors({ ...errors, [e.target.name]: \"\" });\n    if (e.target.name === \"ancNo\" && e.target.value !== \"\") {\n      async function getAncNumber() {\n        const ancNumber = e.target.value;\n        const ancNo = {\n          ancNo: ancNumber,\n        };\n        const response = await axios.post(\n          `${baseUrl}pmtct/anc/exist/anc-number/${ancNumber}`,\n          ancNo,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data === true) {\n          toast.error(\"ANC number already exist\");\n          setAncNumberCheck(response.data);\n        } else {\n          setAncNumberCheck(false);\n        }\n      }\n      getAncNumber();\n    }\n    if (e.target.name === \"lmp\" && e.target.value !== \"\") {\n      async function getGa() {\n        const ga = e.target.value;\n        const response = await axios.get(\n          `${baseUrl}pmtct/anc/calculate-ga/${ga}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data > 0) {\n          objValues.gaweeks = response.data;\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\n        } else {\n          objValues.gaweeks = response.data;\n          toast.error(\"Please select a validate date\");\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\n        }\n      }\n      getGa();\n    }\n    if (\n      e.target.name === \"parity\" &&\n      e.target.value !== \"\" &&\n      e.target.value < 0\n    ) {\n      //The field will  not accept zero as a value\n      return;\n    } //gravida\n    if (\n      e.target.name === \"gravida\" &&\n      e.target.value !== \"\" &&\n      e.target.value <= 0\n    ) {\n      //The field will  not accept zero as a value\n      return;\n    }\n    if (\n      e.target.name === \"testedSyphilis\" &&\n      e.target.value !== \"\" &&\n      e.target.value === \"Yes\"\n    ) {\n      //The field will  not accept zero as a value\n      objValues.testResultSyphilis = \"\";\n      objValues.referredSyphilisTreatment = \"\";\n      objValues.treatedSyphilis = \"\";\n      setObjValues({ ...objValues, [\"testResultSyphilis\"]: \"\" });\n      setObjValues({ ...objValues, [\"referredSyphilisTreatment\"]: \"\" });\n      setObjValues({ ...objValues, [\"treatedSyphilis\"]: \"\" });\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    }\n    if (\n      e.target.name === \"testResultSyphilis\" &&\n      e.target.value !== \"\" &&\n      e.target.value === \"Positive\"\n    ) {\n      //The field will  not accept zero as a value\n      objValues.treatedSyphilis = \"\";\n      objValues.referredSyphilisTreatment = \"\";\n      setObjValues({ ...objValues, [\"treatedSyphilis\"]: \"\" });\n      setObjValues({ ...objValues, [\"referredSyphilisTreatment\"]: \"\" });\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n\n  //Handle CheckBox\n\n  const handleCancel = () => {\n    history.push({ pathname: \"/\" });\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (validate()) {\n      try {\n        objValues.person_uuid = patientObj.uuid;\n        const response = await axios.put(\n          `${baseUrl}pmtct/anc/update-anc/${recordId}`,\n          objValues,\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n        toast.success(\"Record updated  successful\", {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n        history.push({\n          pathname: \"/patient-history\",\n          state: {\n            patientObj: patientObj,\n            postValue: entryValueDisplay.display,\n            entrypointValue: entryValueDisplay.code,\n          },\n        });\n      } catch (error) {\n        if (error.response && error.response.data) {\n          let errorMessage =\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\"\n              ? error.response.data.apierror.message\n              : \"Something went wrong, please try again\";\n          if (\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\" &&\n            error.response.data.apierror &&\n            error.response.data.apierror.subErrors[0].message !== \"\"\n          ) {\n            toast.error(\n              error.response.data.apierror.message +\n                \" : \" +\n                error.response.data.apierror.subErrors[0].field +\n                \" \" +\n                error.response.data.apierror.subErrors[0].message,\n              { position: toast.POSITION.BOTTOM_CENTER }\n            );\n          } else {\n            toast.error(errorMessage, {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        } else {\n          toast.error(\"Something went wrong. Please try again...\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        }\n      }\n    }\n  };\n  console.log(errors);\n  return (\n    <>\n      <div\n        className=\"row page-titles mx-0\"\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\n      >\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item active\">\n            <h4>\n              {\" \"}\n              <Link to={\"/\"}>PMTCT /</Link> Patient Enrollment\n            </h4>\n          </li>\n        </ol>\n      </div>\n      <ToastContainer autoClose={3000} hideProgressBar />\n      <Card className={classes.root}>\n        <CardContent>\n          <Link\n            to={{\n              pathname: \"/patient-history\",\n              state: { patientObj: patientObj },\n            }}\n          >\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\" float-end ms-1\"\n              style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\n              startIcon={<TiArrowBack />}\n            >\n              <span style={{ textTransform: \"capitalize\", color: \"#fff\" }}>\n                Back{\" \"}\n              </span>\n            </Button>\n          </Link>\n          <br />\n          <br />\n          <div className=\"col-xl-12 col-lg-12\">\n            <Form>\n              <div className=\"card\">\n                <div\n                  className=\"card-header\"\n                  style={{\n                    backgroundColor: \"#014d88\",\n                    color: \"#fff\",\n                    fontWeight: \"bolder\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                >\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\n                    {userDetail === null\n                      ? \"Basic Information\"\n                      : \"Edit User Information\"}\n                  </h5>\n                </div>\n\n                <div className=\"card-body\">\n                  <div className=\"basic-form\">\n                    <div className=\"row\">\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"firstName\">Name</Label>\n                          <Input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"firstName\"\n                            id=\"firstName\"\n                            value={\n                              location.state?.patientObj?.fullName\n                                ? location?.state.patientObj?.fullName\n                                : location?.state?.patientObj?.fullname\n                            }\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"none\",\n                              backgroundColor: \"transparent\",\n                              outline: \"none\",\n                            }}\n                          />\n                          {errors.firstName !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.firstName}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                      {console.log(location.state.patientObj)}\n\n                      <div className=\"form-group mb-3 col-md-3\">\n                        <FormGroup>\n                          <Label for=\"patientId\">Hospital Number </Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"hospitalNumber\"\n                            id=\"hospitalNumber\"\n                            value={basicInfo.hospitalNumber}\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"none\",\n                              backgroundColor: \"transparent\",\n                              outline: \"none\",\n                            }}\n                            //disabled\n                          />\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group  col-md-2\">\n                        <FormGroup>\n                          <Label>Sex </Label>\n                          <Input\n                            className=\"form-control\"\n                            name=\"sexId\"\n                            id=\"sexId\"\n                            onChange={handleInputChangeBasic}\n                            value={basicInfo.sex}\n                            style={{\n                              border: \"none\",\n                              backgroundColor: \"transparent\",\n                              outline: \"none\",\n                            }}\n                          />\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-3 col-md-2\">\n                        <FormGroup>\n                          <Label>Age</Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"age\"\n                            id=\"age\"\n                            value={basicInfo.age}\n                            disabled={ageDisabled}\n                            onChange={handleAgeChange}\n                            style={{\n                              border: \"none\",\n                              backgroundColor: \"transparent\",\n                              outline: \"none\",\n                            }}\n                          />\n                        </FormGroup>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Adding  ENROLLEMENT FORM HERE */}\n              <div className=\"card\">\n                <div\n                  className=\"card-header\"\n                  style={{\n                    backgroundColor: \"#014d88\",\n                    color: \"#fff\",\n                    fontWeight: \"bolder\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                >\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\n                    ANC Enrollment\n                  </h5>\n                </div>\n                <div className=\"card-body\">\n                  <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>ANC Setting</Label>\n                        <InputGroup>\n                          <Input\n                            type=\"select\"\n                            name=\"ancSetting\"\n                            id=\"encounterDate\"\n                            onChange={handleInputChange}\n                            value={objValues.ancSetting}\n                            disabled={disabledField}\n                          >\n                            <option value=\"\">Select</option>\n                            {ANCSetting.length > 0 &&\n                              ANCSetting.map((each) => {\n                                return (\n                                  <option value={each.code}>\n                                    {each.display}\n                                  </option>\n                                );\n                              })}\n                          </Input>\n                        </InputGroup>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          ANC No <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"text\"\n                            name=\"ancNo\"\n                            id=\"ancNo\"\n                            onChange={handleInputChange}\n                            value={objValues.ancNo}\n                            disabled\n                          />\n                        </InputGroup>\n                        {errors.ancNo !== \"\" ? (\n                          <span className={classes.error}>{errors.ancNo}</span>\n                        ) : (\n                          \"\"\n                        )}\n                        {ancNumberCheck === true ? (\n                          <span className={classes.error}>\n                            {\"ANC number already exist\"}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          Date of Enrollment{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"date\"\n                            name=\"firstAncDate\"\n                            id=\"firstAncDate\"\n                            onChange={handleInputChange}\n                            value={objValues.firstAncDate}\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            disabled={disabledField}\n                          />\n                        </InputGroup>\n                        {errors.firstAncDate !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.firstAncDate}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          Parity <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"number\"\n                            name=\"parity\"\n                            id=\"parity\"\n                            onChange={handleInputChange}\n                            value={objValues.parity}\n                            disabled={disabledField}\n                          />\n                        </InputGroup>\n                        {errors.parity !== \"\" ? (\n                          <span className={classes.error}>{errors.parity}</span>\n                        ) : (\n                          \"\"\n                        )}\n                        {objValues.parity !== \"\" && objValues.parity <= 0 ? (\n                          <span className={classes.error}>\n                            Parity should not be less than 1\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          Gravida <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"number\"\n                            name=\"gravida\"\n                            id=\"gravida\"\n                            onChange={handleInputChange}\n                            value={objValues.gravida}\n                            disabled={disabledField}\n                          />\n                        </InputGroup>\n                        {errors.gravida !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.gravida}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                        {objValues.gravida < objValues.parity ? (\n                          <span className={classes.error}>\n                            Gravida should not be less Parity\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          Date Of Last Menstrual Period{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"date\"\n                            name=\"lmp\"\n                            id=\"lmp\"\n                            onChange={handleInputChange}\n                            value={objValues.lmp}\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            disabled\n                          />\n                        </InputGroup>\n                        {errors.lmp !== \"\" ? (\n                          <span className={classes.error}>{errors.lmp}</span>\n                        ) : (\n                          \"\"\n                        )}\n                        {objValues.gaweeks === 0 ? (\n                          <span className={classes.error}>Invalid date </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          Gestational Age (Weeks){\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"number\"\n                            name=\"gaweeks\"\n                            id=\"gaweeks\"\n                            onChange={handleInputChange}\n                            value={objValues.gaweeks}\n                            disabled={disabledField}\n                          />\n                        </InputGroup>\n                        {errors.gaweeks !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.gaweeks}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    {/* <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          Source of Referral{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"select\"\n                            name=\"sourceOfReferral\"\n                            id=\"sourceOfReferral\"\n                            onChange={handleInputChange}\n                            value={objValues.sourceOfReferral}\n                            disabled={disabledField}\n                          >\n                            <option value=\"\">Select</option>\n                            {sourceOfReferral.map((value, index) => (\n                              <option key={index} value={value.code}>\n                                {value.display}\n                              </option>\n                            ))}\n                          </Input>\n                        </InputGroup>\n                        {errors.sourceOfReferral !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.sourceOfReferral}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div> */}\n\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          Tested for syphilis{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"select\"\n                            name=\"testedSyphilis\"\n                            id=\"testedSyphilis\"\n                            onChange={handleInputChange}\n                            value={objValues.testedSyphilis}\n                            disabled={disabledField}\n                          >\n                            <option value=\"\">Select</option>\n                            <option value=\"Yes\">Yes</option>\n                            <option value=\"No\">No</option>\n                          </Input>\n                        </InputGroup>\n                        {errors.testedSyphilis !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.testedSyphilis}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    {objValues.testedSyphilis === \"Yes\" && (\n                      <>\n                        <div className=\"form-group mb-3 col-md-6\">\n                          <FormGroup>\n                            <Label>\n                              Syphilis test result{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <InputGroup>\n                              <Input\n                                type=\"select\"\n                                name=\"testResultSyphilis\"\n                                id=\"testResultSyphilis\"\n                                onChange={handleInputChange}\n                                value={objValues.testResultSyphilis}\n                                disabled={disabledField}\n                              >\n                                <option value=\"\">Select</option>\n                                <option value=\"Positive\">Positive</option>\n                                <option value=\"Negative\">Negative</option>\n                              </Input>\n                            </InputGroup>\n                            {errors.testResultSyphilis !== \"\" ? (\n                              <span className={classes.error}>\n                                {errors.testResultSyphilis}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                        {objValues.testedSyphilis === \"Yes\" &&\n                          objValues.testResultSyphilis === \"Positive\" && (\n                            <>\n                              <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                  <Label>\n                                    Treated for syphilis (penicillin){\" \"}\n                                    <span style={{ color: \"red\" }}> *</span>\n                                  </Label>\n                                  <InputGroup>\n                                    <Input\n                                      type=\"select\"\n                                      name=\"treatedSyphilis\"\n                                      id=\"treatedSyphilis\"\n                                      onChange={handleInputChange}\n                                      value={objValues.encounterDate}\n                                      disabled={disabledField}\n                                    >\n                                      <option value=\"\">Select</option>\n                                      <option value=\"Yes\">Yes</option>\n                                      <option value=\"No\">No</option>\n                                    </Input>\n                                  </InputGroup>\n                                  {errors.treatedSyphilis !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.treatedSyphilis}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                  <Label>\n                                    Referred Syphilis +ve client{\" \"}\n                                    <span style={{ color: \"red\" }}> *</span>\n                                  </Label>\n                                  <InputGroup>\n                                    <Input\n                                      type=\"select\"\n                                      name=\"referredSyphilisTreatment\"\n                                      id=\"referredSyphilisTreatment\"\n                                      onChange={handleInputChange}\n                                      value={\n                                        objValues.referredSyphilisTreatment\n                                      }\n                                      disabled={disabledField}\n                                    >\n                                      <option value=\"\">Select</option>\n                                      <option value=\"Yes\">Yes</option>\n                                      <option value=\"No\">No</option>\n                                    </Input>\n                                  </InputGroup>\n                                  {errors.referredSyphilisTreatment !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.referredSyphilisTreatment}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n                            </>\n                          )}\n                      </>\n                    )}\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <FormGroup>\n                        <Label>\n                          HIV Status <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <InputGroup>\n                          <Input\n                            type=\"select\"\n                            name=\"staticHivStatus\"\n                            id=\"staticHivStatus\"\n                            onChange={handleInputChange}\n                            value={objValues.staticHivStatus}\n                            disabled={disabledField}\n                          >\n                            <option value=\"\">Select</option>\n                            <option value=\"Positive\">Positive</option>\n                            <option value=\"Negative\">Negative</option>\n                            <option value=\"Unknown\">Unknown</option>\n                          </Input>\n                        </InputGroup>\n                        {errors.staticHivStatus !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.staticHivStatus}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {/* END OF HIV ENROLLEMENT FORM */}\n              {saving ? <Spinner /> : \"\"}\n\n              <br />\n\n              {objValues.gaweeks > 0 &&\n                ancNumberCheck !== true &&\n                objValues.gravida >= objValues.parity && (\n                  <MatButton\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    hidden={disabledField}\n                    className={classes.button}\n                    startIcon={<SaveIcon />}\n                    disabled={disabledAgeBaseOnAge}\n                    onClick={handleSubmit}\n                  >\n                    {!saving ? (\n                      <span style={{ textTransform: \"capitalize\" }}>\n                        Update\n                      </span>\n                    ) : (\n                      <span style={{ textTransform: \"capitalize\" }}>\n                        Updating...\n                      </span>\n                    )}\n                  </MatButton>\n                )}\n              <MatButton\n                variant=\"contained\"\n                className={classes.button}\n                startIcon={<CancelIcon />}\n                onClick={handleCancel}\n                style={{ backgroundColor: \"#992E62\" }}\n              >\n                <span style={{ textTransform: \"capitalize\", color: \"#fff\" }}>\n                  Cancel\n                </span>\n              </MatButton>\n            </Form>\n          </div>\n        </CardContent>\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"sm\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Are you Sure of the Age entered?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default UserRegistration;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\EnrollPatient.js",["684","685","686","687","688","689","690","691","692","693","694","695"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport MatButton from \"@material-ui/core/Button\";\nimport Button from \"@material-ui/core/Button\";\nimport { FormGroup, Label, Spinner, Input, Form, InputGroup } from \"reactstrap\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faCheckSquare,\n  faCoffee,\n  faEdit,\n  faTrash,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport { TiArrowBack } from \"react-icons/ti\";\nimport { token, url as baseUrl } from \"../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"./patient.css\";\nimport PmtctEnrollment from \"../PmtctServices/PmtctEnrollment\";\n// import Form from 'react-bootstrap/Form';\nimport { Modal } from \"react-bootstrap\";\n\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    flexGrow: 1,\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst UserRegistration = (props) => {\n  const [basicInfo, setBasicInfo] = useState({\n    active: true,\n    address: [],\n    contact: [],\n    contactPoint: [],\n    dateOfBirth: \"\",\n    deceased: false,\n    deceasedDateTime: null,\n    firstName: \"\",\n    genderId: \"\",\n    identifier: \"\",\n    otherName: \"\",\n    maritalStatusId: \"\",\n    educationId: \"\",\n    employmentStatusId: \"\",\n    dateOfRegistration: \"\",\n    isDateOfBirthEstimated: null,\n    age: \"\",\n    phoneNumber: \"\",\n    altPhonenumber: \"\",\n    dob: \"\",\n    countryId: \"\",\n    stateId: \"\",\n    district: \"\",\n    landmark: \"\",\n    sexId: \"\",\n    ninNumber: \"\",\n  });\n  const [saving, setSaving] = useState(false);\n  const [disabledAgeBaseOnAge, setDisabledAgeBaseOnAge] = useState(false);\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [genders, setGenders] = useState([]);\n  const [ancNumberCheck, setAncNumberCheck] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [activeContent, setActiveContent] = useState({\n    route: \"recent-history\",\n    id: \"\",\n    activeTab: \"home\",\n    actionType: \"\",\n    obj: {},\n  });\n\n  const userDetail =\n    props.location && props.location.state ? props.location.state.user : null;\n  const classes = useStyles();\n  const history = useHistory();\n  const location = useLocation();\n  const [ANCSetting, setANCSetting] = useState([]);\n\n  //const [values, setValues] = useState([]);\n  const [objValues, setObjValues] = useState({\n    ancSetting: \"\",\n    ancNo: \"\",\n    gaweeks: \"\",\n    gravida: \"\",\n    expectedDeliveryDate: \"\",\n    firstAncDate: \"\",\n    lmp: \"\",\n    parity: \"\",\n    person_uuid: \"\",\n    hivDiognosicTime: \"\",\n    referredSyphilisTreatment: \"\",\n    testResultSyphilis: \"\",\n    testedSyphilis: \"\",\n    treatedSyphilis: \"\",\n    personDto: {},\n    pmtctHtsInfo: {},\n    syphilisInfo: {},\n    partnerNotification: {},\n    // sourceOfReferral: \"\",\n    staticHivStatus: \"\",\n  });\n  console.log(\"location\", location.state);\n  const [pregnancyStatus, setPregnancyStatus] = useState([]);\n  //set ro show the facility name field if is transfer in\n\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const locationState = location.state;\n  let patientId = null;\n  let patientObj = {};\n  patientId = locationState ? locationState.patientId : null;\n  patientObj = locationState ? locationState.patientObj : {};\n  const [sourceOfReferral, setSourceOfReferral] = useState([]);\n  useEffect(() => {\n    getANCSetting();\n    loadGenders();\n    getSex();\n    PregnancyStatus();\n    if (patientObj) {\n      objValues.staticHivStatus =\n        patientObj && patientObj.dynamicHivStatus === \"Positive\"\n          ? \"Positive\"\n          : \"\";\n      const identifiers = patientObj.identifier;\n      const hospitalNumber = identifiers.identifier.find(\n        (obj) => obj.type === \"HospitalNumber\"\n      );\n      basicInfo.dob = patientObj.dateOfBirth;\n      basicInfo.firstName = patientObj.firstName;\n      basicInfo.dateOfRegistration = patientObj.dateOfRegistration;\n      basicInfo.middleName = patientObj.otherName;\n      basicInfo.lastName = patientObj.surname;\n      basicInfo.dateOfRegistration = patientObj.dateOfRegistration;\n      basicInfo.hospitalNumber =\n        hospitalNumber && hospitalNumber ? hospitalNumber.value : \"\";\n      setObjValues({\n        ...objValues,\n        uniqueId: hospitalNumber ? hospitalNumber.value : \"\",\n      });\n      basicInfo.genderId =\n        patientObj && patientObj.gender ? patientObj.gender.id : null;\n      const patientAge = calculate_age(\n        moment(patientObj.dateOfBirth).format(\"DD-MM-YYYY\")\n      );\n      basicInfo.age = patientAge;\n      objValues.personId = patientObj.id;\n      basicInfo.ninNumber = patientObj.ninNumber;\n      basicInfo.staticHivStatus = patientObj.dynamicHivStatus;\n    }\n    if (basicInfo.dateOfRegistration < basicInfo.dob) {\n      alert(\"Date of registration can not be earlier than date of birth\");\n    }\n    SOURCE_REFERRAL_PMTCT();\n  }, [patientObj, patientId, basicInfo.dateOfRegistration]);\n  //Get list of Source of Referral\n  const SOURCE_REFERRAL_PMTCT = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL_PMTCT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSourceOfReferral(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //get ANC setting\n  const getANCSetting = (e) => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TEST_SETTING_CPMTCT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        console.log(response);\n        setANCSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const getSex = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        let patientSex = \"\";\n        if (\n          patientObj.sex === \"female\" ||\n          patientObj.sex === \"Female\" ||\n          patientObj.sex === \"FEMALE\"\n        ) {\n          patientSex = \"Female\";\n        }\n        if (\n          patientObj.sex === \"Male\" ||\n          patientObj.sex === \"male\" ||\n          patientObj.sex === \"MALE\"\n        ) {\n          patientSex = \"Male\";\n        }\n        const getSexId = response.data.find((x) => x.display === patientSex); //get patient sex ID by filtering the request\n        basicInfo.sexId = getSexId.display;\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const loadGenders = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/SEX`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setGenders(response.data);\n    } catch (e) {}\n  }, []);\n  //Calculate Date of birth\n  const calculate_age = (dob) => {\n    var today = new Date();\n    var dateParts = dob.split(\"-\");\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n    var age_now = today.getFullYear() - birthDate.getFullYear();\n    var m = today.getMonth() - birthDate.getMonth();\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      age_now--;\n    }\n    if (age_now === 0) {\n      return m + \" month(s)\";\n    }\n    return age_now;\n  };\n\n  //   handle routing\n\n  const handleRoute = (data) => {\n    history.push({\n      pathname: \"/patient-history\",\n      state: { patientObj: data, postValue: \"L&D\" },\n    });\n  };\n  const handleAgeChange = (e) => {\n    const ageNumber = e.target.value.replace(/\\D/g, \"\");\n    if (!ageDisabled && ageNumber) {\n      if (ageNumber !== \"\" && ageNumber >= 60) {\n        toggle();\n      }\n      if (ageNumber <= 1) {\n        setDisabledAgeBaseOnAge(true);\n      } else {\n        setDisabledAgeBaseOnAge(false);\n      }\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(ageNumber * -1, \"years\");\n      //setBasicInfo({...basicInfo, dob: moment(dobNew).format(\"YYYY-MM-DD\")});\n      basicInfo.dob = moment(dobNew).format(\"YYYY-MM-DD\");\n    }\n    setBasicInfo({ ...basicInfo, age: ageNumber });\n  };\n  //End of Date of Birth and Age handling\n  /*****  Validation  */\n  const validate = () => {\n    let temp = { ...errors };\n    temp.gaweeks = objValues.gaweeks ? \"\" : \"This field is required\";\n    temp.gravida = objValues.gravida ? \"\" : \"This field is required\";\n    objValues.testResultSyphilis === \"Positive\" &&\n      (temp.referredSyphilisTreatment = objValues.referredSyphilisTreatment\n        ? \"\"\n        : \"This field is required\");\n    temp.lmp = objValues.lmp ? \"\" : \"This field is required\";\n    temp.parity = objValues.parity !== \"\" ? \"\" : \"This field is required\";\n    temp.testedSyphilis = objValues.testedSyphilis\n      ? \"\"\n      : \"This field is required\";\n    objValues.testResultSyphilis === \"Positive\" &&\n      (temp.treatedSyphilis = objValues.treatedSyphilis\n        ? \"\"\n        : \"This field is required\");\n    // temp.sourceOfReferral = objValues.sourceOfReferral\n    //   ? \"\"\n    //   : \"This field is required\";\n    objValues.testedSyphilis === \"Yes\" &&\n      (temp.testResultSyphilis = objValues.testResultSyphilis\n        ? \"\"\n        : \"This field is required\");\n    temp.staticHivStatus = objValues.staticHivStatus\n      ? \"\"\n      : \"This field is required\";\n    temp.ancNo = objValues.ancNo ? \"\" : \"This field is required\";\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x === \"\");\n  };\n  //Handle Input Change for Basic Infor\n  const handleInputChangeBasic = (e) => {\n    setErrors({ ...errors, [e.target.name]: \"\" });\n\n    setBasicInfo({ ...basicInfo, [e.target.name]: e.target.value });\n  };\n\n  //Get list of KP\n  const PregnancyStatus = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PREGANACY_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setPregnancyStatus(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputChange = (e) => {\n    setErrors({ ...errors, [e.target.name]: \"\" });\n    if (e.target.name === \"ancNo\" && e.target.value !== \"\") {\n      async function getAncNumber() {\n        const ancNumber = e.target.value;\n        const ancNo = {\n          ancNo: ancNumber,\n        };\n        const response = await axios.post(\n          `${baseUrl}pmtct/anc/exist/anc-number/${ancNumber}`,\n          ancNo,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data === true) {\n          toast.error(\"ANC number already exist\");\n          setAncNumberCheck(response.data);\n        } else {\n          setAncNumberCheck(false);\n        }\n      }\n      getAncNumber();\n    }\n    //Check for lmp and make an API call\n    if (e.target.name === \"lmp\" && e.target.value !== \"\") {\n      async function getGa() {\n        const ga = e.target.value;\n        const response = await axios.get(\n          `${baseUrl}pmtct/anc/calculate-ga/${ga}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data > 0) {\n          objValues.gaweeks = response.data;\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\n        } else {\n          objValues.gaweeks = response.data;\n          toast.error(\"Please select a validate date\");\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\n        }\n      }\n      getGa();\n    }\n    if (\n      e.target.name === \"parity\" &&\n      e.target.value !== \"\" &&\n      e.target.value < 0\n    ) {\n      //The field will  not accept zero as a value\n      return;\n    } //gravida\n    if (\n      e.target.name === \"gravida\" &&\n      e.target.value !== \"\" &&\n      e.target.value <= 0\n    ) {\n      //The field will  not accept zero as a value\n      return;\n    }\n    if (\n      e.target.name === \"testedSyphilis\" &&\n      e.target.value !== \"\" &&\n      e.target.value === \"Yes\"\n    ) {\n      //The field will  not accept zero as a value\n      objValues.testResultSyphilis = \"\";\n      objValues.referredSyphilisTreatment = \"\";\n      objValues.treatedSyphilis = \"\";\n      setObjValues({ ...objValues, [\"testResultSyphilis\"]: \"\" });\n      setObjValues({ ...objValues, [\"referredSyphilisTreatment\"]: \"\" });\n      setObjValues({ ...objValues, [\"treatedSyphilis\"]: \"\" });\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    }\n    if (\n      e.target.name === \"testResultSyphilis\" &&\n      e.target.value !== \"\" &&\n      e.target.value === \"Positive\"\n    ) {\n      //The field will  not accept zero as a value\n      objValues.treatedSyphilis = \"\";\n      objValues.referredSyphilisTreatment = \"\";\n      setObjValues({ ...objValues, [\"treatedSyphilis\"]: \"\" });\n      setObjValues({ ...objValues, [\"referredSyphilisTreatment\"]: \"\" });\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n\n  //Handle CheckBox\n  const handleCancel = () => {\n    history.push({ pathname: \"/\" });\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    console.log(\"reading\");\n    if (validate()) {\n      // ANC ENTRY POINT\n      if (locationState.showANC) {\n        try {\n          objValues.entryPoint = locationState.entrypointValue;\n\n          objValues.person_uuid = patientObj.uuid;\n          const response = await axios.post(\n            `${baseUrl}pmtct/anc/anc-enrollement`,\n            objValues,\n            { headers: { Authorization: `Bearer ${token}` } }\n          );\n          toast.success(\"Patient Register successful\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n          history.push({\n            pathname: \"/patient-history\",\n            state: {\n              patientObj: response.data,\n              postValue: locationState.postValue,\n              entrypointValue: locationState.entrypointValue,\n            },\n          });\n          // history.push(\"/\");\n        } catch (error) {\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            if (\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\" &&\n              error.response.data.apierror &&\n              error.response.data.apierror.subErrors[0].message !== \"\"\n            ) {\n              toast.error(\n                error.response.data.apierror.message +\n                  \" : \" +\n                  error.response.data.apierror.subErrors[0].field +\n                  \" \" +\n                  error.response.data.apierror.subErrors[0].message,\n                { position: toast.POSITION.BOTTOM_CENTER }\n              );\n            } else {\n              toast.error(errorMessage, {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            }\n          } else {\n            toast.error(\"Something went wrong. Please try again...\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        }\n      } else {\n        // LD AND POSTPARTUM ENTRY POINT\n        try {\n          objValues.person_uuid = patientObj.uuid;\n          const response = await axios.post(\n            `${baseUrl}pmtct/anc/pmtct-enrollment`,\n            objValues,\n            { headers: { Authorization: `Bearer ${token}` } }\n          );\n          console.log(\"i am here\", response);\n          // history.push(\"/\");\n          history.push({\n            pathname: \"/patient-history\",\n            state: {\n              patientObj: response.data,\n              postValue: locationState.postValue,\n              entrypointValue: locationState.entrypointValue,\n            },\n          });\n\n          toast.success(\"Patient Register successful\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        } catch (error) {\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            if (\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\" &&\n              error.response.data.apierror &&\n              error.response.data.apierror.subErrors[0].message !== \"\"\n            ) {\n              toast.error(\n                error.response.data.apierror.message +\n                  \" : \" +\n                  error.response.data.apierror.subErrors[0].field +\n                  \" \" +\n                  error.response.data.apierror.subErrors[0].message,\n                { position: toast.POSITION.BOTTOM_CENTER }\n              );\n            } else {\n              toast.error(errorMessage, {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            }\n          } else {\n            toast.error(\"Something went wrong. Please try again...\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <>\n      <div\n        className=\"row page-titles mx-0\"\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\n      >\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item active\">\n            <h4>\n              {\" \"}\n              <Link to={\"/\"}>PMTCT /</Link> Patient Enrollment\n            </h4>\n          </li>\n        </ol>\n      </div>\n      <ToastContainer autoClose={3000} hideProgressBar />\n      <Card className={classes.root}>\n        <CardContent>\n          <Link\n            to={{\n              pathname: \"/\",\n              state: \"users\",\n            }}\n          >\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\" float-end ms-1\"\n              style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\n              startIcon={<TiArrowBack />}\n            >\n              <span style={{ textTransform: \"capitalize\", color: \"#fff\" }}>\n                Back\n              </span>\n            </Button>\n          </Link>\n          <br />\n          <br />\n          <div className=\"col-xl-12 col-lg-12\">\n            <Form>\n              <div className=\"card\">\n                <div\n                  className=\"card-header\"\n                  style={{\n                    backgroundColor: \"#014d88\",\n                    color: \"#fff\",\n                    fontWeight: \"bolder\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                >\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\n                    {userDetail === null\n                      ? \"Basic Information\"\n                      : \"Edit User Information\"}\n                  </h5>\n                </div>\n\n                <div className=\"card-body\">\n                  <div className=\"basic-form\">\n                    <div className=\"row\">\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"firstName\">Name</Label>\n                          <Input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"firstName\"\n                            id=\"firstName\"\n                            value={\n                              basicInfo?.fullname\n                                ? basicInfo?.fullname\n                                : `${basicInfo.firstName} ${basicInfo.lastName}`\n                            }\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"none\",\n                              backgroundColor: \"transparent\",\n                              outline: \"none\",\n                            }}\n                            //disabled\n                          />\n\n                          {errors.firstName !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.firstName}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-3 col-md-3\">\n                        <FormGroup>\n                          <Label for=\"patientId\">Hospital Number </Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"hospitalNumber\"\n                            id=\"hospitalNumber\"\n                            value={basicInfo.hospitalNumber}\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"none\",\n                              backgroundColor: \"transparent\",\n                              outline: \"none\",\n                            }}\n                            //disabled\n                          />\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group  col-md-2\">\n                        <FormGroup>\n                          <Label>Sex </Label>\n                          <Input\n                            className=\"form-control\"\n                            name=\"sexId\"\n                            id=\"sexId\"\n                            onChange={handleInputChangeBasic}\n                            value={basicInfo.sexId}\n                            style={{\n                              border: \"none\",\n                              backgroundColor: \"transparent\",\n                              outline: \"none\",\n                            }}\n                          />\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-3 col-md-2\">\n                        <FormGroup>\n                          <Label>Age</Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"age\"\n                            id=\"age\"\n                            value={basicInfo.age}\n                            disabled={ageDisabled}\n                            onChange={handleAgeChange}\n                            style={{\n                              border: \"none\",\n                              backgroundColor: \"transparent\",\n                              outline: \"none\",\n                            }}\n                          />\n                        </FormGroup>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {/* Adding  ENROLLEMENT FORM HERE */}\n\n              {locationState.showANC ? (\n                <div className=\"card\">\n                  <div\n                    className=\"card-header\"\n                    style={{\n                      backgroundColor: \"#014d88\",\n                      color: \"#fff\",\n                      fontWeight: \"bolder\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\n                      ANC Enrollmentt\n                    </h5>\n                  </div>\n                  <div className=\"card-body\">\n                    <div className=\"row\">\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>ANC Setting</Label>\n                          <InputGroup>\n                            <Input\n                              type=\"select\"\n                              name=\"ancSetting\"\n                              id=\"encounterDate\"\n                              onChange={handleInputChange}\n                              value={objValues.ancSetting}\n                            >\n                              <option value=\"\">Select</option>\n                              {ANCSetting.length > 0 &&\n                                ANCSetting.map((each) => {\n                                  return (\n                                    <option value={each.code}>\n                                      {each.display}\n                                    </option>\n                                  );\n                                })}\n                            </Input>\n                          </InputGroup>\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            ANC No <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"text\"\n                              name=\"ancNo\"\n                              id=\"ancNo\"\n                              onChange={handleInputChange}\n                              value={objValues.ancNo}\n                            />\n                          </InputGroup>\n                          {errors.ancNo !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.ancNo}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                          {ancNumberCheck === true ? (\n                            <span className={classes.error}>\n                              {\"ANC number already exist\"}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Date of Enrollment{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"date\"\n                              name=\"firstAncDate\"\n                              id=\"firstAncDate\"\n                              onChange={handleInputChange}\n                              value={objValues.firstAncDate}\n                              min={patientObj.dateOfRegistration}\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            />\n                          </InputGroup>\n                          {errors.firstAncDate !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.firstAncDate}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Parity <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"number\"\n                              name=\"parity\"\n                              id=\"parity\"\n                              onChange={handleInputChange}\n                              value={objValues.parity}\n                              min={0}\n                            />\n                          </InputGroup>\n                          {errors.parity !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.parity}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                          {/* {objValues.parity !== \"\" && objValues.parity < 0 ? (\n                            <span className={classes.error}>\n                              Parity should not be less than 1\n                            </span>\n                          ) : (\n                            \"\"\n                          )} */}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Gravida <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"number\"\n                              name=\"gravida\"\n                              id=\"gragravidavida\"\n                              onChange={handleInputChange}\n                              value={objValues.gravida}\n                              min=\"1\"\n                            />\n                          </InputGroup>\n                          {errors.gravida !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.gravida}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                          {objValues.gravida < objValues.parity ? (\n                            <span className={classes.error}>\n                              Gravida should not be less Parity\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Date Of Last Menstrual Period{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>{\" \"}\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"date\"\n                              name=\"lmp\"\n                              id=\"lmp\"\n                              onChange={handleInputChange}\n                              value={objValues.lmp}\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            />\n                          </InputGroup>\n                          {errors.lmp !== \"\" ? (\n                            <span className={classes.error}>{errors.lmp}</span>\n                          ) : (\n                            \"\"\n                          )}\n                          {objValues.gaweeks === 0 ? (\n                            <span className={classes.error}>Invalid date </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Gestational Age (Weeks){\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"text\"\n                              name=\"gaweeks\"\n                              id=\"gaweeks\"\n                              onChange={handleInputChange}\n                              value={objValues.gaweeks}\n                              disabled\n                            />\n                          </InputGroup>\n                          {errors.gaweeks !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.gaweeks}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      {/* <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Source of Referral{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"select\"\n                              name=\"sourceOfReferral\"\n                              id=\"sourceOfReferral\"\n                              onChange={handleInputChange}\n                              value={objValues.sourceOfReferral}\n                            >\n                              <option value=\"\">Select</option>\n                              {sourceOfReferral.map((value, index) => (\n                                <option key={index} value={value.code}>\n                                  {value.display}\n                                </option>\n                              ))}\n                            </Input>\n                          </InputGroup>\n                          {errors.sourceOfReferral !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.sourceOfReferral}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div> */}\n\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Tested for syphilis{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"select\"\n                              name=\"testedSyphilis\"\n                              id=\"testedSyphilis\"\n                              onChange={handleInputChange}\n                              value={objValues.testedSyphilis}\n                            >\n                              <option value=\"\">Select</option>\n                              <option value=\"Yes\">Yes</option>\n                              <option value=\"No\">No</option>\n                            </Input>\n                          </InputGroup>\n                          {errors.testedSyphilis !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.testedSyphilis}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      {objValues.testedSyphilis === \"Yes\" && (\n                        <>\n                          <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                              <Label>\n                                Syphilis test result{\" \"}\n                                <span style={{ color: \"red\" }}> *</span>{\" \"}\n                              </Label>\n                              <InputGroup>\n                                <Input\n                                  type=\"select\"\n                                  name=\"testResultSyphilis\"\n                                  id=\"testResultSyphilis\"\n                                  onChange={handleInputChange}\n                                  value={objValues.testResultSyphilis}\n                                >\n                                  <option value=\"\">Select</option>\n                                  <option value=\"Positive\">Positive</option>\n                                  <option value=\"Negative\">Negative</option>\n                                </Input>\n                              </InputGroup>\n                              {errors.testResultSyphilis !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.testResultSyphilis}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n                          {objValues.testedSyphilis === \"Yes\" &&\n                            objValues.testResultSyphilis === \"Positive\" && (\n                              <>\n                                <div className=\"form-group mb-3 col-md-6\">\n                                  <FormGroup>\n                                    <Label>\n                                      Treated for syphilis (penicillin){\" \"}\n                                      <span style={{ color: \"red\" }}> *</span>{\" \"}\n                                    </Label>\n                                    <InputGroup>\n                                      <Input\n                                        type=\"select\"\n                                        name=\"treatedSyphilis\"\n                                        id=\"treatedSyphilis\"\n                                        onChange={handleInputChange}\n                                        value={objValues.treatedSyphilis}\n                                      >\n                                        <option value=\"\">Select</option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                      </Input>\n                                    </InputGroup>\n                                    {errors.treatedSyphilis !== \"\" ? (\n                                      <span className={classes.error}>\n                                        {errors.treatedSyphilis}\n                                      </span>\n                                    ) : (\n                                      \"\"\n                                    )}\n                                  </FormGroup>\n                                </div>\n                                <div className=\"form-group mb-3 col-md-6\">\n                                  <FormGroup>\n                                    <Label>\n                                      Referred Syphilis +ve client{\" \"}\n                                      <span style={{ color: \"red\" }}> *</span>{\" \"}\n                                    </Label>\n                                    <InputGroup>\n                                      <Input\n                                        type=\"select\"\n                                        name=\"referredSyphilisTreatment\"\n                                        id=\"referredSyphilisTreatment\"\n                                        onChange={handleInputChange}\n                                        value={\n                                          objValues.referredSyphilisTreatment\n                                        }\n                                      >\n                                        <option value=\"\">Select</option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                      </Input>\n                                    </InputGroup>\n                                    {errors.referredSyphilisTreatment !== \"\" ? (\n                                      <span className={classes.error}>\n                                        {errors.referredSyphilisTreatment}\n                                      </span>\n                                    ) : (\n                                      \"\"\n                                    )}\n                                  </FormGroup>\n                                </div>\n                              </>\n                            )}\n                        </>\n                      )}\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            HIV Status <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"select\"\n                              name=\"staticHivStatus\"\n                              id=\"staticHivStatus\"\n                              onChange={handleInputChange}\n                              value={objValues.staticHivStatus}\n                              disabled={\n                                patientObj.dynamicHivStatus === \"Positive\"\n                                  ? true\n                                  : false\n                              }\n                            >\n                              <option value=\"\">Select</option>\n                              <option value=\"Positive\">Positive</option>\n                              <option value=\"Negative\">Negative</option>\n                              <option value=\"Unknown\">Unknown</option>\n                            </Input>\n                          </InputGroup>\n                          {errors.staticHivStatus !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.staticHivStatus}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <PmtctEnrollment\n                  patientObj={patientObj}\n                  setActiveContent={setActiveContent}\n                  activeContent={activeContent}\n                  hideUpdateButton={true}\n                  entrypointValue={locationState.entrypointValue}\n                  ancEntryType={patientObj.ancNo ? true : false}\n                  handleRoute={handleRoute}\n                />\n              )}\n              {console.log(\"patientObj\", patientObj)}\n              {/* END OF HIV ENROLLEMENT FORM */}\n              {saving ? <Spinner /> : \"\"}\n\n              <br />\n\n              {locationState.showANC && (\n                <>\n                  {objValues.gaweeks > 0 &&\n                    ancNumberCheck !== true &&\n                    objValues.gravida >= objValues.parity && (\n                      <MatButton\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        startIcon={<SaveIcon />}\n                        hidden={ancNumberCheck}\n                        disabled={disabledAgeBaseOnAge}\n                        onClick={handleSubmit}\n                      >\n                        {!saving ? (\n                          <span style={{ textTransform: \"capitalize\" }}>\n                            Save\n                          </span>\n                        ) : (\n                          <span style={{ textTransform: \"capitalize\" }}>\n                            Saving...\n                          </span>\n                        )}\n                      </MatButton>\n                    )}\n                  <MatButton\n                    variant=\"contained\"\n                    className={classes.button}\n                    startIcon={<CancelIcon />}\n                    onClick={handleCancel}\n                    style={{ backgroundColor: \"#992E62\" }}\n                  >\n                    <span\n                      style={{ textTransform: \"capitalize\", color: \"#fff\" }}\n                    >\n                      Cancel\n                    </span>\n                  </MatButton>\n                </>\n              )}\n            </Form>\n          </div>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default UserRegistration;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\RegisterPatient.js",["696","697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","717"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport MatButton from \"@material-ui/core/Button\";\nimport Button from \"@material-ui/core/Button\";\nimport { FormGroup, Label, Spinner, Input, Form, InputGroup } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faCheckSquare,\n  faCoffee,\n  faEdit,\n  faTrash,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport { TiArrowBack } from \"react-icons/ti\";\nimport { token, url as baseUrl } from \"../../../api\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"./patient.css\";\nimport { Modal } from \"react-bootstrap\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { DateTimePicker } from \"react-widgets\";\nimport PmtctEnrollment from \"../PmtctServices/PmtctEnrollment\";\n\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst UserRegistration = (props) => {\n  const { state } = useLocation();\n\n  const [basicInfo, setBasicInfo] = useState({\n    active: true,\n    address: \"\",\n    contact: [],\n    contactPoint: [],\n    dateOfBirth: \"\",\n    deceased: false,\n    deceasedDateTime: null,\n    hospitalNumber: \"\",\n    firstName: \"\",\n    genderId: \"\",\n    identifier: \"\",\n    otherName: \"\",\n    maritalStatusId: \"\",\n    educationId: \"\",\n    employmentStatusId: \"\",\n    dateOfRegistration: \"\",\n    isDateOfBirthEstimated: null,\n    age: \"\",\n    phoneNumber: \"\",\n    altPhonenumber: \"\",\n    dob: \"\",\n    countryId: 1,\n    stateId: \"\",\n    district: \"\",\n    sexId: 377,\n    ninNumber: \"\",\n  });\n  const [relatives, setRelatives] = useState({\n    address: \"\",\n    phone: \"\",\n    firstName: \"\",\n    email: \"\",\n    relationshipId: \"\",\n    lastName: \"\",\n    middleName: \"\",\n  });\n  const [contacts, setContacts] = useState([]);\n  const [saving, setSaving] = useState(false);\n  const [disabledAgeBaseOnAge, setDisabledAgeBaseOnAge] = useState(false);\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [showRelative, setShowRelative] = useState(false);\n  const [genders, setGenders] = useState([]);\n  const [maritalStatusOptions, setMaritalStatusOptions] = useState([]);\n  const [educationOptions, setEducationOptions] = useState([]);\n  const [occupationOptions, setOccupationOptions] = useState([]);\n  const [relationshipOptions, setRelationshipOptions] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [states, setStates] = useState([]);\n  const [provinces, setProvinces] = useState([]);\n  const [errors, setErrors] = useState({});\n  const [topLevelUnitCountryOptions, settopLevelUnitCountryOptions] = useState(\n    []\n  );\n  const [activeContent, setActiveContent] = useState({\n    route: \"recent-history\",\n    id: \"\",\n    activeTab: \"home\",\n    actionType: \"\",\n    obj: {},\n  });\n\n  const userDetail =\n    props.location && props.location.state ? props.location.state.user : null;\n  const classes = useStyles();\n  const history = useHistory();\n  const location = useLocation();\n  //HIV INFORMATION\n  const [femaleStatus, setfemaleStatus] = useState(false);\n  //const [values, setValues] = useState([]);\n  const [objValues, setObjValues] = useState({\n    ancSetting: \"\",\n    ancNo: \"\",\n    gaweeks: \"\",\n    gravida: \"\",\n    expectedDeliveryDate: \"\",\n    firstAncDate: \"\",\n    lmp: \"\",\n    parity: \"\",\n    hivDiognosicTime: \"\",\n    referredSyphilisTreatment: \"\",\n    testResultSyphilis: \"\",\n    testedSyphilis: \"\",\n    treatedSyphilis: \"\",\n    personDto: {},\n    pmtctHtsInfo: {},\n    syphilisInfo: {},\n    partnerNotification: {},\n    staticHivStatus: \"\",\n  });\n  const [enroll, setEnrollDto] = useState({\n    // ancNo: patientObj.ancNo,\n    pmtctEnrollmentDate: \"\",\n    entryPoint: \"\",\n    // ga: props.patientObj.gaweeks,\n    // gravida: props.patientObj.gravida,\n    artStartDate: \"\",\n    artStartTime: \"\",\n    id: \"\",\n    tbStatus: \"\",\n    personDto: {},\n  });\n  const [carePoints, setCarePoints] = useState([]);\n  const [sourceReferral, setSourceReferral] = useState([]);\n  const [pregnancyStatus, setPregnancyStatus] = useState([]);\n  //set ro show the facility name field if is transfer in\n  const [ancNumberCheck, setAncNumberCheck] = useState(false);\n  //status for hospital Number\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\n  const [open, setOpen] = React.useState(false);\n  const [PMTCTObj, setPMTCTObj] = useState({});\n  const [ANCSetting, setANCSetting] = useState([]);\n\n  const toggle = () => setOpen(!open);\n  const locationState = location.state;\n  console.log(\"state recieved from location\", locationState);\n  let patientId = null;\n  patientId = locationState ? locationState.patientId : null;\n\n  let temp = { ...errors };\n\n  useEffect(() => {\n    getANCSetting();\n    loadGenders();\n    loadMaritalStatus();\n    loadEducation();\n    loadOccupation();\n    loadRelationships();\n    loadTopLevelCountry();\n    CareEntryPoint();\n    // SourceReferral();\n    PregnancyStatus();\n    GetCountry();\n    setStateByCountryId();\n    if (basicInfo.dateOfRegistration < basicInfo.dob) {\n      alert(\"Date of registration can not be earlier than date of birth\");\n    }\n  }, [basicInfo.dateOfRegistration]);\n\n  const loadGenders = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/SEX`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setGenders(response.data);\n    } catch (e) {}\n  }, []);\n  const loadMaritalStatus = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/MARITAL_STATUS`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setMaritalStatusOptions(response.data);\n    } catch (e) {}\n  }, []);\n  const loadEducation = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/EDUCATION`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setEducationOptions(response.data);\n    } catch (e) {}\n  }, []);\n  const loadOccupation = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/OCCUPATION`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setOccupationOptions(response.data);\n    } catch (e) {}\n  }, []);\n  const loadRelationships = useCallback(async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/RELATIONSHIP`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setRelationshipOptions(response.data);\n    } catch (e) {}\n  }, []);\n  const loadTopLevelCountry = useCallback(async () => {\n    const response = await axios.get(\n      `${baseUrl}organisation-units/parent-organisation-units/0`,\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n    settopLevelUnitCountryOptions(response.data);\n  }, []);\n  //Country List\n  const GetCountry = () => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/0`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setCountries(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  //Get list of State\n  const setStateByCountryId = () => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/1`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        // console.log(response.data);\n        setStates(response.data);\n      })\n      .catch((error) => {});\n  };\n  //fetch province\n  const getProvinces = (e) => {\n    const stateId = e.target.value;\n    if (e.target.value) {\n      setErrors({ ...errors, stateId: \"\" });\n    }\n    setBasicInfo({ ...basicInfo, stateId: e.target.value });\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  //get ANC setting\n  const getANCSetting = (e) => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TEST_SETTING_CPMTCT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        console.log(response);\n        setANCSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Date of Birth and Age handle\n  const handleDobChange = (e) => {\n    if (e.target.value) {\n      setErrors({ ...errors, dob: \"\" });\n\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n\n      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n        age_now--;\n      }\n      basicInfo.age = age_now;\n      //setBasicInfo({...basicInfo, age: age_now});\n    } else {\n      setBasicInfo({ ...basicInfo, age: \"\" });\n    }\n    setBasicInfo({ ...basicInfo, dob: e.target.value });\n    if (basicInfo.age !== \"\" && basicInfo.age >= 60) {\n      toggle();\n    }\n  };\n  const handleDateOfBirthChange = (e) => {\n    if (e.target.value == \"Actual\") {\n      setAgeDisabled(true);\n    } else if (e.target.value == \"Estimated\") {\n      setAgeDisabled(false);\n    }\n  };\n  const handleAgeChange = (e) => {\n    if (!ageDisabled && e.target.value) {\n      if (e.target.value !== \"\" && e.target.value >= 60) {\n        toggle();\n      }\n      if (e.target.value <= 1) {\n        setDisabledAgeBaseOnAge(true);\n      } else {\n        setDisabledAgeBaseOnAge(false);\n      }\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\n      //setBasicInfo({...basicInfo, dob: moment(dobNew).format(\"YYYY-MM-DD\")});\n      basicInfo.dob = moment(dobNew).format(\"YYYY-MM-DD\");\n    }\n    setBasicInfo({ ...basicInfo, age: Math.abs(e.target.value) });\n  };\n  //End of Date of Birth and Age handling\n  //Handle Input Change for Basic Infor\n  const handleInputChangeBasic = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    //manupulate inpute fields base on gender/sex\n    if (e.target.name === \"sexId\" && e.target.value === \"377\") {\n      setfemaleStatus(true);\n    } else if (e.target.name === \"firstName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setBasicInfo({ ...basicInfo, [e.target.name]: name });\n    } else if (e.target.name === \"lastName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setBasicInfo({ ...basicInfo, [e.target.name]: name });\n    } else if (e.target.name === \"middleName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setBasicInfo({ ...basicInfo, [e.target.name]: name });\n    } else if (e.target.name === \"ninNumber\" && e.target.value !== \"\") {\n      const ninNumberValue = checkNINLimit(e.target.value);\n      setBasicInfo({ ...basicInfo, [e.target.name]: ninNumberValue });\n    } else if (e.target.name === \"ancNo\" && e.target.value !== \"\") {\n      async function getAncNumber() {\n        const ancNumber = e.target.value;\n        const response = await axios.get(\n          `${baseUrl}pmtct/anc/exist/anc-number/${ancNumber}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data === true) {\n          toast.error(\"ANC number already exist\");\n          setAncNumberCheck(response.data);\n        } else {\n          setAncNumberCheck(false);\n        }\n      }\n      getAncNumber();\n    } else if (e.target.name === \"hospitalNumber\" && e.target.value !== \"\") {\n      setBasicInfo({\n        ...basicInfo,\n        hospitalNumber: e.target.value,\n      });\n      async function getHosiptalNumber() {\n        const hosiptalNumber = e.target.value;\n        const response = await axios.post(\n          `${baseUrl}patient/exist/hospital-number`,\n          hosiptalNumber,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data !== true) {\n          setHospitalNumStatus(false);\n          errors.hospitalNumber = \"\";\n        } else {\n          errors.hospitalNumber = \"\";\n          toast.error(\"Error! Hosiptal Number already exist\");\n          setHospitalNumStatus(true);\n        }\n      }\n      getHosiptalNumber();\n    } else {\n      setBasicInfo({ ...basicInfo, [e.target.name]: e.target.value });\n    }\n  };\n  //Function to show relatives\n  const handleAddRelative = () => {\n    setShowRelative(true);\n  };\n  //Function to cancel the relatives form\n  const handleCancelSaveRelationship = () => {\n    setShowRelative(false);\n  };\n  /*****  Validation  Relationship Input*/\n  const validateRelatives = () => {\n    let temp = { ...errors };\n    temp.firstName = relatives.firstName ? \"\" : \"First Name is required\";\n    temp.lastName = relatives.lastName ? \"\" : \"Last Name  is required.\";\n    temp.phone = relatives.phone ? \"\" : \"Phone Number  is required.\";\n    temp.relationshipId = relatives.relationshipId\n      ? \"\"\n      : \"Relationship Type is required.\";\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  // GET PMTCT INPUT FROM THE PMTCT COMPONENT\n  const getPMTCTInfo = (info) => {\n    // console.log(info);\n    setPMTCTObj(info);\n    return info;\n  };\n\n  //Function to add relatives\n  const handleSaveRelationship = (e) => {\n    if (validateRelatives()) {\n      setContacts([...contacts, relatives]);\n      setRelatives({\n        address: \"\",\n        phone: \"\",\n        firstName: \"\",\n        email: \"\",\n        relationshipId: \"\",\n        lastName: \"\",\n        middleName: \"\",\n      });\n    }\n  };\n  const handleDeleteRelative = (index) => {\n    contacts.splice(index, 1);\n    setContacts([...contacts]);\n  };\n\n  const handleEditRelative = (relative, index) => {\n    setRelatives(relative);\n    setShowRelative(true);\n    contacts.splice(index, 1);\n  };\n  const getRelationship = (relationshipId) => {\n    const relationship = relationshipOptions.find(\n      (obj) => obj.id === relationshipId\n    );\n    return relationship ? relationship.display : \"\";\n  };\n  const handleInputChangeRelatives = (e) => {\n    setRelatives({ ...relatives, [e.target.name]: e.target.value });\n  };\n  const handleInputChangeANC = (e) => {\n    setErrors({ ...errors, [e.target.name]: \"\" });\n    if (e.target.name === \"ancNo\" && e.target.value !== \"\") {\n      async function getAncNumber() {\n        const ancNumber = e.target.value;\n        const ancNo = {\n          ancNo: ancNumber,\n        };\n        const response = await axios.post(\n          `${baseUrl}pmtct/anc/exist/anc-number/${ancNumber}`,\n          ancNo,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data === true) {\n          toast.error(\"ANC number already exist\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n          setAncNumberCheck(response.data);\n        } else {\n          setAncNumberCheck(false);\n        }\n      }\n      getAncNumber();\n    }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n  /*****  Validation  */\n  const validate = () => {\n    temp.firstName = basicInfo.firstName ? \"\" : \"First Name is required\";\n    temp.hospitalNumber = basicInfo.hospitalNumber\n      ? \"\"\n      : \"Hospital Number  is required.\";\n    console.log(temp.hospitalNumber);\n    //temp.middleName = basicInfo.middleName ? \"\" : \"Middle is required.\"\n    //temp.landmark = basicInfo.landmark ? \"\" : \"This field is required.\"\n    temp.lastName = basicInfo.lastName ? \"\" : \"Last Name  is required.\";\n    temp.sexId = basicInfo.sexId ? \"\" : \"Gender is required.\";\n    temp.dateOfRegistration = basicInfo.dateOfRegistration\n      ? \"\"\n      : \"Date of Registration is required.\";\n    // temp.age =\n    //   basicInfo.age !== \"\" && basicInfo.age < 10\n    //     ? \"Minimum age for PMTCT enrolment is 10 years\"\n    //     : \" \";\n    temp.educationId = basicInfo.educationId ? \"\" : \"Education is required.\";\n    temp.address = basicInfo.address ? \"\" : \"Address is required.\";\n    temp.phoneNumber = basicInfo.phoneNumber\n      ? \"\"\n      : \"Phone Number  is required.\";\n    temp.countryId = basicInfo.countryId ? \"\" : \"Country is required.\";\n    temp.stateId = basicInfo.stateId ? \"\" : \"State is required.\";\n    temp.district = basicInfo.district ? \"\" : \"Province/LGA is required.\";\n    temp.dob = basicInfo.dateOfRegistration ? \"\" : \"Date is required\";\n\n    //ANC FORM VALIDATION\n    if (state.showANC) {\n      temp.gaweeks = objValues.gaweeks ? \"\" : \"This field is required\";\n      temp.gravida = objValues.gravida ? \"\" : \"This field is required\";\n      objValues.testResultSyphilis === \"Positive\" &&\n        (temp.referredSyphilisTreatment = objValues.referredSyphilisTreatment\n          ? \"\"\n          : \"This field is required\");\n      temp.lmp = objValues.lmp ? \"\" : \"This field is required\";\n      temp.parity = objValues.parity !== \"\" ? \"\" : \"This field is required\";\n      temp.testedSyphilis = objValues.testedSyphilis\n        ? \"\"\n        : \"This field is required\";\n      objValues.testResultSyphilis === \"Positive\" &&\n        (temp.treatedSyphilis = objValues.treatedSyphilis\n          ? \"\"\n          : \"This field is required\");\n      // temp.sourceOfReferral = objValues.sourceOfReferral\n      //   ? \"\"\n      //   : \"This field is required\";\n      objValues.testedSyphilis === \"Yes\" &&\n        (temp.testResultSyphilis = objValues.testResultSyphilis\n          ? \"\"\n          : \"This field is required\");\n      temp.staticHivStatus = objValues.staticHivStatus\n        ? \"\"\n        : \"This field is required\";\n      temp.ancNo = objValues.ancNo ? \"\" : \"This field is required\";\n    }\n\n    setErrors({ ...temp });\n\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    console.log(\"hereeeeee\");\n\n    if (validate()) {\n      if (basicInfo.age > 9) {\n        setSaving(true);\n        let newConatctsInfo = [];\n        //Manipulate relatives contact  address:\"\",\n        const actualcontacts =\n          contacts &&\n          contacts.length > 0 &&\n          contacts.map((x) => {\n            const contactInfo = {\n              address: {\n                line: [x.address],\n              },\n              contactPoint: {\n                type: \"phone\",\n                value: x.phone,\n              },\n              firstName: x.firstName,\n              fullName: x.firstName + \" \" + x.middleName + \" \" + x.lastName,\n              relationshipId: x.relationshipId,\n              surname: x.lastName,\n              otherName: x.middleName,\n            };\n\n            newConatctsInfo.push(contactInfo);\n          });\n\n        // ANC ENTRY POINT\n        if (state.showANC) {\n          try {\n            const patientForm = {\n              active: true,\n              address: [\n                {\n                  city: basicInfo.address,\n                  countryId: basicInfo.countryId,\n                  district: basicInfo.district,\n                  line: [basicInfo.landmark],\n                  organisationUnitId: 0,\n                  postalCode: \"\",\n                  stateId: basicInfo.stateId,\n                },\n              ],\n              contact: newConatctsInfo,\n              contactPoint: [],\n              dateOfBirth: basicInfo.dob,\n              deceased: false,\n              deceasedDateTime: null,\n              firstName: basicInfo.firstName,\n              genderId: basicInfo.sexId,\n              sexId: basicInfo.sexId,\n              identifier: [\n                {\n                  assignerId: 1,\n                  type: \"HospitalNumber\",\n                  value: basicInfo.hospitalNumber,\n                },\n              ],\n              otherName: basicInfo.middleName,\n              maritalStatusId: basicInfo.maritalStatusId,\n              surname: basicInfo.lastName,\n              educationId: basicInfo.educationId,\n              employmentStatusId: basicInfo.employmentStatusId,\n              dateOfRegistration: basicInfo.dateOfRegistration,\n              isDateOfBirthEstimated:\n                basicInfo.dateOfBirth == \"Actual\" ? false : true,\n              ninNumber: basicInfo.ninNumber,\n            };\n            const phone = {\n              type: \"phone\",\n              value: basicInfo.phoneNumber,\n            };\n            if (basicInfo.email) {\n              const email = {\n                type: \"email\",\n                value: basicInfo.email,\n              };\n              patientForm.contactPoint.push(email);\n            }\n            if (basicInfo.altPhonenumber) {\n              const altPhonenumber = {\n                type: \"altphone\",\n                value: basicInfo.altPhonenumber,\n              };\n              patientForm.contactPoint.push(altPhonenumber);\n            }\n            patientForm.contactPoint.push(phone);\n            patientForm.id = patientId;\n            objValues.personDto = patientForm;\n            //patientDTO.personDto=objValues;\n            console.log(objValues);\n\n            //\n            const response = await axios.post(\n              `${baseUrl}pmtct/anc/anc-new-registration`,\n              objValues,\n              { headers: { Authorization: `Bearer ${token}` } }\n            );\n            toast.success(\"Patient Register successful\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            //\n            console.log(response.data);\n            history.push({\n              pathname: \"/patient-history\",\n              state: {\n                patientObj: response.data,\n                postValue: locationState.postValue,\n                entrypointValue: locationState.entrypointValue,\n              },\n            });\n            // history.push(\"/\");\n            setSaving(false);\n          } catch (error) {\n            setSaving(false);\n            if (error.response && error.response.data) {\n              let errorMessage =\n                error.response.data.apierror &&\n                error.response.data.apierror.message !== \"\"\n                  ? error.response.data.apierror.message\n                  : \"Something went wrong, please try again\";\n              if (\n                error.response.data.apierror &&\n                error.response.data.apierror.message !== \"\" &&\n                error.response.data.apierror &&\n                error.response.data.apierror.subErrors[0].message !== \"\"\n              ) {\n                toast.error(\n                  error.response.data.apierror.message +\n                    \" : \" +\n                    error.response.data.apierror.subErrors[0].field +\n                    \" \" +\n                    error.response.data.apierror.subErrors[0].message,\n                  { position: toast.POSITION.BOTTOM_CENTER }\n                );\n              } else {\n                toast.error(errorMessage, {\n                  position: toast.POSITION.BOTTOM_CENTER,\n                });\n              }\n            } else {\n              toast.error(\"Something went wrong. Please try again...\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            }\n          }\n        } else {\n          // NOT ANC ENTRY POINT\n          console.log(\"here\");\n          try {\n            const patientForm = {\n              active: true,\n              address: [\n                {\n                  city: basicInfo.address,\n                  countryId: basicInfo.countryId,\n                  district: basicInfo.district,\n                  line: [basicInfo.landmark],\n                  organisationUnitId: 0,\n                  postalCode: \"\",\n                  stateId: basicInfo.stateId,\n                },\n              ],\n              contact: newConatctsInfo,\n              contactPoint: [],\n              dateOfBirth: basicInfo.dob,\n              deceased: false,\n              deceasedDateTime: null,\n              firstName: basicInfo.firstName,\n              genderId: basicInfo.sexId,\n              sexId: basicInfo.sexId,\n              identifier: [\n                {\n                  assignerId: 1,\n                  type: \"HospitalNumber\",\n                  value: basicInfo.hospitalNumber,\n                },\n              ],\n              otherName: basicInfo.middleName,\n              maritalStatusId: basicInfo.maritalStatusId,\n              surname: basicInfo.lastName,\n              educationId: basicInfo.educationId,\n              employmentStatusId: basicInfo.employmentStatusId,\n              dateOfRegistration: basicInfo.dateOfRegistration,\n              isDateOfBirthEstimated:\n                basicInfo.dateOfBirth == \"Actual\" ? false : true,\n              ninNumber: basicInfo.ninNumber,\n            };\n            const phone = {\n              type: \"phone\",\n              value: basicInfo.phoneNumber,\n            };\n            if (basicInfo.email) {\n              const email = {\n                type: \"email\",\n                value: basicInfo.email,\n              };\n              patientForm.contactPoint.push(email);\n            }\n            if (basicInfo.altPhonenumber) {\n              const altPhonenumber = {\n                type: \"altphone\",\n                value: basicInfo.altPhonenumber,\n              };\n              patientForm.contactPoint.push(altPhonenumber);\n            }\n            patientForm.contactPoint.push(phone);\n            patientForm.id = patientId;\n            enroll.personDto = patientForm;\n            // enroll.entryPoint = locationState.entrypointValue;\n            //patientDTO.personDto=objValues;\n            //console.log(objValues)\n            let payload = {\n              ...PMTCTObj,\n              personDto: patientForm,\n              entryPoint: locationState.entrypointValue,\n            };\n            console.log(\"payload\", payload);\n            const response = await axios.post(\n              `${baseUrl}pmtct/anc/pmtct-enrollment`,\n              payload,\n              { headers: { Authorization: `Bearer ${token}` } }\n            );\n            toast.success(\"Patient Register successful\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            history.push({\n              pathname: \"/patient-history\",\n              state: {\n                patientObj: response.data,\n                postValue: locationState.postValue,\n                entrypointValue: locationState.entrypointValue,\n              },\n            });\n\n            // history.push(\"/\");\n            setSaving(false);\n          } catch (error) {\n            setSaving(false);\n            if (error.response && error.response.data) {\n              let errorMessage =\n                error.response.data.apierror &&\n                error.response.data.apierror.message !== \"\"\n                  ? error.response.data.apierror.message\n                  : \"Something went wrong, please try again\";\n              if (\n                error?.response?.data?.apierror &&\n                error?.response?.data?.apierror?.message !== \"\" &&\n                error?.response?.data?.apierror &&\n                error?.response?.data?.apierror?.subErrors[0]?.message !== \"\"\n              ) {\n                toast.error(\n                  error.response.data.apierror.message +\n                    \" : \" +\n                    error.response.data.apierror.subErrors[0].field +\n                    \" \" +\n                    error.response.data.apierror.subErrors[0].message,\n                  { position: toast.POSITION.BOTTOM_CENTER }\n                );\n              } else {\n                toast.error(errorMessage, {\n                  position: toast.POSITION.BOTTOM_CENTER,\n                });\n              }\n            } else {\n              toast.error(\"Something went wrong. Please try again...\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            }\n          }\n        }\n      } else {\n        window.scrollTo(0, 0);\n      }\n    }\n  };\n\n  // end of submit\n  const alphabetOnly = (value) => {\n    const result = value.replace(/[^a-z]/gi, \"\");\n    return result;\n  };\n\n  const CareEntryPoint = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/POINT_ENTRY`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setCarePoints(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of Source of Referral\n  const SourceReferral = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL_PMTCT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setSourceReferral(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of KP\n  const PregnancyStatus = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PREGANACY_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setPregnancyStatus(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    if (e.target.name === \"ancNo\" && e.target.value !== \"\") {\n      async function getAncNumber() {\n        const ancNumber = e.target.value;\n        const ancNo = {\n          ancNo: ancNumber,\n        };\n        const response = await axios.post(\n          `${baseUrl}pmtct/anc/exist/anc-number/${ancNumber}`,\n          ancNo,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data === true) {\n          toast.error(\"ANC number already exist\");\n          setAncNumberCheck(response.data);\n        } else {\n          setAncNumberCheck(false);\n        }\n      }\n      getAncNumber();\n    }\n    if (e.target.name === \"lmp\" && e.target.value !== \"\") {\n      async function getGa() {\n        const ga = e.target.value;\n        const response = await axios.get(\n          `${baseUrl}pmtct/anc/calculate-ga/${ga}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data > 0) {\n          objValues.gaweeks = response.data;\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\n          setErrors({ ...errors, gaweeks: \"\" });\n        } else {\n          objValues.gaweeks = response.data;\n          toast.error(\"Please select a validate date\");\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\n        }\n      }\n      getGa();\n    }\n    if (\n      e.target.name === \"parity\" &&\n      e.target.value !== \"\" &&\n      e.target.value < 0\n    ) {\n      //The field will  not accept less zero as a value\n      return;\n    } //gravida\n    if (\n      e.target.name === \"gravida\" &&\n      e.target.value !== \"\" &&\n      e.target.value <= 0\n    ) {\n      //The field will  not accept zero as a value\n      return;\n    }\n    if (\n      e.target.name === \"testedSyphilis\" &&\n      e.target.value !== \"\" &&\n      e.target.value === \"Yes\"\n    ) {\n      //The field will  not accept zero as a value\n      objValues.testResultSyphilis = \"\";\n      objValues.referredSyphilisTreatment = \"\";\n      objValues.treatedSyphilis = \"\";\n      setObjValues({ ...objValues, [\"testResultSyphilis\"]: \"\" });\n      setObjValues({ ...objValues, [\"referredSyphilisTreatment\"]: \"\" });\n      setObjValues({ ...objValues, [\"treatedSyphilis\"]: \"\" });\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    }\n    if (\n      e.target.name === \"testResultSyphilis\" &&\n      e.target.value !== \"\" &&\n      e.target.value === \"Positive\"\n    ) {\n      //The field will  not accept zero as a value\n      objValues.treatedSyphilis = \"\";\n      objValues.referredSyphilisTreatment = \"\";\n      setObjValues({ ...objValues, [\"treatedSyphilis\"]: \"\" });\n      setObjValues({ ...objValues, [\"referredSyphilisTreatment\"]: \"\" });\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n  const checkPhoneNumber = (e, inputName) => {\n    const limit = 10;\n    setRelatives({ ...relatives, [inputName]: e.slice(0, limit) });\n  };\n  const checkPhoneNumberBasic = (e, inputName) => {\n    console.log(e, inputName);\n    if (inputName === \"phoneNumber\") {\n      if (e) {\n        setErrors({ ...errors, phoneNumber: \"\" });\n      }\n      const limit = 10;\n      setBasicInfo({ ...basicInfo, phoneNumber: e.slice(0, limit) });\n    }\n    if (inputName === \"altPhonenumber\") {\n      const limit = 10;\n      setBasicInfo({ ...basicInfo, altPhonenumber: e.slice(0, limit) });\n    }\n  };\n  const checkNINLimit = (e) => {\n    const limit = 11;\n    const acceptedNumber = e.slice(0, limit);\n    return acceptedNumber;\n  };\n  //Handle CheckBox\n  // const handleCheckBox =e =>{\n  //     if(e.target.checked){\n  //         setOvcEnrolled(true)\n  //     }else{\n  //         setOvcEnrolled(false)\n  //     }\n  // }\n  const handleCancel = () => {\n    history.push({ pathname: \"/\" });\n  };\n\n  return (\n    <>\n      <ToastContainer autoClose={3000} hideProgressBar />\n      <div\n        className=\"row page-titles mx-0\"\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\n      >\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item active\">\n            <h4>\n              {\" \"}\n              <Link to={\"/\"}>PMTCT /</Link> Patient Registration\n            </h4>\n          </li>\n        </ol>\n      </div>\n      <Link\n        to={{\n          pathname: \"/\",\n          state: \"users\",\n        }}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className=\" float-end mr-10 pr-10\"\n          style={{\n            backgroundColor: \"#014d88\",\n            fontWeight: \"bolder\",\n            margingRight: \"-40px\",\n          }}\n          startIcon={<TiArrowBack />}\n        >\n          <span style={{ textTransform: \"capitalize\", color: \"#fff\" }}>\n            Back{\" \"}\n          </span>\n        </Button>\n      </Link>\n      <br />\n      <br />\n\n      <Card className={classes.root}>\n        <CardContent>\n          <div className=\"col-xl-12 col-lg-12\">\n            <Form>\n              <div className=\"card\">\n                <div\n                  className=\"card-header\"\n                  style={{\n                    backgroundColor: \"#014d88\",\n                    color: \"#fff\",\n                    fontWeight: \"bolder\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                >\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\n                    {userDetail === null\n                      ? \"Basic Information\"\n                      : \"Edit User Information\"}\n                  </h5>\n                </div>\n\n                <div className=\"card-body\">\n                  <div className=\"basic-form\">\n                    <div className=\"row\">\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"dateOfRegistration\">\n                            Date of Registration{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>{\" \"}\n                          </Label>\n                          <Input\n                            className=\"form-control\"\n                            type=\"date\"\n                            name=\"dateOfRegistration\"\n                            id=\"dateOfRegistration\"\n                            min=\"1983-12-31\"\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            value={basicInfo.dateOfRegistration}\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                          {errors.dateOfRegistration !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.dateOfRegistration}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"patientId\">\n                            Hospital Number{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>{\" \"}\n                          </Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"hospitalNumber\"\n                            id=\"hospitalNumber\"\n                            value={basicInfo.hospitalNumber}\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                          {errors.hospitalNumber !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.hospitalNumber}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                          {hospitalNumStatus === true ? (\n                            <span className={classes.error}>\n                              {\"Hospital number already exist\"}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                          {/* {hospitalNumStatus2===true ? (\n                                                        <span className={classes.success}>{\"Hospital number is OK.\"}</span>\n                                                    ) :\"\"} */}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"ninNumber\">\n                            National Identity Number (NIN){\" \"}\n                          </Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"number\"\n                            name=\"ninNumber\"\n                            value={basicInfo.ninNumber}\n                            id=\"ninNumber\"\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                        </FormGroup>\n                      </div>\n\n                      {/* <div className=\"form-group mb-3 col-md-4\">\n                                                <FormGroup>\n                                                    <Label for=\"patientId\">EMR Number </Label>\n                                                    <input\n                                                        className=\"form-control\"\n                                                        type=\"text\"\n                                                        name=\"emrNumber\"\n                                                        id=\"emrNumber\"\n                                                        disabled='true'\n                                                        //value={1094328}\n                                                        //onChange={handleInputChangeBasic}\n                                                        style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}\n                                                    />\n                                                   \n                                                </FormGroup>\n                                            \n                                            </div> */}\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"firstName\">\n                            First Names <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <Input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"firstName\"\n                            id=\"firstName\"\n                            value={basicInfo.firstName}\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                          {errors.firstName !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.firstName}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label>Middle Name</Label>\n                          <Input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"middleName\"\n                            id=\"middleName\"\n                            value={basicInfo.middleName}\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Last Name <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            name=\"lastName\"\n                            id=\"lastName\"\n                            value={basicInfo.lastName}\n                            onChange={handleInputChangeBasic}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                          {errors.lastName !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.lastName}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    </div>\n\n                    <div className=\"row\">\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Sex <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"sexId\"\n                            id=\"sexId\"\n                            onChange={handleInputChangeBasic}\n                            value={basicInfo.sexId}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                            disabled\n                          >\n                            <option value={\"\"}>Select</option>\n                            {genders.map((gender, index) => (\n                              <option key={gender.id} value={gender.id}>\n                                {gender.display}\n                              </option>\n                            ))}\n                          </select>\n                          {errors.sexId !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.sexId}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-2 col-md-2\">\n                        <FormGroup>\n                          <Label>Date Of Birth</Label>\n                          <div className=\"radio\">\n                            <label>\n                              <input\n                                type=\"radio\"\n                                value=\"Actual\"\n                                name=\"dateOfBirth\"\n                                defaultChecked\n                                onChange={(e) => handleDateOfBirthChange(e)}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                              />{\" \"}\n                              Actual\n                            </label>\n                          </div>\n                          <div className=\"radio\">\n                            <label>\n                              <input\n                                type=\"radio\"\n                                value=\"Estimated\"\n                                name=\"dateOfBirth\"\n                                onChange={(e) => handleDateOfBirthChange(e)}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                              />{\" \"}\n                              Estimated\n                            </label>\n                          </div>\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-2\">\n                        <FormGroup>\n                          <Label>\n                            Date <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <input\n                            className=\"form-control\"\n                            type=\"date\"\n                            name=\"dob\"\n                            min=\"1940-01-01\"\n                            id=\"dob\"\n                            // max={basicInfo.dateOfRegistration}\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            value={basicInfo.dob}\n                            onChange={handleDobChange}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                        </FormGroup>\n                        {errors.dob !== \"\" ? (\n                          <span className={classes.error}>{errors.dob}</span>\n                        ) : (\n                          \"\"\n                        )}\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label>Age</Label>\n                          <input\n                            type=\"number\"\n                            name=\"age\"\n                            className=\"form-control\"\n                            id=\"age\"\n                            min=\"5\"\n                            value={basicInfo.age}\n                            disabled={ageDisabled}\n                            onChange={handleAgeChange}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />\n                        </FormGroup>\n                        <p>\n                          <b style={{ color: \"red\" }}>\n                            {basicInfo.age !== \"\" && basicInfo.age < 5\n                              ? \"Minimum age for PMTCT enrolment is 5 years\"\n                              : \" \"}{\" \"}\n                          </b>\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className={\"row\"}>\n                      {/*                                            {watchShowAge >=0 &&\n                                            <>*/}\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label>Marital Status</Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"maritalStatusId\"\n                            id=\"maritalStatusId\"\n                            onChange={handleInputChangeBasic}\n                            value={basicInfo.maritalStatusId}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}>Select</option>\n                            {maritalStatusOptions.map(\n                              (maritalStatusOption, index) => (\n                                <option\n                                  key={maritalStatusOption.id}\n                                  value={maritalStatusOption.id}\n                                >\n                                  {maritalStatusOption.display}\n                                </option>\n                              )\n                            )}\n                          </select>\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Employment Status{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"employmentStatusId\"\n                            id=\"employmentStatusId\"\n                            onChange={handleInputChangeBasic}\n                            value={basicInfo.employmentStatusId}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}>Select</option>\n                            {occupationOptions.map(\n                              (occupationOption, index) => (\n                                <option\n                                  key={occupationOption.id}\n                                  value={occupationOption.id}\n                                >\n                                  {occupationOption.display}\n                                </option>\n                              )\n                            )}\n                          </select>\n                          {errors.employmentStatusId !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.employmentStatusId}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Education Level{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"educationId\"\n                            id=\"educationId\"\n                            onChange={handleInputChangeBasic}\n                            value={basicInfo.educationId}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}>Select</option>\n                            {educationOptions.map((educationOption, index) => (\n                              <option\n                                key={educationOption.id}\n                                value={educationOption.id}\n                              >\n                                {educationOption.display}\n                              </option>\n                            ))}\n                          </select>\n                          {errors.educationId !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.educationId}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"card\">\n                <div\n                  className=\"card-header\"\n                  style={{\n                    backgroundColor: \"#014d88\",\n                    color: \"#fff\",\n                    fontWeight: \"bolder\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                >\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\n                    Contact Details\n                  </h5>\n                </div>\n\n                <div className=\"card-body\">\n                  <div className={\"row\"}>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Phone Number <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <PhoneInput\n                          containerStyle={{\n                            width: \"100%\",\n                            border: \"1px solid #014D88\",\n                          }}\n                          inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\n                          country={\"ng\"}\n                          placeholder=\"(234)7099999999\"\n                          maxLength={5}\n                          name=\"phoneNumber\"\n                          id=\"phoneNumber\"\n                          masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\n                          value={basicInfo.phoneNumber}\n                          onChange={(e) => {\n                            checkPhoneNumberBasic(e, \"phoneNumber\");\n                          }}\n                          //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\n                        />\n\n                        {errors.phoneNumber !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.phoneNumber}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                        {/* {basicInfo.phoneNumber.length >13 ||  basicInfo.phoneNumber.length <13? (\n                                                <span className={classes.error}>{\"The maximum and minimum required number is 13 digit\"}</span>\n                                                ) : \"\" } */}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group col-md-4\">\n                      <FormGroup>\n                        <Label>Alt. Phone Number</Label>\n                        <PhoneInput\n                          containerStyle={{\n                            width: \"100%\",\n                            border: \"1px solid #014D88\",\n                          }}\n                          inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\n                          country={\"ng\"}\n                          placeholder=\"(234)7099999999\"\n                          value={basicInfo.altPhonenumber}\n                          masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\n                          onChange={(e) => {\n                            checkPhoneNumberBasic(e, \"altPhonenumber\");\n                          }}\n                        />\n                        {/* {basicInfo.phoneNumber.length >13 ||  basicInfo.phoneNumber.length <13? (\n                                                <span className={classes.error}>{\"The maximum and minimum required number is 13 digit\"}</span>\n                                                ) : \"\" } */}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group col-md-4\">\n                      <FormGroup>\n                        <Label>Email</Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"email\"\n                          name=\"email\"\n                          id=\"email\"\n                          onChange={handleInputChangeBasic}\n                          value={basicInfo.email}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          required\n                        />\n                      </FormGroup>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Country <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"countryId\"\n                          id=\"countryId\"\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          value={basicInfo.countryId}\n                          disabled\n                          //onChange={getStates}\n                        >\n                          <option value={\"\"}>Select</option>\n                          {countries.map((value, index) => (\n                            <option key={index} value={value.id}>\n                              {value.name}\n                            </option>\n                          ))}\n                        </select>\n                        {errors.countryId !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.countryId}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          State <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"stateId\"\n                          id=\"stateId\"\n                          value={basicInfo.stateId}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          onChange={getProvinces}\n                        >\n                          <option value=\"\">Select</option>\n                          {states.map((value, index) => (\n                            <option key={index} value={value.id}>\n                              {value.name}\n                            </option>\n                          ))}\n                        </select>\n                        {errors.stateId !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.stateId}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Province/District/LGA{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"district\"\n                          id=\"district\"\n                          value={basicInfo.district}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          onChange={handleInputChangeBasic}\n                        >\n                          <option value=\"\">Select</option>\n                          {provinces.map((value, index) => (\n                            <option key={index} value={value.id}>\n                              {value.name}\n                            </option>\n                          ))}\n                        </select>\n                        {errors.district !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.district}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  </div>\n\n                  <div className={\"row\"}>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Street Address{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"address\"\n                          id=\"address\"\n                          value={basicInfo.address}\n                          onChange={handleInputChangeBasic}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        />\n                        {errors.address !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.address}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Landmark</Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"landmark\"\n                          id=\"landmark\"\n                          value={basicInfo.landmark}\n                          onChange={handleInputChangeBasic}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"card\">\n                <div\n                  className=\"card-header\"\n                  style={{\n                    backgroundColor: \"#014d88\",\n                    color: \"#fff\",\n                    fontWeight: \"bolder\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                >\n                  <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\n                    Relationship / Next Of Kin\n                  </h5>\n                </div>\n                <div className=\"card-body\">\n                  <div className=\"row\">\n                    {contacts && contacts.length > 0 && (\n                      <div className=\"col-xl-12 col-lg-12\">\n                        <table style={{ width: \"100%\" }} className=\"mb-3\">\n                          <thead className=\"mb-3\">\n                            <tr>\n                              <th>Relationship Type</th>\n                              <th>Name</th>\n                              <th>Phone</th>\n                              <th>Address</th>\n                              <th>Actions</th>\n                            </tr>\n                          </thead>\n                          <tbody className=\"mb-3\">\n                            {contacts.map((item, index) => {\n                              return (\n                                <tr key={item.index} className=\"mb-3\">\n                                  <td>\n                                    {getRelationship(item.relationshipId)}\n                                  </td>\n                                  <td>\n                                    {item.firstName +\n                                      \" \" +\n                                      item.middleName +\n                                      \" \" +\n                                      item.lastName}\n                                  </td>\n                                  <td>{item.phone}</td>\n                                  <td>{item.address}</td>\n                                  <td>\n                                    <button\n                                      type=\"button\"\n                                      className=\"btn btn-default btn-light btn-sm editRow\"\n                                      onClick={() =>\n                                        handleEditRelative(item, index)\n                                      }\n                                    >\n                                      <FontAwesomeIcon icon=\"edit\" />\n                                    </button>\n                                    &nbsp;&nbsp;\n                                    <button\n                                      type=\"button\"\n                                      className=\"btn btn-danger btn-sm removeRow\"\n                                      onClick={(e) =>\n                                        handleDeleteRelative(index)\n                                      }\n                                    >\n                                      <FontAwesomeIcon icon=\"trash\" />\n                                    </button>\n                                  </td>\n                                </tr>\n                              );\n                            })}\n                          </tbody>\n                        </table>\n                      </div>\n                    )}\n                    <div className=\"col-xl-12 col-lg-12\">\n                      {showRelative && (\n                        <div className=\"card\">\n                          <div className=\"card-body\">\n                            <div className=\"row\">\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"relationshipType\">\n                                    Relationship Type{\" \"}\n                                    <span style={{ color: \"red\" }}> *</span>\n                                  </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"relationshipId\"\n                                    id=\"relationshipId\"\n                                    value={relatives.relationshipId}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    onChange={handleInputChangeRelatives}\n                                  >\n                                    <option value={\"\"}>Select</option>\n                                    {relationshipOptions.map(\n                                      (relative, index) => (\n                                        <option\n                                          key={relative.id}\n                                          value={relative.id}\n                                        >\n                                          {relative.display}\n                                        </option>\n                                      )\n                                    )}\n                                  </select>\n                                  {errors.relationshipId !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.relationshipId}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"cfirstName\">\n                                    First Name{\" \"}\n                                    <span style={{ color: \"red\" }}> *</span>\n                                  </Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"firstName\"\n                                    value={relatives.firstName}\n                                    id=\"firstName\"\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    onChange={handleInputChangeRelatives}\n                                  />\n                                  {errors.firstName !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.firstName}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label>Middle Name</Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"middleName\"\n                                    id=\"middleName\"\n                                    value={relatives.middleName}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    onChange={handleInputChangeRelatives}\n                                  />\n                                  {/* {errors.cmiddleName && <p>{errors.cmiddleName.message}</p>} */}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label>\n                                    Last Name{\" \"}\n                                    <span style={{ color: \"red\" }}> *</span>\n                                  </Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"lastName\"\n                                    id=\"lastName\"\n                                    value={relatives.lastName}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    onChange={handleInputChangeRelatives}\n                                  />\n                                  {errors.lastName !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.lastName}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n                            </div>\n\n                            <div className=\"row\">\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"contactPhoneNumber\">\n                                    Phone Number\n                                  </Label>\n                                  <PhoneInput\n                                    containerStyle={{\n                                      width: \"100%\",\n                                      border: \"1px solid #014D88\",\n                                    }}\n                                    inputStyle={{\n                                      width: \"100%\",\n                                      borderRadius: \"0px\",\n                                    }}\n                                    country={\"ng\"}\n                                    placeholder=\"(234)7099999999\"\n                                    name=\"phone\"\n                                    value={relatives.phone}\n                                    masks={{\n                                      ng: \"...-...-....\",\n                                      at: \"(....) ...-....\",\n                                    }}\n                                    id=\"phone\"\n                                    onChange={(e) => {\n                                      checkPhoneNumber(e, \"phone\");\n                                    }}\n                                  />\n                                  {errors.phone !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.phone}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"contactEmail\">Email</Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"email\"\n                                    name=\"email\"\n                                    id=\"email\"\n                                    value={relatives.email}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    onChange={handleInputChangeRelatives}\n                                    required\n                                  />\n                                  {/* {errors.contactEmail && <p>{errors.contactEmail.message}</p>} */}\n                                </FormGroup>\n                              </div>\n\n                              <div className=\"form-group mb-3 col-md-3\">\n                                <FormGroup>\n                                  <Label for=\"contactAddress\">Address</Label>\n                                  <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"address\"\n                                    id=\"address\"\n                                    value={relatives.address}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    onChange={handleInputChangeRelatives}\n                                  />\n                                  {/* {errors.contactAddress && <p>{errors.contactAddress.message}</p>} */}\n                                </FormGroup>\n                              </div>\n                            </div>\n\n                            <div className=\"row\">\n                              <div className=\"col-1\">\n                                <MatButton\n                                  type=\"button\"\n                                  variant=\"contained\"\n                                  color=\"primary\"\n                                  className={classes.button}\n                                  onClick={handleSaveRelationship}\n                                >\n                                  Add\n                                </MatButton>\n                              </div>\n\n                              <div className=\"col-1\">\n                                <MatButton\n                                  type=\"button\"\n                                  variant=\"contained\"\n                                  color=\"secondary\"\n                                  className={classes.button}\n                                  onClick={handleCancelSaveRelationship}\n                                >\n                                  Cancel\n                                </MatButton>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"row\"></div>\n                  <MatButton\n                    type=\"button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.button}\n                    startIcon={<AddIcon />}\n                    onClick={handleAddRelative}\n                    style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\n                  >\n                    Add a Relative/Next Of Kin\n                  </MatButton>\n                  {/* </div> */}\n                </div>\n              </div>\n              {/* Adding HIV ENROLLEMENT FORM HERE */}\n              {state.showANC && (\n                <div className=\"card\">\n                  <div\n                    className=\"card-header\"\n                    style={{\n                      backgroundColor: \"#014d88\",\n                      color: \"#fff\",\n                      fontWeight: \"bolder\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <h5 className=\"card-title\" style={{ color: \"#fff\" }}>\n                      ANC Enrollment\n                    </h5>\n                  </div>\n\n                  <div className=\"card-body\">\n                    <div className=\"row\">\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>ANC Setting</Label>\n                          <InputGroup>\n                            <Input\n                              type=\"select\"\n                              name=\"ancSetting\"\n                              id=\"encounterDate\"\n                              onChange={handleInputChangeANC}\n                              value={objValues.ancSetting}\n                            >\n                              <option value=\"\">Select</option>\n                              {ANCSetting.length > 0 &&\n                                ANCSetting.map((each) => {\n                                  return (\n                                    <option value={each.code}>\n                                      {each.display}\n                                    </option>\n                                  );\n                                })}\n                            </Input>\n                          </InputGroup>\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            ANC No <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"text\"\n                              name=\"ancNo\"\n                              id=\"ancNo\"\n                              onChange={handleInputChangeANC}\n                              value={objValues.ancNo}\n                            />\n                          </InputGroup>\n                          {errors.ancNo !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.ancNo}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                          {ancNumberCheck === true ? (\n                            <span className={classes.error}>\n                              {\"ANC number already exist\"}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Date of Enrollment{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"date\"\n                              name=\"firstAncDate\"\n                              id=\"firstAncDate\"\n                              onChange={handleInputChange}\n                              value={objValues.firstAncDate}\n                              min={basicInfo.dateOfRegistration}\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            />\n                          </InputGroup>\n                          {errors.firstAncDate !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.firstAncDate}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Parity <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"number\"\n                              name=\"parity\"\n                              id=\"parity\"\n                              onChange={handleInputChange}\n                              value={objValues.parity}\n                              min=\"0\"\n                            />\n                          </InputGroup>\n                          {errors.parity !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.parity}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                          {objValues.parity !== \"\" && objValues.parity < 0 ? (\n                            <span className={classes.error}>\n                              Parity should not be less than 1\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Gravida <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"number\"\n                              name=\"gravida\"\n                              id=\"gravida\"\n                              onChange={handleInputChange}\n                              value={objValues.gravida}\n                              min={objValues.parity}\n                            />\n                          </InputGroup>\n                          {errors.gravida !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.gravida}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                          {objValues.gravida < objValues.parity ? (\n                            <span className={classes.error}>\n                              Gravida should not be less Parity\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Date Of Last Menstrual Period{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>{\" \"}\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"date\"\n                              name=\"lmp\"\n                              id=\"lmp\"\n                              onChange={handleInputChange}\n                              value={objValues.lmp}\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            />\n                          </InputGroup>\n                          {errors.lmp !== \"\" ? (\n                            <span className={classes.error}>{errors.lmp}</span>\n                          ) : (\n                            \"\"\n                          )}\n                          {objValues.gaweeks === 0 ? (\n                            <span className={classes.error}>Invalid date </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Gestational Age (Weeks){\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"number\"\n                              name=\"gaweeks\"\n                              id=\"gaweeks\"\n                              onChange={handleInputChange}\n                              value={objValues.gaweeks}\n                              disabled\n                            />\n                          </InputGroup>\n                          {errors.gaweeks !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.gaweeks}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      {/* <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Source of Referral{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"select\"\n                              name=\"sourceOfReferral\"\n                              id=\"sourceOfReferral\"\n                              onChange={handleInputChange}\n                              value={objValues.sourceOfReferral}\n                            >\n                          \n                              <option value=\"\">Select</option>\n                              {sourceReferral.map((value, index) => (\n                                <option key={index} value={value.code}>\n                                  {value.display}\n                                </option>\n                              ))}\n                            </Input>\n                          </InputGroup>\n                          {errors.sourceOfReferral !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.sourceOfReferral}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div> */}\n\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Tested for syphilis{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"select\"\n                              name=\"testedSyphilis\"\n                              id=\"testedSyphilis\"\n                              onChange={handleInputChange}\n                              value={objValues.testedSyphilis}\n                            >\n                              <option value=\"\">Select</option>\n                              <option value=\"Yes\">Yes</option>\n                              <option value=\"No\">No</option>\n                            </Input>\n                          </InputGroup>\n                          {errors.testedSyphilis !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.testedSyphilis}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      {objValues.testedSyphilis === \"Yes\" && (\n                        <>\n                          <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                              <Label>\n                                Syphilis test result{\" \"}\n                                <span style={{ color: \"red\" }}> *</span>\n                              </Label>\n                              <InputGroup>\n                                <Input\n                                  type=\"select\"\n                                  name=\"testResultSyphilis\"\n                                  id=\"testResultSyphilis\"\n                                  onChange={handleInputChange}\n                                  value={objValues.testResultSyphilis}\n                                >\n                                  <option value=\"\">Select</option>\n                                  <option value=\"Positive\">Positive</option>\n                                  <option value=\"Negative\">Negative</option>\n                                </Input>\n                              </InputGroup>\n                              {errors.testResultSyphilis !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.testResultSyphilis}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n                          {objValues.testedSyphilis === \"Yes\" &&\n                            objValues.testResultSyphilis === \"Positive\" && (\n                              <>\n                                <div className=\"form-group mb-3 col-md-6\">\n                                  <FormGroup>\n                                    <Label>\n                                      Treated for syphilis (penicillin){\" \"}\n                                    </Label>\n                                    <InputGroup>\n                                      <Input\n                                        type=\"select\"\n                                        name=\"treatedSyphilis\"\n                                        id=\"treatedSyphilis\"\n                                        onChange={handleInputChange}\n                                        value={objValues.encounterDate}\n                                      >\n                                        <option value=\"\">Select</option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                      </Input>\n                                    </InputGroup>\n                                    {errors.treatedSyphilis !== \"\" ? (\n                                      <span className={classes.error}>\n                                        {errors.treatedSyphilis}\n                                      </span>\n                                    ) : (\n                                      \"\"\n                                    )}\n                                  </FormGroup>\n                                </div>\n                                <div className=\"form-group mb-3 col-md-6\">\n                                  <FormGroup>\n                                    <Label>Referred Syphilis +ve client </Label>\n                                    <InputGroup>\n                                      <Input\n                                        type=\"select\"\n                                        name=\"referredSyphilisTreatment\"\n                                        id=\"referredSyphilisTreatment\"\n                                        onChange={handleInputChange}\n                                        value={\n                                          objValues.referredSyphilisTreatment\n                                        }\n                                      >\n                                        <option value=\"\">Select</option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                      </Input>\n                                    </InputGroup>\n                                    {errors.referredSyphilisTreatment !== \"\" ? (\n                                      <span className={classes.error}>\n                                        {errors.referredSyphilisTreatment}\n                                      </span>\n                                    ) : (\n                                      \"\"\n                                    )}\n                                  </FormGroup>\n                                </div>\n                              </>\n                            )}\n                        </>\n                      )}\n                      <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            HIV Status <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <InputGroup>\n                            <Input\n                              type=\"select\"\n                              name=\"staticHivStatus\"\n                              id=\"staticHivStatus\"\n                              onChange={handleInputChange}\n                              value={objValues.staticHivStatus}\n                            >\n                              <option value=\"\">Select</option>\n                              <option value=\"Positive\">Positive</option>\n                              <option value=\"Negative\">Negative</option>\n                              <option value=\"Unknown\">Unknown</option>\n                            </Input>\n                          </InputGroup>\n                          {errors.staticHivStatus !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.staticHivStatus}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n              {/* END OF HIV ENROLLEMENT FORM */}\n\n              {/* PMTCT FORM FOR L&D AND POST PARTUM  */}\n              {!state.showANC && (\n                <PmtctEnrollment\n                  // entryPoint={}\n                  getPMTCTInfo={getPMTCTInfo}\n                  patientObj={{}}\n                  showANC={state.showANC}\n                  setActiveContent={setActiveContent}\n                  activeContent={activeContent}\n                  hideUpdateButton={false}\n                  ancEntryType={false}\n                />\n              )}\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              {/* { \n                basicInfo.age >= 10 &&\n                objValues.gaweeks > 0 &&\n                ancNumberCheck !== true &&\n                objValues.gravida >= objValues.parity && (\n                  <MatButton\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    hidden={disabledAgeBaseOnAge || hospitalNumStatus}\n                    className={classes.button}\n                    startIcon={<SaveIcon />}\n                    onClick={handleSubmit}\n                    disabled={saving}\n                    style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\n                  >\n                    {!saving ? (\n                      <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                    ) : (\n                      <span style={{ textTransform: \"capitalize\" }}>\n                        Saving...\n                      </span>\n                    )}\n                  </MatButton>\n                )} */}\n              {\n                <MatButton\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  hidden={disabledAgeBaseOnAge || hospitalNumStatus}\n                  className={classes.button}\n                  startIcon={<SaveIcon />}\n                  onClick={handleSubmit}\n                  disabled={saving}\n                  style={{ backgroundColor: \"#014d88\", fontWeight: \"bolder\" }}\n                >\n                  {!saving ? (\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                  ) : (\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      Saving...\n                    </span>\n                  )}\n                </MatButton>\n              }\n              <MatButton\n                variant=\"contained\"\n                className={classes.button}\n                startIcon={<CancelIcon />}\n                style={{ backgroundColor: \"#992E62\" }}\n                onClick={handleCancel}\n              >\n                <span style={{ textTransform: \"capitalize\", color: \"#fff\" }}>\n                  Cancel\n                </span>\n              </MatButton>\n            </Form>\n          </div>\n        </CardContent>\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"sm\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Are you Sure of the Age entered?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default UserRegistration;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\ActiveANCPatientList.js",["718"],"import React, { useState } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport axios from \"axios\";\nimport { token as token, url as baseUrl } from \"./../../../api\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Link } from \"react-router-dom\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport { MdDashboard } from \"react-icons/md\";\nimport \"@reach/menu-button/styles.css\";\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\n\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst ANCPatients = (props) => {\n  const [showPPI, setShowPPI] = useState(true);\n  const handleCheckBox = (e) => {\n    if (e.target.checked) {\n      setShowPPI(false);\n    } else {\n      setShowPPI(true);\n    }\n  };\n\n  return (\n    <div>\n      <MaterialTable\n        icons={tableIcons}\n        title=\"Find Patient \"\n        columns={[\n          // { title: \" ID\", field: \"Id\" },\n          {\n            title: \"Patient Name\",\n            field: \"name\",\n            hidden: showPPI,\n          },\n          {\n            title: \"Hospital Number\",\n            field: \"hospital_number\",\n            filtering: false,\n          },\n          { title: \"Sex\", field: \"gender\", filtering: false },\n          { title: \"Age\", field: \"age\", filtering: false },\n          //{ title: \"Enrollment Status\", field: \"v_status\", filtering: false },\n          //{ title: \"ART Number\", field: \"v_status\", filtering: false },\n          // { title: \"ART Status\", field: \"status\", filtering: false },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        //isLoading={loading}\n        data={(query) =>\n          new Promise((resolve, reject) =>\n            axios\n              .get(\n                `${baseUrl}pmtct/anc/all-active-anc?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\n                { headers: { Authorization: `Bearer ${token}` } }\n              )\n              .then((response) => response)\n              .then((result) => {\n                resolve({\n                  data: result.data.records.map((row) => ({\n                    name: (\n                      <Link\n                        to={{\n                          pathname: \"/patient-history\",\n                          state: { patientObj: row },\n                        }}\n                        title={\"Click to view patient dashboard\"}\n                      >\n                        {\" \"}\n                        {row.surname ? row?.surname : row?.fullname}\n                      </Link>\n                    ),\n\n                    hospital_number: row.hospitalNumber,\n                    gender: row && row.sex ? row.sex : \"Female\",\n                    age: row.age,\n                    actions: (\n                      <div>\n                        <Link\n                          to={{\n                            pathname: \"/patient-history\",\n                            state: {\n                              patientObj: row,\n                              postValue: \"ANC\",\n                              entrypointValue: \"PMTCT_ENTRY_POINT_ANC\",\n                            },\n                          }}\n                        >\n                          <ButtonGroup\n                            variant=\"contained\"\n                            aria-label=\"split button\"\n                            style={{\n                              backgroundColor: \"rgb(153, 46, 98)\",\n                              height: \"30px\",\n                              width: \"215px\",\n                            }}\n                            size=\"large\"\n                          >\n                            <Button\n                              color=\"primary\"\n                              size=\"small\"\n                              aria-label=\"select merge strategy\"\n                              aria-haspopup=\"menu\"\n                              style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\n                            >\n                              <MdDashboard />\n                            </Button>\n                            <Button\n                              style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\n                            >\n                              <span\n                                style={{\n                                  fontSize: \"12px\",\n                                  color: \"#fff\",\n                                  fontWeight: \"bolder\",\n                                }}\n                              >\n                                Patient Dashboard\n                              </span>\n                            </Button>\n                          </ButtonGroup>\n                        </Link>\n                      </div>\n                    ),\n                  })),\n                  page: query.page,\n                  totalCount: result.data.totalRecords,\n                });\n              })\n          )\n        }\n        options={{\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n          },\n          searchFieldStyle: {\n            width: \"200%\",\n            margingLeft: \"250px\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n        components={{\n          Toolbar: (props) => (\n            <div>\n              <div className=\"form-check custom-checkbox  float-left mt-4 ml-3 \">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  name=\"showPP!\"\n                  id=\"showPP\"\n                  value=\"showPP\"\n                  checked={showPPI === true ? false : true}\n                  onChange={handleCheckBox}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.25rem\",\n                  }}\n                />\n                <label className=\"form-check-label\" htmlFor=\"basic_checkbox_1\">\n                  <b style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\n                    SHOW PII\n                  </b>\n                </label>\n              </div>\n              <MTableToolbar {...props} />\n            </div>\n          ),\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ANCPatients;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\PmtctPatients.js",["719"],"import React, { useState } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport axios from \"axios\";\nimport { token as token, url as baseUrl } from \"./../../../api\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Link } from \"react-router-dom\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport { MdDashboard } from \"react-icons/md\";\nimport \"@reach/menu-button/styles.css\";\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\n\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst PmtctPatients = (props) => {\n  const [showPPI, setShowPPI] = useState(true);\n  const handleCheckBox = (e) => {\n    if (e.target.checked) {\n      setShowPPI(false);\n    } else {\n      setShowPPI(true);\n    }\n  };\n\n  return (\n    <div>\n      <MaterialTable\n        icons={tableIcons}\n        title=\"Find Patient \"\n        columns={[\n          // { title: \" ID\", field: \"Id\" },\n          {\n            title: \"Patient Name\",\n            field: \"name\",\n            hidden: showPPI,\n          },\n          {\n            title: \"Hospital Number\",\n            field: \"hospital_number\",\n            filtering: false,\n          },\n          { title: \"Sex\", field: \"gender\", filtering: false },\n          { title: \"Age\", field: \"age\", filtering: false },\n          //{ title: \"Enrollment Status\", field: \"v_status\", filtering: false },\n          //{ title: \"ART Number\", field: \"v_status\", filtering: false },\n          // { title: \"ART Status\", field: \"status\", filtering: false },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        //isLoading={loading}\n        data={(query) =>\n          new Promise((resolve, reject) =>\n            axios\n              .get(\n                `${baseUrl}pmtct/anc/all-active-pmtct?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\n                { headers: { Authorization: `Bearer ${token}` } }\n              )\n              .then((response) => response)\n              .then((result) => {\n                console.log(\"general PMTCT PATIENT\", result);\n                resolve({\n                  data: result.data.records.map((row) => ({\n                    name: (\n                      <Link\n                        to={{\n                          pathname: \"/patient-history\",\n                          state: { patientObj: row },\n                        }}\n                        title={\"Click to view patient dashboard\"}\n                      >\n                        {\" \"}\n                        {row.surname ? row.surname : row.fullName}\n                      </Link>\n                    ),\n\n                    hospital_number: row.hospitalNumber,\n                    gender: row && row.sex ? row.sex : \"Female\",\n                    age: row.age,\n                    actions: (\n                      <div>\n                        <Link\n                          to={{\n                            pathname: \"/patient-history\",\n                            state: { patientObj: row },\n                          }}\n                        >\n                          <ButtonGroup\n                            variant=\"contained\"\n                            aria-label=\"split button\"\n                            style={{\n                              backgroundColor: \"rgb(153, 46, 98)\",\n                              height: \"30px\",\n                              width: \"215px\",\n                            }}\n                            size=\"large\"\n                          >\n                            <Button\n                              color=\"primary\"\n                              size=\"small\"\n                              aria-label=\"select merge strategy\"\n                              aria-haspopup=\"menu\"\n                              style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\n                            >\n                              <MdDashboard />\n                            </Button>\n                            <Button\n                              style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\n                            >\n                              <span\n                                style={{\n                                  fontSize: \"12px\",\n                                  color: \"#fff\",\n                                  fontWeight: \"bolder\",\n                                }}\n                              >\n                                Patient Dashboard\n                              </span>\n                            </Button>\n                          </ButtonGroup>\n                        </Link>\n                      </div>\n                    ),\n                  })),\n                  page: query.page,\n                  totalCount: result.data.totalRecords,\n                });\n              })\n          )\n        }\n        options={{\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n          },\n          searchFieldStyle: {\n            width: \"200%\",\n            margingLeft: \"250px\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n        components={{\n          Toolbar: (props) => (\n            <div>\n              <div className=\"form-check custom-checkbox  float-left mt-4 ml-3 \">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  name=\"showPP!\"\n                  id=\"showPP\"\n                  value=\"showPP\"\n                  checked={showPPI === true ? false : true}\n                  onChange={handleCheckBox}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.25rem\",\n                  }}\n                />\n                <label className=\"form-check-label\" htmlFor=\"basic_checkbox_1\">\n                  <b style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\n                    SHOW PII\n                  </b>\n                </label>\n              </div>\n              <MTableToolbar {...props} />\n            </div>\n          ),\n        }}\n      />\n    </div>\n  );\n};\n\nexport default PmtctPatients;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js",["720","721","722","723","724","725","726","727","728","729"],"import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport { Link } from \"react-router-dom\";\nimport ButtonMui from \"@material-ui/core/Button\";\nimport { TiArrowBack } from \"react-icons/ti\";\nimport { Label } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Col, Row } from \"reactstrap\";\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport axios from \"axios\";\nimport { url as baseUrl, token } from \"./../../../api\";\nimport Typography from \"@material-ui/core/Typography\";\n\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst styles = (theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: \"bottom\",\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: \"center\",\n  },\n  column: {\n    flexBasis: \"20.33%\",\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n});\n\nfunction PatientCard(props) {\n  const { classes } = props;\n  //const patientCurrentStatus=props.patientObj && props.patientObj.currentStatus===\"Died (Confirmed)\" ? true : false ;\n  const patientObjs = props.patientObj ? props.patientObj : {};\n  const permissions = props.permissions ? props.permissions : [];\n  const [patientObj, setpatientObj] = useState(patientObjs);\n  const [patientBiometricStatus, setPatientBiometricStatus] = useState(\n    props?.patientObj?.biometricStatus\n  );\n  const [biometricStatus, setBiometricStatus] = useState(false);\n  const [devices, setDevices] = useState([]);\n  const [modal, setModal] = useState(false);\n  const toggle = () => setModal(!modal);\n  const [biometricModal, setBiometricModal] = useState(false);\n  const BiometricModalToggle = () => setBiometricModal(!biometricModal);\n  const [hivStatus, setHivStatus] = useState();\n  const [artModal, setArtModal] = useState(false);\n  const Arttoggle = () => setArtModal(!artModal);\n  useEffect(() => {\n    PatientCurrentStatus();\n    CheckBiometric();\n    console.log(\"patient\", patientObj);\n  }, [props.patientObj]);\n\n  //Get list of KP\n  const CheckBiometric = () => {\n    axios\n      .get(`${baseUrl}modules/check?moduleName=biometric`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setBiometricStatus(response.data);\n        if (response.data === true) {\n          axios\n            .get(`${baseUrl}biometrics/devices`, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              setDevices(response.data);\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  ///GET LIST OF Patients\n  async function PatientCurrentStatus() {\n    axios\n      .get(`${baseUrl}hiv/status/patient-current/${patientObj.id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setHivStatus(response.data);\n      })\n      .catch((error) => {});\n  }\n\n  // async function getPatientInfo() {\n  //   axios\n  //     .get(`${baseUrl}hiv/status/patient-current/${patientObj.id}`, {\n  //       headers: { Authorization: `Bearer ${token}` },\n  //     })\n  //     .then((response) => {\n  //       setHivStatus(response.data);\n  //     })\n  //     .catch((error) => {});\n  // }\n  const getAddress = (identifier) => {\n    const identifiers = identifier;\n    const address = identifiers?.address.find((obj) => obj.city);\n    const houseAddress =\n      address && address.line[0] !== null ? address.line[0] : \"\";\n    const landMark =\n      address && address.city && address.city !== null ? address.city : \"\";\n    return address ? houseAddress + \" \" + landMark : \"\";\n  };\n\n  return (\n    <div className={classes.root}>\n      <ExpansionPanel>\n        <ExpansionPanelSummary>\n          <Row>\n            <Col md={12}>\n              <Row className={\"mt-1\"}>\n                <Col md={12} className={classes.root2}>\n                  <b style={{ fontSize: \"25px\" }}>\n                    {patientObj?.fullname\n                      ? patientObj?.fullname\n                      : patientObj?.fullName}\n                  </b>\n                  <Link to={\"/\"}>\n                    <ButtonMui\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className=\" float-end ms-2 mr-2 mt-2\"\n                      //startIcon={<FaUserPlus size=\"10\"/>}\n                      startIcon={<TiArrowBack />}\n                      style={{\n                        backgroundColor: \"rgb(153, 46, 98)\",\n                        color: \"#fff\",\n                        height: \"35px\",\n                      }}\n                    >\n                      <span style={{ textTransform: \"capitalize\" }}>Back</span>\n                    </ButtonMui>\n                  </Link>\n                </Col>\n                <Col md={4} className={classes.root2}>\n                  <span>\n                    {\" \"}\n                    Patient ID : <b>{patientObj?.hospitalNumber}</b>\n                  </span>\n                </Col>\n\n                <Col md={4} className={classes.root2}>\n                  <span>\n                    {/* Date Of Birth : <b>{patientObj.dateOfBirth }</b> */}\n                  </span>\n                </Col>\n                <Col md={4} className={classes.root2}>\n                  <span>\n                    {\" \"}\n                    Age :{\" \"}\n                    <b>\n                      {patientObj?.age}{\" \"}\n                      {Number(patientObj?.age) > 1 ? \"years\" : \"year\"}\n                    </b>\n                  </span>\n                </Col>\n                <Col md={4}>\n                  <span>\n                    {\" \"}\n                    Gender :{\" \"}\n                    <b>\n                      {patientObj.sex && patientObj.sex !== null\n                        ? patientObj.sex\n                        : \"Female\"}\n                    </b>\n                  </span>\n                </Col>\n                <Col md={4} className={classes.root2}>\n                  <span>\n                    {\" \"}\n                    {/* Phone Number : <b>{getPhoneNumber(patientObj.contactPoint)}</b> */}\n                  </span>\n                </Col>\n                <Col md={4} className={classes.root2}>\n                  <span>\n                    {\" \"}\n                    Address :{\" \"}\n                    <b>\n                      {patientObj?.address && getAddress(patientObj?.address)}{\" \"}\n                    </b>\n                  </span>\n                </Col>\n\n                <Col md={12}>\n                  {biometricStatus === true ? (\n                    <>\n                      <div>\n                        <Typography variant=\"caption\">\n                          <Label\n                            color={\n                              props.patientObj?.biometricStatus === true\n                                ? \"green\"\n                                : \"red\"\n                            }\n                            size={\"mini\"}\n                          >\n                            Biometric Status\n                            <Label.Detail>\n                              {props.patientObj?.biometricStatus === true\n                                ? \"Captured\"\n                                : \"Not Captured\"}\n                            </Label.Detail>\n                          </Label>\n                        </Typography>\n                      </div>\n                    </>\n                  ) : (\n                    <></>\n                  )}\n                  {props.patientObj.dynamicHivStatus !== null ||\n                  props.patientObj.staticHivStatus !== null ? (\n                    <>\n                      <div>\n                        <Typography variant=\"caption\">\n                          <Label\n                            color={\n                              props.patientObj.dynamicHivStatus !==\n                                \"Positive\" &&\n                              props.patientObj.staticHivStatus !== \"Positive\"\n                                ? \"green\"\n                                : \"red\"\n                            }\n                            size={\"mini\"}\n                          >\n                            HIV Status\n                            <Label.Detail>\n                              {props.patientObj.dynamicHivStatus !== \"Unknown\"\n                                ? props.patientObj.dynamicHivStatus\n                                  ? props.patientObj.dynamicHivStatus\n                                  : props.patientObj.staticHivStatus\n                                : \"\"}\n                              {props.patientObj.hivStatus !== \"Unknown\"\n                                ? props.patientObj.hivStatus\n                                : props.patientObj.hivStatus}\n                            </Label.Detail>\n                          </Label>\n                        </Typography>\n                      </div>\n                    </>\n                  ) : (\n                    <></>\n                  )}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </ExpansionPanelSummary>\n\n        {/* <Button\n                      color='red'\n                      content='BloodType'\n                      //icon='heart'\n                      label={{ basic: true, color: 'red', pointing: 'left', content: 'AB+' }}\n                    /> */}\n        {/* <Button\n                        basic\n                        color='blue'\n                        content='Height'\n                        icon='fork'\n                        label={{\n                            as: 'a',\n                            basic: true,\n                            color: 'blue',\n                            pointing: 'left',\n                            content: '74.5 in',\n                        }}\n                      />               */}\n        {/* <Button\n                        basic\n                        color='blue'\n                        content='Weight'\n                        icon='fork'\n                        label={{\n                            as: 'a',\n                            basic: true,\n                            color: 'blue',\n                            pointing: 'left',\n                            content: '74.5 in',\n                        }}\n                      /> */}\n\n        {/* <div className={classes.column}>\n                  <Button primary  floated='left' onClick={() => get_age(moment(patientObj.dateOfBirth).format(\"DD-MM-YYYY\")) > 5 ? loadAdultEvaluation(patientObj) :loadChildEvaluation(patientObj) }><span style={{fontSize:\"11px\"}}>Initial Clinic Evaluation</span></Button>\n                </div> */}\n        {/* {patientCurrentStatus !==true && props.patientObj.enrollment.targetGroupId !==\"456\" ?                   \n                  (\n                    <>\n                      <div className={classes.column}>\n                        <Button primary  floated='left' onClick={() => loadMentalHealthScreening(patientObj) }><span style={{fontSize:\"11px\"}}>Mental Health Screening</span></Button>\n                      </div>\n                    </>\n                  ) :\"\"           \n                } */}\n        {/* {patientObj.commenced!==true && (\n                <div className={classes.column} style={{paddingLeft:\"20px\"}}>\n                {\" \"}<Button primary onClick={() => loadArt(patientObj)} ><span style={{fontSize:\"11px\"}}>ART Commencement </span></Button>\n                </div>\n                )\n               }\n                     */}\n      </ExpansionPanel>\n    </div>\n  );\n}\n\nPatientCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PatientCard);\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\SubMenu.js",["730","731","732","733","734","735","736","737","738","739"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { url as baseUrl, token } from \"../../../api\";\n\nconst useStyles = makeStyles((theme) => ({\n  navItemText: {\n    padding: theme.spacing(2),\n  },\n}));\n\nfunction SubMenu(props) {\n  const classes = useStyles();\n  let gender = \"\";\n  const patientObjs = props.patientObj ? props.patientObj : {};\n  //const patientCurrentStatus=props.patientObj && props.patientObj.currentStatus===\"Died (Confirmed)\" ? true : false ;\n  const [patientObj, setpatientObj] = useState(patientObjs);\n  const [genderType, setGenderType] = useState();\n  const [deliveryStatus, setDeliveryStatus] = useState(false);\n\n  let mentalStatus = false;\n  let initialEvaluationStatus = false;\n  useEffect(() => {\n    props.deliveryInfo.filter((each) => {\n      if (each.activityName === \"Labour and Delivery\") {\n        setDeliveryStatus(true);\n      }\n    });\n\n    Observation();\n    gender =\n      props.patientObj && props.patientObj.sex ? props.patientObj.sex : null;\n    setGenderType(gender === \"Female\" ? true : false);\n  }, [props.patientObj]);\n\n  useEffect(() => {\n    props.deliveryInfo.filter((each) => {\n      // console.log(each);\n\n      if (each.activityName === \"Labour and Delivery\") {\n        setDeliveryStatus(true);\n      }\n    });\n    // console.log(props.deliveryInfo);\n  }, [props.deliveryInfo]);\n  //Get list of RegimenLine\n  const Observation = () => {\n    axios\n      .get(`${baseUrl}observation/person/${props.patientObj.id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        const observation = response.data;\n        const mental = observation.filter((x) => x.type === \"mental health\");\n        const evaluation = observation.filter(\n          (x) => x.type === \"initial evaluation\"\n        );\n        if (mental.length > 1) {\n          mentalStatus = true;\n        }\n        if (evaluation.length > 1) {\n          initialEvaluationStatus = true;\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const loadAncPnc = (row) => {\n    props.setActiveContent({ ...props.activeContent, route: \"anc-pnc\" });\n  };\n  const loadLabourDelivery = (row) => {\n    props.setActiveContent({\n      ...props.activeContent,\n      route: \"labour-delivery\",\n    });\n  };\n  const onClickConsultation = (row) => {\n    props.setActiveContent({ ...props.activeContent, route: \"consultation\" });\n  };\n  const onClickHome = (row) => {\n    props.setActiveContent({ ...props.activeContent, route: \"recent-history\" });\n  };\n  const loadPmtctHts = (row) => {\n    props.setActiveContent({ ...props.activeContent, route: \"pmtct-hts\" });\n  };\n  const onClickInfant = (row) => {\n    props.setActiveContent({ ...props.activeContent, route: \"infants\" });\n  };\n  const onClickPartner = (row) => {\n    props.setActiveContent({ ...props.activeContent, route: \"partners\" });\n  };\n  const loadPatientHistory = () => {\n    props.setActiveContent({\n      ...props.activeContent,\n      route: \"patient-history\",\n    });\n  };\n  //\n\n  return (\n    <div>\n      <Menu size=\"large\" color={\"black\"} inverted>\n        <Menu.Item onClick={() => onClickHome()}> Home</Menu.Item>\n\n        {(patientObj.dynamicHivStatus === \"Positive\" ||\n          patientObj.staticHivStatus === \"Positive\" ||\n          patientObj?.hivStatus === \"Positive\") && (\n          <>\n            {patientObj.pmtctRegStatus !== true ? (\n              <>\n                <Menu.Item onClick={() => loadAncPnc()}>\n                  PMTCT Enrollment\n                </Menu.Item>\n              </>\n            ) : (\n              <>\n                <Menu.Item onClick={() => onClickConsultation()}>\n                  Follow Up Visit\n                </Menu.Item>\n\n                {patientObj.deliveryStatus !== true &&\n                  deliveryStatus !== true && (\n                    <Menu.Item onClick={() => loadLabourDelivery()}>\n                      Labour and Delivery\n                    </Menu.Item>\n                  )}\n                {patientObj?.ancNo && (\n                  <Menu.Item onClick={() => onClickPartner()}>\n                    {\" \"}\n                    Partners\n                  </Menu.Item>\n                )}\n                {/* )} */}\n                <Menu.Item onClick={() => onClickInfant()}>\n                  {\" \"}\n                  Infant Information\n                </Menu.Item>\n              </>\n            )}\n          </>\n        )}\n        <Menu.Item onClick={() => loadPatientHistory()}>History</Menu.Item>\n      </Menu>\n      {console.log(patientObj)}\n    </div>\n  );\n}\n\nexport default SubMenu;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\api.js",[],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js",["740","741"],"import React, { useState } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport axios from \"axios\";\n\nimport { token as token, url as baseUrl } from \"./../../../api\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Link } from \"react-router-dom\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\n//import { MdDashboard } from \"react-icons/md\";\nimport \"@reach/menu-button/styles.css\";\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\n//import { FaUserPlus } from \"react-icons/fa\";\nimport { TiArrowForward } from \"react-icons/ti\";\nimport PmtctEntryPoint from \"../PmtctServices/PmtctEntryPoint\";\n\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst Patients = (props) => {\n  const [showPPI, setShowPPI] = useState(true);\n  const [modalShow, setModalShow] = useState(false);\n  const [info, setInfo] = useState({});\n\n  const calculate_age = (dob) => {\n    var today = new Date();\n    var dateParts = dob.split(\"-\");\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n    var age_now = today.getFullYear() - birthDate.getFullYear();\n    var m = today.getMonth() - birthDate.getMonth();\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      age_now--;\n    }\n    if (age_now === 0) {\n      return m + \" month(s)\";\n    }\n    return age_now + \" year(s)\";\n  };\n\n  const getHospitalNumber = (identifier) => {\n    const identifiers = identifier;\n    const hospitalNumber = identifiers.identifier.find(\n      (obj) => obj.type == \"HospitalNumber\"\n    );\n    return hospitalNumber ? hospitalNumber.value : \"\";\n  };\n  const handleCheckBox = (e) => {\n    if (e.target.checked) {\n      setShowPPI(false);\n    } else {\n      setShowPPI(true);\n    }\n  };\n\n  return (\n    <div>\n      <MaterialTable\n        icons={tableIcons}\n        title=\"Find Patient \"\n        columns={[\n          // { title: \" ID\", field: \"Id\" },\n          {\n            title: \"Patient Name\",\n            field: \"name\",\n            hidden: showPPI,\n          },\n          {\n            title: \"Hospital Number\",\n            field: \"hospital_number\",\n            filtering: false,\n          },\n          { title: \"Sex\", field: \"gender\", filtering: false },\n          { title: \"Age\", field: \"age\", filtering: false },\n          //{ title: \"Enrollment Status\", field: \"v_status\", filtering: false },\n          //{ title: \"ART Number\", field: \"v_status\", filtering: false },\n          // { title: \"ART Status\", field: \"status\", filtering: false },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        //isLoading={loading}\n        data={(query) =>\n          new Promise((resolve, reject) =>\n            axios\n              .get(\n                `${baseUrl}pmtct/anc/pmtct-from-person?pageSize=${query.pageSize}&pageNo=${query.page}&searchParam=${query.search}`,\n                { headers: { Authorization: `Bearer ${token}` } }\n              )\n              .then((response) => response)\n              .then((result) => {\n                //console.log(result.data.records)\n                resolve({\n                  data: result.data.records.map((row) => ({\n                    name: (\n                      <Link\n                        to={{\n                          pathname: \"/enroll-patient\",\n                          state: { patientId: row.id, patientObj: row },\n                        }}\n                        title={\"Enroll Patient\"}\n                      >\n                        {\" \"}\n                        {row.firstName + \" \" + row.surname}\n                      </Link>\n                    ),\n                    hospital_number: getHospitalNumber(row.identifier),\n                    gender: row && row.sex ? row.sex : \"\",\n                    age:\n                      row.dateOfBirth === 0 ||\n                      row.dateOfBirth === undefined ||\n                      row.dateOfBirth === null ||\n                      row.dateOfBirth === \"\"\n                        ? 0\n                        : calculate_age(\n                            moment(row.dateOfBirth).format(\"DD-MM-YYYY\")\n                          ),\n\n                    //status: (<Label color=\"blue\" size=\"mini\">{row.currentStatus}</Label>),\n                    //enroll-patient\n                    actions: (\n                      <div\n                        onClick={(e) => {\n                          setModalShow(true);\n                          setInfo({ patientId: row.id, patientObj: row });\n                        }}\n                      >\n                        {/* <Link\n                                                to={{\n                                                    pathname: \"/enroll-patient\",\n                                                    state: { patientId : row.id, patientObj: row, entryType: 'ANC'  }\n                                                }}\n                                            > */}\n                        <ButtonGroup\n                          variant=\"contained\"\n                          aria-label=\"split button\"\n                          style={{\n                            backgroundColor: \"rgb(153, 46, 98)\",\n                            height: \"30px\",\n                            width: \"215px\",\n                          }}\n                          size=\"large\"\n                        >\n                          <Button\n                            color=\"primary\"\n                            size=\"small\"\n                            aria-label=\"select merge strategy\"\n                            aria-haspopup=\"menu\"\n                            style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\n                          >\n                            <TiArrowForward />\n                          </Button>\n                          <Button\n                            style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\n                          >\n                            <span\n                              style={{\n                                fontSize: \"12px\",\n                                color: \"#fff\",\n                                fontWeight: \"bolder\",\n                              }}\n                            >\n                              Enroll Patient\n                            </span>\n                          </Button>\n                        </ButtonGroup>\n                        {/* </Link> */}\n                      </div>\n                    ),\n                  })),\n                  page: query.page,\n                  totalCount: result.data.totalRecords,\n                });\n              })\n          )\n        }\n        options={{\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n          },\n          search: true,\n          searchFieldStyle: {\n            width: \"200%\",\n            margingLeft: \"250px\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n        components={{\n          Toolbar: (props) => (\n            <div>\n              <div className=\"form-check custom-checkbox  float-left mt-4 ml-3 \">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  name=\"showPP!\"\n                  id=\"showPP\"\n                  value=\"showPP\"\n                  checked={showPPI === true ? false : true}\n                  onChange={handleCheckBox}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.25rem\",\n                  }}\n                />\n                <label className=\"form-check-label\" htmlFor=\"basic_checkbox_1\">\n                  <b style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\n                    SHOW PII\n                  </b>\n                </label>\n              </div>\n              <MTableToolbar {...props} />\n            </div>\n          ),\n        }}\n      />\n      <PmtctEntryPoint\n        route=\"/enroll-patient\"\n        show={modalShow}\n        info={info}\n        onHide={() => setModalShow(false)}\n      />\n    </div>\n  );\n};\n\nexport default Patients;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\PmtctEnrollment.js",["742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\LabourDelivery.js",["758","759","760","761"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardBody,\n  FormGroup,\n  Label,\n  Input,\n  InputGroup,\n} from \"reactstrap\";\nimport MatButton from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport axios from \"axios\";\n\nimport { toast } from \"react-toastify\";\nimport { url as baseUrl, token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport \"react-summernote/dist/react-summernote.css\"; // import styles\nimport { Spinner } from \"reactstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    flexGrow: 1,\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst LabourDelivery = (props) => {\n  const patientObj = props.patientObj;\n  //let history = useHistory();\n  const classes = useStyles();\n  const [delieryMode, setDelieryMode] = useState([]);\n  const [placeOfDelivery, setPlaceOfDelivery] = useState([]);\n  const [feedingDecision, setfeedingDecision] = useState([]);\n  const [maternalOutCome, setmaternalOutCome] = useState([]);\n  const [saving, setSaving] = useState(false);\n  const [disabledField, setSisabledField] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [childStatus, setChildStatus] = useState([]);\n  const [bookingStatus, setBookingStatus] = useState([]);\n  const [romdelivery, setRomdelivery] = useState([]);\n  const [timehiv, setTimehiv] = useState([]);\n  const [delivery, setDelivery] = useState({\n    placeOfDelivery: \"\",\n    ancNo: patientObj.ancNo,\n    artStartedLdWard: \"\",\n    bookingStatus: \"\",\n    childGivenArvWithin72: \"\",\n    childStatus: \"\",\n    dateOfDelivery: \"\",\n    deliveryTime: \"\",\n    episiotomy: \"\",\n    feedingDecision: \"\",\n    gaweeks: \"\",\n    hbstatus: \"\",\n    hcstatus: \"\",\n    hivExposedInfantGivenHbWithin24hrs: \"\",\n    maternalOutcome: \"\",\n    maternalOutcomeChild: \"\",\n    modeOfDelivery: \"\",\n    onArt: \"\",\n    referalSource: \"\",\n    romDeliveryInterval: \"\",\n    vaginalTear: \"\",\n    numberOfInfantsAlive: \"\",\n    numberOfInfantsDead: \"\",\n    personUuid: props.patientObj.person_uuid\n      ? props.patientObj.person_uuid\n      : props.patientObj.personUuid\n      ? props.patientObj.personUuid\n      : props.patientObj.uuid,\n  });\n  useEffect(() => {\n    MODE_DELIVERY();\n    FEEDING_DECISION();\n    MATERNAL_OUTCOME();\n    CHILD_STATUS_DELIVERY();\n    BOOKING_STATUS();\n    ROM_DELIVERY_INTERVAL();\n    TIME_HIV_DIAGNOSIS();\n    getPlaceOfDelivery();\n    if (\n      props.activeContent.id &&\n      props.activeContent.id !== \"\" &&\n      props.activeContent.id !== null\n    ) {\n      GetPatientLabourDTO(props.activeContent.id);\n      setSisabledField(\n        props.activeContent.actionType === \"view\" ? true : false\n      );\n    }\n  }, [props.patientObj.id, props.activeContent]);\n\n  const GetPatientLabourDTO = (id) => {\n    axios\n      .get(`${baseUrl}pmtct/anc/view-delivery/${props.activeContent.id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data.find((x)=> x.id===id));\n        setDelivery(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  //Get list\n  const BOOKING_STATUS = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/BOOKING STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setBookingStatus(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const getPlaceOfDelivery = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PLACE_OF_DELIVERY`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setPlaceOfDelivery(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const TIME_HIV_DIAGNOSIS = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TIME_HIV_DIAGNOSIS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setTimehiv(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const ROM_DELIVERY_INTERVAL = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/ROM_DELIVERY_INTERVAL`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setRomdelivery(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const MODE_DELIVERY = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/MODE_DELIVERY`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setDelieryMode(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const CHILD_STATUS_DELIVERY = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/CHILD_STATUS_DELIVERY`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setChildStatus(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const FEEDING_DECISION = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FEEDING DECISION`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setfeedingDecision(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const MATERNAL_OUTCOME = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/MATERNAL_OUTCOME`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setmaternalOutCome(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputChangeDeliveryDto = (e) => {\n    setErrors({ ...errors, [e.target.name]: \"\" });\n    if (e.target.name === \"dateOfDelivery\" && e.target.value !== \"\") {\n      async function getGa() {\n        const ga = e.target.value;\n        const response = await axios.get(\n          `${baseUrl}pmtct/anc/calculate-ga-from-person?personUuid=${\n            props.patientObj.person_uuid\n              ? props.patientObj.person_uuid\n              : props.patientObj.personUuid\n              ? props.patientObj.personUuid\n              : props.patientObj.uuid\n          }&visitDate=${ga}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data > 0) {\n          delivery.gaweeks = response.data;\n          setDelivery({ ...delivery, [e.target.name]: e.target.value });\n        } else {\n          toast.error(\"Please select a validate date\");\n          setDelivery({ ...delivery, [e.target.name]: e.target.value });\n        }\n      }\n      getGa();\n    }\n    setDelivery({ ...delivery, [e.target.name]: e.target.value });\n  };\n\n  //FORM VALIDATION\n  const validate = () => {\n    let temp = { ...errors };\n    temp.artStartedLdWard = delivery.artStartedLdWard\n      ? \"\"\n      : \"This field is required\";\n    //temp.referalSource = delivery.referalSource ? \"\" : \"This field is required\"\n    temp.romDeliveryInterval = delivery.romDeliveryInterval\n      ? \"\"\n      : \"This field is required\";\n    temp.vaginalTear = delivery.vaginalTear ? \"\" : \"This field is required\";\n    temp.onArt = delivery.onArt ? \"\" : \"This field is required\";\n    temp.modeOfDelivery = delivery.modeOfDelivery\n      ? \"\"\n      : \"This field is required\";\n    temp.maternalOutcome = delivery.maternalOutcome\n      ? \"\"\n      : \"This field is required\";\n    temp.hivExposedInfantGivenHbWithin24hrs =\n      delivery.hivExposedInfantGivenHbWithin24hrs\n        ? \"\"\n        : \"This field is required\";\n    temp.hcstatus = delivery.hcstatus ? \"\" : \"This field is required\";\n    temp.hbstatus = delivery.hbstatus ? \"\" : \"This field is required\";\n    temp.gaweeks = delivery.gaweeks ? \"\" : \"This field is required\";\n    temp.feedingDecision = delivery.feedingDecision\n      ? \"\"\n      : \"This field is required\";\n    temp.episiotomy = delivery.episiotomy ? \"\" : \"This field is required\";\n    temp.deliveryTime = delivery.deliveryTime ? \"\" : \"This field is required\";\n    temp.dateOfDelivery = delivery.dateOfDelivery\n      ? \"\"\n      : \"This field is required\";\n    temp.childStatus = delivery.childStatus ? \"\" : \"This field is required\";\n    temp.childGivenArvWithin72 = delivery.childGivenArvWithin72\n      ? \"\"\n      : \"This field is required\";\n    temp.bookingStatus = delivery.bookingStatus ? \"\" : \"This field is required\";\n    delivery.maternalOutcomeChild !== \"\" &&\n      (temp.numberOfInfantsAlive = delivery.numberOfInfantsAlive\n        ? \"\"\n        : \"This field is required\");\n    delivery.maternalOutcomeChild !== \"\" &&\n      (temp.numberOfInfantsDead = delivery.numberOfInfantsDead\n        ? \"\"\n        : \"This field is required\");\n\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  /**** Submit Button Processing  */\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      setSaving(true);\n      if (props.activeContent && props.activeContent.actionType) {\n        //Perform operation for updation action\n        axios\n          .put(\n            `${baseUrl}pmtct/anc/update-delivery/${props.activeContent.id}`,\n            delivery,\n            { headers: { Authorization: `Bearer ${token}` } }\n          )\n          .then((response) => {\n            setSaving(false);\n\n            toast.success(\"Record updated successful\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            props.setActiveContent({\n              ...props.activeContent,\n              route: \"recent-history\",\n            });\n          })\n          .catch((error) => {\n            setSaving(false);\n            toast.error(\"Something went wrong\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          });\n      } else {\n        //perform opertaio for save action\n        axios\n          .post(`${baseUrl}pmtct/anc/pmtct-delivery`, delivery, {\n            headers: { Authorization: `Bearer ${token}` },\n          })\n          .then((response) => {\n            setSaving(false);\n            props.patientObj.deliveryStatus = true;\n            toast.success(\"Record save successful\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            props.setActiveContent({\n              ...props.activeContent,\n              route: \"recent-history\",\n            });\n          })\n          .catch((error) => {\n            setSaving(false);\n            toast.error(\"Something went wrong\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          });\n      }\n    } else {\n      toast.error(\"All field are required\", {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  };\n\n  return (\n    <div>\n      <Card className={classes.root}>\n        <CardBody>\n          {console.log(patientObj)}\n          <form>\n            <div className=\"row\">\n              <h2>Labour and Delivery</h2>\n              {props.patientObj.ancNo && (\n                <div className=\"form-group mb-3 col-md-6\">\n                  <FormGroup>\n                    <Label>ANC ID</Label>\n                    <InputGroup>\n                      <Input\n                        type=\"text\"\n                        name=\"ancNo\"\n                        id=\"ancNo\"\n                        onChange={handleInputChangeDeliveryDto}\n                        value={delivery.ancNo}\n                        disabled\n                      />\n                    </InputGroup>\n                    {errors.ancNo !== \"\" ? (\n                      <span className={classes.error}>{errors.ancNo}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Booking Status <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"bookingStatus\"\n                      id=\"bookingStatus\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.bookingStatus}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select </option>\n\n                      {bookingStatus.map((value) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </Input>\n                  </InputGroup>\n                  {errors.bookingStatus !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.bookingStatus}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Date of Delivery <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"date\"\n                      name=\"dateOfDelivery\"\n                      id=\"dateOfDelivery\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.dateOfDelivery}\n                      min={props.patientObj.firstAncDate}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      disabled={disabledField}\n                    />\n                  </InputGroup>\n                  {errors.dateOfDelivery !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.dateOfDelivery}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Gestational Age (weeks){\" \"}\n                    <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"number\"\n                      name=\"gaweeks\"\n                      id=\"gaweeks\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.gaweeks}\n                      disabled\n                      min=\"0\"\n                    />\n                  </InputGroup>\n                  {errors.gaweeks !== \"\" ? (\n                    <span className={classes.error}>{errors.gaweeks}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    ROM Delivery Interval{\" \"}\n                    <span style={{ color: \"red\" }}> *</span>{\" \"}\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"romDeliveryInterval\"\n                      id=\"romDeliveryInterval\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.romDeliveryInterval}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select </option>\n\n                      {romdelivery.map((value) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </Input>\n                  </InputGroup>\n                  {errors.romDeliveryInterval !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.romDeliveryInterval}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Place of delivery <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"placeOfDelivery\"\n                      id=\"placeOfDelivery\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.placeOfDelivery}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select </option>\n\n                      {placeOfDelivery.map((value) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </Input>\n                  </InputGroup>\n                  {errors.bookingStatus !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.bookingStatus}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Mode of Delivery <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n\n                  <Input\n                    type=\"select\"\n                    name=\"modeOfDelivery\"\n                    id=\"modeOfDelivery\"\n                    value={delivery.modeOfDelivery}\n                    onChange={handleInputChangeDeliveryDto}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    disabled={disabledField}\n                  >\n                    <option value=\"\">Select </option>\n\n                    {delieryMode.map((value) => (\n                      <option key={value.id} value={value.code}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </Input>\n                  {errors.modeOfDelivery !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.modeOfDelivery}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Episiotomy <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"episiotomy\"\n                      id=\"episiotomy\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.episiotomy}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </Input>\n                  </InputGroup>\n                  {errors.episiotomy !== \"\" ? (\n                    <span className={classes.error}>{errors.episiotomy}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Vaginal Tear <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"vaginalTear\"\n                      id=\"vaginalTear\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.vaginalTear}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </Input>\n                  </InputGroup>\n                  {errors.vaginalTear !== \"\" ? (\n                    <span className={classes.error}>{errors.vaginalTear}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Feeding decision <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"feedingDecision\"\n                      id=\"feedingDecision\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.feedingDecision}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select </option>\n\n                      {feedingDecision.map((value) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </Input>\n                  </InputGroup>\n                  {errors.feedingDecision !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.feedingDecision}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Child given ARV within 72 hrs{\" \"}\n                    <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"childGivenArvWithin72\"\n                      id=\"childGivenArvWithin72\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.childGivenArvWithin72}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </Input>\n                  </InputGroup>\n                  {errors.childGivenArvWithin72 !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.childGivenArvWithin72}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    On ART? <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"onArt\"\n                      id=\"onArt\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.onArt}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </Input>\n                  </InputGroup>\n                  {errors.onArt !== \"\" ? (\n                    <span className={classes.error}>{errors.onArt}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    HIV exposed infant given Hep B within 24 hrs of birth{\" \"}\n                    <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"hivExposedInfantGivenHbWithin24hrs\"\n                      id=\"hivExposedInfantGivenHbWithin24hrs\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.hivExposedInfantGivenHbWithin24hrs}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </Input>\n                  </InputGroup>\n                  {errors.hivExposedInfantGivenHbWithin24hrs !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.hivExposedInfantGivenHbWithin24hrs}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Time of Diagnosis <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"deliveryTime\"\n                      id=\"deliveryTime\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.deliveryTime}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      {timehiv.map((value) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </Input>\n                  </InputGroup>\n                  {errors.deliveryTime !== \"\" ? (\n                    <span className={classes.error}>{errors.deliveryTime}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    ART started in L&D ward{\" \"}\n                    <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"artStartedLdWard\"\n                      id=\"artStartedLdWard\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.artStartedLdWard}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </Input>\n                  </InputGroup>\n                  {errors.artStartedLdWard !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.artStartedLdWard}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Hepatitis B Status <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"hbstatus\"\n                      id=\"hbstatus\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.hbstatus}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Positive\">Positive</option>\n                      <option value=\"Negative\">Negative</option>\n                    </Input>\n                  </InputGroup>\n                  {errors.hbstatus !== \"\" ? (\n                    <span className={classes.error}>{errors.hbstatus}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Hepatitis C Status <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"hcstatus\"\n                      id=\"hcstatus\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.hcstatus}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Positive\">Positive</option>\n                      <option value=\"Negative\">Negative</option>\n                    </Input>\n                  </InputGroup>\n                  {errors.hcstatus !== \"\" ? (\n                    <span className={classes.error}>{errors.hcstatus}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <h3>Maternal Outcome</h3>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Maternal Outcome <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"maternalOutcome\"\n                      id=\"maternalOutcome\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.maternalOutcome}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select </option>\n                      {maternalOutCome.map((value) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </Input>\n                  </InputGroup>\n                  {errors.maternalOutcome !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.maternalOutcome}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Child status <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"childStatus\"\n                      id=\"childStatus\"\n                      onChange={handleInputChangeDeliveryDto}\n                      value={delivery.childStatus}\n                      disabled={disabledField}\n                    >\n                      <option value=\"\">Select </option>\n                      {childStatus.map((value) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </Input>\n                  </InputGroup>\n                  {errors.childStatus !== \"\" ? (\n                    <span className={classes.error}>{errors.childStatus}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {delivery.childStatus === \"CHILD_STATUS_DELIVERY_ALIVE\" && (\n                <>\n                  <div className=\"form-group mb-3 col-md-6\">\n                    <FormGroup>\n                      <Label>\n                        Number of Child Alive{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <InputGroup>\n                        <Input\n                          type=\"Number\"\n                          name=\"numberOfInfantsAlive\"\n                          id=\"numberOfInfantsAlive\"\n                          onChange={handleInputChangeDeliveryDto}\n                          value={delivery.numberOfInfantsAlive}\n                          disabled={disabledField}\n                          min=\"0\"\n                        />\n                      </InputGroup>\n                      {errors.numberOfInfantsAlive !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.numberOfInfantsAlive}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-6\">\n                    <FormGroup>\n                      <Label>\n                        Number of Child Dead{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <InputGroup>\n                        <Input\n                          type=\"Number\"\n                          name=\"numberOfInfantsDead\"\n                          id=\"numberOfInfantsDead\"\n                          onChange={handleInputChangeDeliveryDto}\n                          value={delivery.numberOfInfantsDead}\n                          disabled={disabledField}\n                          min=\"0\"\n                        />\n                      </InputGroup>\n                      {errors.numberOfInfantsDead !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.numberOfInfantsDead}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                </>\n              )}\n            </div>\n\n            {saving ? <Spinner /> : \"\"}\n            <br />\n            {props.activeContent && props.activeContent.actionType ? (\n              <>\n                <MatButton\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  hidden={disabledField}\n                  className={classes.button}\n                  startIcon={<SaveIcon />}\n                  style={{ backgroundColor: \"#014d88\" }}\n                  onClick={handleSubmit}\n                  disabled={saving}\n                >\n                  {!saving ? (\n                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\n                  ) : (\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      Updating...\n                    </span>\n                  )}\n                </MatButton>\n              </>\n            ) : (\n              <>\n                <MatButton\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.button}\n                  startIcon={<SaveIcon />}\n                  style={{ backgroundColor: \"#014d88\" }}\n                  onClick={handleSubmit}\n                  disabled={saving}\n                >\n                  {!saving ? (\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                  ) : (\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      Saving...\n                    </span>\n                  )}\n                </MatButton>\n              </>\n            )}\n          </form>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default LabourDelivery;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\AncEnrollement.js",["762","763","764"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardBody,\n  FormGroup,\n  Label,\n  Input,\n  InputGroup,\n} from \"reactstrap\";\nimport MatButton from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { url as baseUrl, token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport \"react-summernote/dist/react-summernote.css\"; // import styles\nimport { Spinner } from \"reactstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    flexGrow: 1,\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst AncEnrollement = (props) => {\n  const patientObj = props.patientObj;\n  console.log(patientObj);\n  let history = useHistory();\n  const classes = useStyles();\n  //const [values, setValues] = useState([]);\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [ANCSetting, setANCSetting] = useState([]);\n\n  const [vital, setVitalSignDto] = useState({\n    ancSetting: \"\",\n    bodyWeight: \"\",\n    diastolic: \"\",\n    encounterDate: \"\",\n    facilityId: 1,\n    height: \"\",\n    personId: \"\",\n    pulse: \"\",\n    respiratoryRate: \"\",\n    systolic: \"\",\n    temperature: \"\",\n    visitId: \"\",\n  });\n\n  const handleInputChangeVitalSignDto = (e) => {\n    setVitalSignDto({ ...vital, [e.target.name]: e.target.value });\n  };\n\n  //FORM VALIDATION\n  const validate = () => {\n    let temp = { ...errors };\n    //temp.name = details.name ? \"\" : \"This field is required\"\n    //temp.description = details.description ? \"\" : \"This field is required\"\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  //get ANC setting\n  const getANCSetting = (e) => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TEST_SETTING_CPMTCT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        console.log(response);\n        setANCSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  /**** Submit Button Processing  */\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    setSaving(true);\n    axios\n      .post(`${baseUrl}patient/vital-sign/`, vital, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSaving(false);\n        props.patientObj.commenced = true;\n        toast.success(\"Vital signs save successful\");\n        props.setActiveContent({\n          ...props.activeContent,\n          route: \"recent-history\",\n        });\n      })\n      .catch((error) => {\n        setSaving(false);\n        toast.error(\"Something went wrong\");\n      });\n  };\n\n  useEffect(() => {\n    getANCSetting();\n  }, []);\n\n  return (\n    <div>\n      <Card className={classes.root}>\n        <CardBody>\n          <form>\n            <div className=\"row\">\n              <h2>ANC Enrollment</h2>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>ANC Setting</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"ancSetting\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.ancSetting}\n                    >\n                      <option value=\"\">Select</option>\n                      {ANCSetting.length > 0 &&\n                        ANCSetting.map((each) => {\n                          return (\n                            <option value={each.code}>{each.display}</option>\n                          );\n                        })}\n                    </Input>\n                  </InputGroup>\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    ANC No <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Date of 1st ANC <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"date\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Gravida</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"number\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                      min=\"0\"\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Parity</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"number\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Date Of Last Menstrual Period{\" \"}\n                    <span style={{ color: \"red\" }}> *</span>{\" \"}\n                  </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"date\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Expected Date Of Delivery </Label>\n                  <InputGroup>\n                    <Input\n                      type=\"Date\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Gestational Age (Weeks)</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Time of HIV Diagnosis</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              {/* <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Source of Referral</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div> */}\n\n              <h3>Syphilis Information</h3>\n              <hr />\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Tested for syphilis?</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Test Result</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"date\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Treated for Syphilis</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Referred for syphilis treatment</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <h3>PMTCT HTS</h3>\n              <hr />\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Previously known HIV positive?</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Date tested HIV positive</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"date\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Accepted HIV Testing?</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>HIV test result</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>HIV Restesting?</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Received HIV test result?</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n\n              <h3>Hepatitis Information</h3>\n              <hr />\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Tested for Hepatitis B</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Hepatitis B test result</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Tested for Hepatitis C</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Hepatitis C test result</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"text\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    />\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <h3>Partner Notification</h3>\n              <hr />\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Agreed to partner notification?</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    >\n                      <option value=\"\">Select</option>\n                    </Input>\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Partner's HIV status</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    >\n                      <option value=\"\">Select</option>\n                    </Input>\n                  </InputGroup>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Partner referred to?</Label>\n                  <InputGroup>\n                    <Input\n                      type=\"select\"\n                      name=\"encounterDate\"\n                      id=\"encounterDate\"\n                      onChange={handleInputChangeVitalSignDto}\n                      value={vital.encounterDate}\n                    >\n                      <option value=\"\">Select</option>\n                    </Input>\n                  </InputGroup>\n                </FormGroup>\n              </div>\n            </div>\n\n            {saving ? <Spinner /> : \"\"}\n            <br />\n\n            <MatButton\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              startIcon={<SaveIcon />}\n              onClick={handleSubmit}\n            >\n              {!saving ? (\n                <span style={{ textTransform: \"capitalize\" }}>Save</span>\n              ) : (\n                <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\n              )}\n            </MatButton>\n\n            <MatButton\n              variant=\"contained\"\n              className={classes.button}\n              startIcon={<CancelIcon />}\n            >\n              <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\n            </MatButton>\n          </form>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default AncEnrollement;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Partners\\AddNewPartner.js",["765","766","767","768"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Infants\\InfantRegistration.js",["769","770","771","772","773","774","775","776","777"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardBody,\n  FormGroup,\n  Label as FormLabelName,\n  Input,\n  InputGroup,\n  InputGroupText,\n} from \"reactstrap\";\n\nimport MatButton from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport axios from \"axios\";\nimport { Button } from \"semantic-ui-react\";\nimport { toast } from \"react-toastify\";\nimport { url as baseUrl, token } from \"./../../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport \"react-summernote/dist/react-summernote.css\"; // import styles\nimport { Spinner } from \"reactstrap\";\nimport moment from \"moment\";\nimport { NoStroller } from \"@mui/icons-material\";\nimport { Grid, Segment, Label, List } from \"semantic-ui-react\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    flexGrow: 1,\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst LabourinfantInfo = (props) => {\n  const patientObj = props.patientObj;\n  //let history = useHistory();\n  const classes = useStyles();\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [disabledField, setDisabledField] = useState(false);\n  const [genders, setGenders] = useState([]);\n  const [newDateOfDelivery, setNewDateOfDelivery] = useState(\"\");\n  const [infantHospitalNumber, setInfantHospitalNumber] = useState(\"\");\n  const [agectx, setAgeCTX] = useState([]);\n  const [infantArv, setInfantArv] = useState([]);\n  //Vital signs clinical decision support\n  const [vitalClinicalSupport, setVitalClinicalSupport] = useState({\n    bodyWeight: \"\",\n  });\n  const [pcrResult, setPcrResult] = useState([]);\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\n  const [infantInfo, setInfantInfo] = useState({\n    ancNo: patientObj?.ancNo,\n    dateOfinfantInfo: \"\",\n    firstName: \"\",\n    middleName: \"\",\n    nin: \"\",\n    sex: \"\",\n    surname: \"\",\n    bodyWeight: \"\",\n    uuid: patientObj.ancUuid,\n    dateOfDelivery: \"\",\n    infantArvDto: \"\",\n    ctxStatus: \"\",\n    // hospitalNumber: patientObj?.hospitalNumber,\n    hospitalNumber: \"\",\n    personUuid: props.patientObj.person_uuid\n      ? props.patientObj.person_uuid\n      : props.patientObj.personUuid\n      ? props.patientObj.personUuid\n      : props.patientObj.uuid,\n  });\n  const [infantPCRTestDto, setInfantPCRTestDto] = useState({\n    ageAtTest: \"\",\n    ancNumber: props.patientObj.ancNo,\n    dateResultReceivedAtFacility: \"\",\n    dateResultReceivedByCaregiver: \"\",\n    dateSampleCollected: \"\",\n    dateSampleSent: \"\",\n    infantHospitalNumber: infantHospitalNumber,\n    results: \"\",\n    testType: \"\",\n  });\n  const [infantArvDto, setInfantArvDto] = useState({\n    ageAtCtx: \"\",\n    ancNumber: props.patientObj.ancNo,\n    arvDeliveryPoint: \"\",\n    infantArvTime: \"\",\n    infantArvType: \"\",\n    infantHospitalNumber: infantHospitalNumber ? infantHospitalNumber : \"\",\n  });\n  const INFANT_PCR_RESULT = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INFANT_PCR_RESULT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setPcrResult(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputChangeInfantPCRTestDto = (e) => {\n    setErrors({ ...errors, [e.target.name]: \"\" });\n    //console.log(e.target.name)infantPCRTestDto, setInfantPCRTestDto\n    setInfantPCRTestDto({\n      ...infantPCRTestDto,\n      [e.target.name]: e.target.value,\n    });\n  };\n  const handleInputChangeInfantArvDto = (e) => {\n    setErrors({ ...errors, [e.target.name]: \"\" });\n    //console.log(e.target.name),\n    setInfantArvDto({ ...infantArvDto, [e.target.name]: e.target.value });\n  };\n\n  //This is to get infant hospital numbet when viewing or updating infant\n  const INFANT_ARV_PROPHYLAXIS_TYPE = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INFANT_ARV_PROPHYLAXIS_TYPE`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setInfantArv(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputValueCheckweight = (e) => {\n    if (\n      e.target.name === \"bodyWeight\" &&\n      (e.target.value < 3 || e.target.value > 150)\n    ) {\n      const message =\n        \"Body weight must not be greater than 150 and less than 3\";\n      setVitalClinicalSupport({ ...vitalClinicalSupport, bodyWeight: message });\n    } else {\n      setVitalClinicalSupport({ ...vitalClinicalSupport, bodyWeight: \"\" });\n    }\n  };\n  console.log(props);\n  useEffect(() => {\n    INFANT_PCR_RESULT();\n    SEX();\n    AGE_CTX_INITIATION();\n    INFANT_ARV_PROPHYLAXIS_TYPE();\n    //console.log(props.activeContent.obj)\n    if (props.activeContent && props.activeContent.actionType === \"create\") {\n      infantInfo.dateOfDelivery = props.activeContent.obj;\n    }\n    if (props.activeContent && props.activeContent.id) {\n      setInfantInfo({ ...infantInfo, ...props.activeContent.obj });\n      setDisabledField(\n        props.activeContent.actionType === \"view\" ? true : false\n      );\n      //props.activeContent.obj.hospitalNumber2=props.activeContent.obj.hospitalNumber\n    }\n  }, [props.patientObj.id, props.activeContent.id]);\n\n  const SEX = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setGenders(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputChangeinfantInfoDto = (e) => {\n    setErrors({ ...errors, [e.target.name]: \"\" });\n    if (e.target.name === \"hospitalNumber\" && e.target.value !== \"\") {\n      async function getHosiptalNumber() {\n        const hosiptalNumber = e.target.value;\n        const response = await axios.post(\n          `${baseUrl}pmtct/anc/exist/infant-hospital-number`,\n          hosiptalNumber,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data !== true) {\n          setHospitalNumStatus(false);\n          errors.hospitalNumber = \"\";\n        } else {\n          errors.hospitalNumber = \"\";\n          toast.error(\"Error! Hosiptal Number already exist\");\n          setHospitalNumStatus(true);\n        }\n      }\n      getHosiptalNumber();\n    }\n    setInfantInfo({ ...infantInfo, [e.target.name]: e.target.value });\n  };\n\n  const AGE_CTX_INITIATION = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/AGE_CTX_INITIATION`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setAgeCTX(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //FORM VALIDATION\n  const validate = () => {\n    let temp = { ...errors };\n    // temp.firstName = infantInfo.firstName ? \"\" : \"This field is required\";\n    temp.surname = infantInfo.surname ? \"\" : \"This field is required\";\n    temp.hospitalNumber = infantInfo.hospitalNumber\n      ? \"\"\n      : \"This field is required\";\n    //temp.dateOfinfantInfo = infantInfo.dateOfinfantInfo ? \"\" : \"This field is required\"\n    temp.sex = infantInfo.sex ? \"\" : \"This field is required\";\n    //temp.bookingStatus = infantInfo.bookingStatus ? \"\" : \"This field is required\"\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  /**** Submit Button Processing  */\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      // setSaving(true);\n      infantInfo.infantArvDto = infantArvDto;\n      infantInfo.infantPCRTestDto = infantPCRTestDto;\n      if (props.activeContent && props.activeContent.actionType === \"update\") {\n        axios\n          .put(\n            `${baseUrl}pmtct/anc/update-infant/${props.activeContent.id}`,\n            infantInfo,\n            { headers: { Authorization: `Bearer ${token}` } }\n          )\n          .then((response) => {\n            setSaving(false);\n            //props.patientObj.commenced=true\n            toast.success(\"Record save successful\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            props.setActiveContent({\n              ...props.activeContent,\n              route: \"infants\",\n            });\n          })\n          .catch((error) => {\n            setSaving(false);\n            toast.error(\"Something went wrong\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          });\n      } else {\n        console.log(infantInfo);\n        axios\n          .post(`${baseUrl}pmtct/anc/add-infants`, infantInfo, {\n            headers: { Authorization: `Bearer ${token}` },\n          })\n          .then((response) => {\n            setSaving(false);\n            toast.success(\"Record save successful\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            props.setActiveContent({\n              ...props.activeContent,\n              route: \"infants\",\n            });\n          })\n          .catch((error) => {\n            setSaving(false);\n            toast.error(\"Something went wrong\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          });\n      }\n    } else {\n      toast.error(\"All field are required\", {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  };\n\n  const LoadPage = () => {\n    props.setActiveContent({\n      ...props.activeContent,\n      route: \"infants\",\n      id: \"\",\n      actionType: \"\",\n    });\n  };\n\n  return (\n    <div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className=\" float-end  mr-2 mt-2\"\n        onClick={() => LoadPage()}\n        style={{ backgroundColor: \"#014d88\" }}\n        //startIcon={<FaUserPlus size=\"10\"/>}\n      >\n        <span style={{ textTransform: \"capitalize\" }}>Back</span>\n      </Button>\n      <br />\n      <br />\n      <br />\n      <br />\n      <Card className={classes.root}>\n        <CardBody>\n          <form>\n            <div className=\"row\">\n              <h2>New Infant Registration</h2>\n              <div className=\"row\">\n                {patientObj?.ancNo && (\n                  <div className=\"form-group mb-3 col-md-6\">\n                    <FormGroup>\n                      <FormLabelName>ANC Number</FormLabelName>\n                      <InputGroup>\n                        <Input\n                          type=\"text\"\n                          name=\"ancNo\"\n                          id=\"ancNo\"\n                          onChange={handleInputChangeinfantInfoDto}\n                          value={patientObj.ancNo}\n                          disabled\n                        />\n                      </InputGroup>\n                      {errors.ancNo !== \"\" ? (\n                        <span className={classes.error}>{errors.ancNo}</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n\n                <div className=\"form-group mb-3 col-md-6\">\n                  <FormGroup>\n                    <FormLabelName>\n                      Hospital Number <span style={{ color: \"red\" }}> *</span>\n                    </FormLabelName>\n                    <InputGroup>\n                      <Input\n                        type=\"text\"\n                        name=\"hospitalNumber\"\n                        id=\"hospitalNumber\"\n                        onChange={handleInputChangeinfantInfoDto}\n                        value={infantInfo.hospitalNumber}\n                        // disabled={true}\n                      />\n                    </InputGroup>\n                    {errors.hospitalNumber !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.hospitalNumber}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                    {hospitalNumStatus === true ? (\n                      <span className={classes.error}>\n                        {\"Hospital number already exist\"}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-6\">\n                  <FormGroup>\n                    <FormLabelName>\n                      Date of Delivery <span style={{ color: \"red\" }}> *</span>\n                    </FormLabelName>\n                    <InputGroup>\n                      <Input\n                        type=\"date\"\n                        disabled={true}\n                        name=\"dateOfDelivery\"\n                        id=\"dateOfDelivery\"\n                        onChange={handleInputChangeinfantInfoDto}\n                        min={props.patientObj.firstAncDate}\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        value={\n                          infantInfo.dateOfDelivery\n                            ? infantInfo.dateOfDelivery\n                            : newDateOfDelivery\n                        }\n                        // disabled={infantInfo.dateOfDelivery ? true : false}\n                      />\n                    </InputGroup>\n                    {errors.dateOfDelivery !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.dateOfDelivery}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-6\">\n                  <FormGroup>\n                    <FormLabelName>\n                      Infant Given Name\n                      {/* <span style={{ color: \"red\" }}> *</span> */}\n                    </FormLabelName>\n                    <InputGroup>\n                      <Input\n                        type=\"text\"\n                        name=\"firstName\"\n                        id=\"firstName\"\n                        onChange={handleInputChangeinfantInfoDto}\n                        value={infantInfo.firstName}\n                        disabled={disabledField}\n                      />\n                    </InputGroup>\n                    {/* {errors.firstName !== \"\" ? (\n                      <span className={classes.error}>{errors.firstName}</span>\n                    ) : (\n                      \"\"\n                    )} */}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-6\">\n                  <FormGroup>\n                    <FormLabelName>Infant Surname</FormLabelName>\n                    <span style={{ color: \"red\" }}> *</span>\n                    <InputGroup>\n                      <Input\n                        type=\"input\"\n                        name=\"surname\"\n                        id=\"surname\"\n                        onChange={handleInputChangeinfantInfoDto}\n                        value={infantInfo.surname}\n                        disabled={disabledField}\n                      ></Input>\n                    </InputGroup>\n\n                    {errors.surname !== \"\" ? (\n                      <span className={classes.error}>{errors.surname}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\" mb-3 col-md-6\">\n                  <FormGroup>\n                    <FormLabelName>\n                      Birth Weight <span style={{ color: \"red\" }}> *</span>\n                    </FormLabelName>\n                    <InputGroup>\n                      <Input\n                        type=\"number\"\n                        name=\"bodyWeight\"\n                        id=\"bodyWeight\"\n                        onChange={handleInputChangeinfantInfoDto}\n                        min=\"1\"\n                        max=\"150\"\n                        onKeyUp={handleInputValueCheckweight}\n                        value={infantInfo.bodyWeight}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0rem\",\n                        }}\n                        disabled={disabledField}\n                      />\n                      <InputGroupText\n                        addonType=\"append\"\n                        style={{\n                          backgroundColor: \"#014D88\",\n                          color: \"#fff\",\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0rem\",\n                        }}\n                      >\n                        kg\n                      </InputGroupText>\n                    </InputGroup>\n                    {errors.bodyWeight !== \"\" ? (\n                      <span className={classes.error}>{errors.bodyWeight}</span>\n                    ) : (\n                      \"\"\n                    )}\n                    {vitalClinicalSupport.weight !== \"\" ? (\n                      <span className={classes.error}>\n                        {vitalClinicalSupport.weight}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                    {infantInfo.bodyWeight !== \"\" &&\n                    infantInfo.bodyWeight <= 0 ? (\n                      <span className={classes.error}>\n                        Invalid Body Weight{\" \"}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-6\">\n                  <FormGroup>\n                    <FormLabelName>\n                      Sex <span style={{ color: \"red\" }}> *</span>\n                    </FormLabelName>\n                    <InputGroup>\n                      <Input\n                        type=\"select\"\n                        name=\"sex\"\n                        id=\"sex\"\n                        onChange={handleInputChangeinfantInfoDto}\n                        value={infantInfo.sex}\n                        disabled={disabledField}\n                      >\n                        <option value=\"\">Select </option>\n\n                        {genders.map((value) => (\n                          <option key={value.id} value={value.display}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </Input>\n                    </InputGroup>\n                    {errors.sex !== \"\" ? (\n                      <span className={classes.error}>{errors.sex}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                {/*  */}\n              </div>\n              <>\n                <Label\n                  as=\"a\"\n                  color=\"blue\"\n                  style={{ width: \"106%\", height: \"35px\" }}\n                  horizontal\n                >\n                  <h4 style={{ color: \"#fff\" }}> Infant ARV & CTX</h4>\n                </Label>\n                <br />\n                <br />\n                {/* LAB Screening Form */}\n                <div className=\"row mt-4\">\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <FormLabelName>CTX </FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"ctxStatus\"\n                        id=\"ctxStatus\"\n                        value={infantInfo.ctxStatus}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        onChange={handleInputChangeinfantInfoDto}\n                        disabled={disabledField}\n                      >\n                        <option value=\"\">Select </option>\n                        <option value=\"YES\">YES </option>\n                        <option value=\"NO\">NO </option>\n                      </Input>\n                      {errors.ctxStatus !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.ctxStatus}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n\n                  <div className=\" mb-3 col-md-4 \">\n                    <FormGroup>\n                      <FormLabelName>Date of CTX Initiation </FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"ageAtCtx\"\n                        id=\"ageAtCtx\"\n                        value={infantArvDto.ageAtCtx}\n                        onChange={handleInputChangeInfantArvDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"select\">Select </option>\n                        {agectx.map((value, index) => (\n                          <option key={index} value={value.code}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </Input>\n                      {errors.ageAtCtx !== \"\" ? (\n                        <span className={classes.error}>{errors.ageAtCtx}</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\" mb-3 col-md-4\">\n                    <FormGroup>\n                      <FormLabelName>Infant ARV Type </FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"infantArvType\"\n                        id=\"infantArvType\"\n                        value={infantArvDto.infantArvType}\n                        onChange={handleInputChangeInfantArvDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"select\">Select </option>\n                        {infantArv.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </Input>\n                      {errors.infantArvType !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.infantArvType}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\" mb-3 col-md-4\">\n                    <FormGroup>\n                      <FormLabelName> Timing of ARV Prophylaxis </FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"arvDeliveryPoint\"\n                        id=\"arvDeliveryPoint\"\n                        value={infantArvDto.arvDeliveryPoint}\n                        onChange={handleInputChangeInfantArvDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"select\">Select </option>\n                        <option value=\"Within 72 hour\">Within 72 hour </option>\n                        <option value=\"After 72 hour \">After 72 hour </option>\n                      </Input>\n                      {errors.arvDeliveryPoint !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.arvDeliveryPoint}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\" mb-3 col-md-4\">\n                    <FormGroup>\n                      <FormLabelName> Place of Delivery </FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"infantArvTime\"\n                        id=\"infantArvTime\"\n                        value={infantArvDto.infantArvTime}\n                        onChange={handleInputChangeInfantArvDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"select\">Select </option>\n                        <option value=\"Facility Delivery\">\n                          Facility Delivery\n                        </option>\n                        <option value=\"Delivered outside facility\">\n                          Delivered outside facility{\" \"}\n                        </option>\n                      </Input>\n                      {errors.infantArvTime !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.infantArvTime}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                </div>\n              </>\n              <>\n                <Label\n                  as=\"a\"\n                  color=\"black\"\n                  style={{ width: \"106%\", height: \"35px\" }}\n                  horizontal\n                >\n                  <h4 style={{ color: \"#fff\" }}> Infant PCR/HIV Test </h4>\n                </Label>\n                <br />\n                <br />\n                {/* LAB Screening Form */}\n                <div className=\"row mt-3\">\n                  <div className=\" mb-3 col-md-6\">\n                    <FormGroup>\n                      <FormLabelName>Age at Test(months)</FormLabelName>\n                      <Input\n                        type=\"number\"\n                        name=\"ageAtTest\"\n                        id=\"ageAtTest\"\n                        value={infantPCRTestDto.ageAtTest}\n                        onChange={handleInputChangeInfantPCRTestDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled\n                      />\n                      {errors.ageAtTest !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.ageAtTest}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\" mb-3 col-md-6\">\n                    <FormGroup>\n                      <FormLabelName> Sample Type</FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"testType\"\n                        id=\"testType\"\n                        value={infantPCRTestDto.testType}\n                        onChange={handleInputChangeInfantPCRTestDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"\">Select </option>\n                        <option value=\"First PCR\">First PCR</option>\n                        <option value=\"Second PCR\">Second PCR</option>\n                        <option value=\"Confirmatory PCR\">\n                          Confirmatory PCR\n                        </option>\n                        <option value=\"First Rapid Antibody\">\n                          First Rapid Antibody{\" \"}\n                        </option>\n                        <option value=\"Second Rapid Antibody \">\n                          Second Rapid Antibody{\" \"}\n                        </option>\n                      </Input>\n                      {errors.testType !== \"\" ? (\n                        <span className={classes.error}>{errors.testType}</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\" mb-3 col-md-6\">\n                    <FormGroup>\n                      <FormLabelName>Date sample collected</FormLabelName>\n                      <Input\n                        type=\"date\"\n                        name=\"dateSampleCollected\"\n                        id=\"dateSampleCollected\"\n                        value={infantPCRTestDto.dateSampleCollected}\n                        onChange={handleInputChangeInfantPCRTestDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        min={\n                          props.patientObj &&\n                          props.patientObj.pmtctEnrollmentRespondDto\n                            ? props.patientObj.pmtctEnrollmentRespondDto\n                                .pmtctEnrollmentDate\n                            : \"\"\n                        }\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        disabled={disabledField}\n                      />\n                      {errors.dateSampleCollected !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.dateSampleCollected}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\" mb-3 col-md-6\">\n                    <FormGroup>\n                      <FormLabelName>Date Result Received</FormLabelName>\n                      <Input\n                        type=\"date\"\n                        name=\"dateResultReceivedAtFacility\"\n                        id=\"dateResultReceivedAtFacility\"\n                        value={infantPCRTestDto.dateResultReceivedAtFacility}\n                        onChange={handleInputChangeInfantPCRTestDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        min={infantPCRTestDto.dateSampleCollected}\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        disabled={disabledField}\n                      />\n                      {errors.dateResultReceivedAtFacility !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.dateResultReceivedAtFacility}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\" mb-3 col-md-6\">\n                    <FormGroup>\n                      <FormLabelName>\n                        Date Result Received By Caregiver\n                      </FormLabelName>\n                      <Input\n                        type=\"date\"\n                        name=\"dateResultReceivedByCaregiver\"\n                        id=\"dateResultReceivedByCaregiver\"\n                        value={infantPCRTestDto.dateResultReceivedByCaregiver}\n                        onChange={handleInputChangeInfantPCRTestDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        min={infantPCRTestDto.dateSampleCollected}\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        disabled={disabledField}\n                      />\n                      {errors.dateResultReceivedByCaregiver !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.dateResultReceivedByCaregiver}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\" mb-3 col-md-6\">\n                    <FormGroup>\n                      <FormLabelName>Date Sample Sent</FormLabelName>\n                      <Input\n                        type=\"date\"\n                        name=\"dateSampleSent\"\n                        id=\"dateSampleSent\"\n                        value={infantPCRTestDto.dateSampleSent}\n                        onChange={handleInputChangeInfantPCRTestDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        min={infantPCRTestDto.dateSampleCollected}\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        disabled={disabledField}\n                      />\n                      {errors.dateSampleSent !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.dateSampleSent}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\" mb-3 col-md-6\">\n                    <FormGroup>\n                      <FormLabelName>Result *</FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"results\"\n                        id=\"results\"\n                        value={infantPCRTestDto.results}\n                        onChange={handleInputChangeInfantPCRTestDto}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"select\">Select </option>\n                        {pcrResult.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </Input>\n                      {errors.results !== \"\" ? (\n                        <span className={classes.error}>{errors.results}</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                </div>\n              </>\n              {/* <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >National Identity  Number(NIN)</Label>\n                            <InputGroup> \n                                <Input \n                                    type=\"text\"\n                                    name=\"nin\"\n                                    id=\"nin\"\n                                    onChange={handleInputChangeinfantInfoDto}\n                                    value={infantInfo.nin} \n                                    disabled={disabledField}\n                                />\n\n                            </InputGroup>\n                            {errors.nin !==\"\" ? (\n                                    <span className={classes.error}>{errors.nin}</span>\n                            ) : \"\" }\n                            </FormGroup>\n                    </div> */}\n            </div>\n\n            {saving ? <Spinner /> : \"\"}\n            <br />\n            {props.activeContent &&\n            props.activeContent.actionType === \"update\" ? (\n              <>\n                <MatButton\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.button}\n                  disabled={saving}\n                  startIcon={<SaveIcon />}\n                  style={{ backgroundColor: \"#014d88\" }}\n                  onClick={handleSubmit}\n                >\n                  {!saving ? (\n                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\n                  ) : (\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      Updating\n                    </span>\n                  )}\n                </MatButton>\n              </>\n            ) : (\n              <>\n                <MatButton\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  hidden={disabledField || hospitalNumStatus}\n                  className={classes.button}\n                  disabled={saving}\n                  startIcon={<SaveIcon />}\n                  style={{ backgroundColor: \"#014d88\" }}\n                  onClick={handleSubmit}\n                >\n                  {!saving ? (\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                  ) : (\n                    <span style={{ textTransform: \"capitalize\" }}>Saving</span>\n                  )}\n                </MatButton>\n              </>\n            )}\n            <MatButton\n              variant=\"contained\"\n              className={classes.button}\n              startIcon={<CancelIcon />}\n              style={{ backgroundColor: \"#992E62\" }}\n              onClick={() => LoadPage()}\n            >\n              <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\n            </MatButton>\n          </form>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default LabourinfantInfo;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Index.js",["778","779","780","781","782","783","784","785","786","787","788"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Consultation\\Index.js",["789","790"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Infants\\Index.js",["791","792"],"import React, { useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport axios from \"axios\";\nimport { url as baseUrl, token as token } from \"./../../../../api\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Modal } from \"react-bootstrap\";\nimport \"@reach/menu-button/styles.css\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\nimport { toast } from \"react-toastify\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst InfantInformation = (props) => {\n  const [infants, setInfants] = useState([]);\n  const [delivery, setDelivery] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [aliveChild, setAliveChild] = useState(0);\n  const [open, setOpen] = React.useState(false);\n  const [saving, setSaving] = useState(false);\n  const [record, setRecord] = useState(null);\n  const toggle = () => setOpen(!open);\n  useEffect(() => {\n    // if (props.patientObj.ancNo) {\n    //   InfantInfo();\n    //   console.log(\"it has anc \");\n    // } else {\n    InfantInfoByUuid();\n    //   console.log(\"it has  no anc \");\n    // }\n    DeliveryInfo();\n  }, []);\n  ///GET LIST OF Infants\n  const InfantInfo = () => {\n    setLoading(true);\n    axios\n      .get(\n        `${baseUrl}pmtct/anc/get-infant-by-ancno/${props.patientObj.ancNo}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setLoading(false);\n        setInfants(response.data);\n      })\n\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const InfantInfoByUuid = () => {\n    setLoading(true);\n    axios\n      .get(\n        `${baseUrl}pmtct/anc/get-infant-by-mother-person-uuid/${\n          props.patientObj.person_uuid\n            ? props.patientObj.person_uuid\n            : props.patientObj.personUuid\n            ? props.patientObj.personUuid\n            : props.patientObj.uuid\n        }`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setLoading(false);\n        setInfants(response.data);\n      })\n\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  ///GET Delivery Object\n  const DeliveryInfo = () => {\n    setLoading(true);\n    if (props.patientObj.ancNo) {\n      axios\n        .get(`${baseUrl}pmtct/anc/view-delivery2/${props.patientObj.ancNo}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          setLoading(false);\n          setDelivery(response.data.dateOfDelivery);\n          setAliveChild(\n            response.data && response.data.numberOfInfantsAlive\n              ? response.data.numberOfInfantsAlive\n              : 0\n          );\n        })\n\n        .catch((error) => {\n          //console.log(error);\n        });\n    } else {\n      axios\n        .get(\n          `${baseUrl}pmtct/anc/view-delivery-with-uuid/${\n            props.patientObj.person_uuid\n              ? props.patientObj.person_uuid\n              : props.patientObj.personUuid\n              ? props.patientObj.personUuid\n              : props.patientObj.uuid\n          }`,\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        )\n        .then((response) => {\n          setLoading(false);\n          setDelivery(response.data.dateOfDelivery);\n          setAliveChild(\n            response.data && response.data.numberOfInfantsAlive\n              ? response.data.numberOfInfantsAlive\n              : 0\n          );\n        })\n\n        .catch((error) => {\n          //console.log(error);\n        });\n    }\n  };\n\n  const LoadPage = (obj, actionType) => {\n    props.setActiveContent({\n      ...props.activeContent,\n      route: \"add-infant\",\n      id: obj?.id,\n      actionType: actionType,\n      obj: obj,\n    });\n  };\n  const LoadDeletePage = (row) => {\n    setSaving(true);\n    //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\n    axios\n      .delete(`${baseUrl}pmtct/anc/delete/infantinfo/${row.id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        toast.success(\"Record Deleted Successfully\");\n        InfantInfo();\n        toggle();\n        setSaving(false);\n      })\n      .catch((error) => {\n        setSaving(false);\n        if (error.response && error.response.data) {\n          let errorMessage =\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\"\n              ? error.response.data.apierror.message\n              : \"Something went wrong, please try again\";\n          toast.error(errorMessage);\n        } else {\n          toast.error(\"Something went wrong. Please try again...\");\n        }\n      });\n  };\n  const LoadModal = (row) => {\n    toggle();\n    setRecord(row);\n  };\n\n  return (\n    <div>\n      {infants.length < aliveChild &&\n        aliveChild > infants.length &&\n        props.patientObj.entryPoint !== \"POINT_ENTRY_PMTCT_POSTNATAL_WARD\" &&\n        props.patientObj.entryPoint !== \"621\" && (\n          <>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\" float-end  mr-2 mt-2\"\n              onClick={() => LoadPage(delivery, \"create\")}\n              style={{ backgroundColor: \"#014d88\" }}\n              startIcon={<FaUserPlus size=\"10\" />}\n            >\n              <span style={{ textTransform: \"capitalize\" }}>New Infant</span>\n            </Button>\n          </>\n        )}\n      {props.patientObj.entryPoint === \"POINT_ENTRY_PMTCT_POSTNATAL_WARD\" ||\n        (props.patientObj.entryPoint === \"621\" && (\n          <>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\" float-end  mr-2 mt-2\"\n              onClick={() => LoadPage(delivery, \"create\")}\n              style={{ backgroundColor: \"#014d88\" }}\n              startIcon={<FaUserPlus size=\"10\" />}\n            >\n              <span style={{ textTransform: \"capitalize\" }}>New Infant</span>\n            </Button>\n          </>\n        ))}\n      <br />\n      <br />\n      <br />\n      <MaterialTable\n        icons={tableIcons}\n        title=\"List of Infants \"\n        columns={[\n          { title: \"Infant Name\", field: \"name\" },\n          {\n            title: \"Hospital No.\",\n            field: \"hospital\",\n          },\n          { title: \"ANC NO.\", field: \"anc\" },\n          { title: \"Age\", field: \"nin\" },\n          { title: \"Date of Delivery\", field: \"date\" },\n          { title: \"Sex\", field: \"sex\", filtering: false },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        isLoading={loading}\n        data={infants.map((row) => ({\n          name: row.firstName + \" \" + row.surname,\n          hospital: row.hospitalNumber,\n          anc: row.ancNo,\n          nin:\n            row.nin !== \"0\" && row.nin !== \"1\"\n              ? row.nin + \" Months\"\n              : row.nin + \" Month\",\n          sex: row.sex,\n          date: row.dateOfDelivery,\n          actions: (\n            <div>\n              <Menu.Menu position=\"right\">\n                <Menu.Item>\n                  <Button style={{ backgroundColor: \"rgb(153,46,98)\" }} primary>\n                    <Dropdown item text=\"Action\">\n                      <Dropdown.Menu style={{ marginTop: \"10px\" }}>\n                        <Dropdown.Item onClick={() => LoadPage(row, \"view\")}>\n                          {\" \"}\n                          <Icon name=\"eye\" />\n                          View{\" \"}\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => LoadPage(row, \"update\")}>\n                          <Icon name=\"edit\" />\n                          Edit\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => LoadModal(row, \"delete\")}>\n                          {\" \"}\n                          <Icon name=\"trash\" /> Delete\n                        </Dropdown.Item>\n                      </Dropdown.Menu>\n                    </Dropdown>\n                  </Button>\n                </Menu.Item>\n              </Menu.Menu>\n            </div>\n          ),\n        }))}\n        options={{\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n          },\n          searchFieldStyle: {\n            width: \"200%\",\n            margingLeft: \"250px\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n      />\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"md\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>\n            Are you Sure you want to delete -{\" \"}\n            <b>{record && record.firstName + \" \" + record.surname}</b>\n          </h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={() => LoadDeletePage(record)}\n            style={{ backgroundColor: \"red\", color: \"#fff\" }}\n            disabled={saving}\n          >\n            {saving === false ? \"Yes\" : \"Deleting...\"}\n          </Button>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n            disabled={saving}\n          >\n            No\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default InfantInformation;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\Partners\\Index.js",["793","794"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js",["795","796"],"import React, { useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport axios from \"axios\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { toast } from \"react-toastify\";\n\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n//import { makeStyles } from '@material-ui/core/styles'\nimport { useHistory } from \"react-router-dom\";\n//import {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\nimport \"@reach/menu-button/styles.css\";\nimport { Modal } from \"react-bootstrap\";\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst PatientnHistory = (props) => {\n  const [recentActivities, setRecentActivities] = useState([]);\n  const [loading, setLoading] = useState(true);\n  let history = useHistory();\n  const [open, setOpen] = React.useState(false);\n  const [saving, setSaving] = useState(false);\n  const [record, setRecord] = useState(null);\n  const toggle = () => setOpen(!open);\n  let notToBeUpdated = [\"pmtct_infant_information\"];\n  useEffect(() => {\n    PatientHistory();\n  }, [props.patientObj.id]);\n  ///GET LIST OF Patients\n  const PatientHistory = () => {\n    setLoading(true);\n\n    // if (props.patientObj.ancNo) {\n    //   axios\n    //     .get(`${baseUrl}pmtct/anc/activities/${props.patientObj.ancNo}`, {\n    //       headers: { Authorization: `Bearer ${token}` },\n    //     })\n    //     .then((response) => {\n\n    //       setRecentActivities(response.data);\n    //     })\n\n    //     .catch((error) => {\n    //     });\n    // } else {\n    axios\n      .get(\n        `${baseUrl}pmtct/anc/getAllActivities/${\n          props.patientObj.person_uuid\n            ? props.patientObj.person_uuid\n            : props.patientObj.personUuid\n        }`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        setLoading(false);\n        setRecentActivities(response.data);\n      })\n\n      .catch((error) => {\n        //console.log(error);\n      });\n    // }\n  };\n\n  const LoadViewPage = (row, action) => {\n    if (row.path === \"anc-enrollment\") {\n      //props.setActiveContent({...props.activeContent, route:'anc-enrollment', id:row.id, actionType:action})\n      history.push({\n        pathname: \"/update-patient\",\n        state: {\n          id: row.recordId,\n          patientObj: props.patientObj,\n          actionType: action,\n        },\n      });\n    } else if (row.path === \"anc-delivery\") {\n      props.setActiveContent({\n        ...props.activeContent,\n        route: \"labour-delivery\",\n        id: row.recordId,\n        actionType: action,\n      });\n    } else if (row.path === \"pmtct-enrollment\") {\n      props.setActiveContent({\n        ...props.activeContent,\n        route: \"anc-pnc\",\n        id: row.recordId,\n        activeTab: \"history\",\n        actionType: action,\n      });\n    } else if (row.path === \"anc-mother-visit\") {\n      props.setActiveContent({\n        ...props.activeContent,\n        route: \"consultation\",\n        id: row.recordId,\n        activeTab: \"home\",\n        actionType: action,\n      });\n    } else if (row.path === \"pmtct_infant_visit\") {\n      props.setActiveContent({\n        ...props.activeContent,\n        route: \"consultation\",\n        id: row.recordId,\n        activeTab: \"child\",\n        actionType: action,\n      });\n    } else if (row.path === \"pmtct_infant_information\") {\n      props.setActiveContent({\n        ...props.activeContent,\n        route: \"add-infant\",\n        id: row.recordId,\n        activeTab: \"home\",\n        actionType: action,\n      });\n    } else {\n    }\n  };\n  const LoadDeletePage = (row) => {\n    if (row.path === \"anc-enrollment\") {\n      setSaving(true);\n      //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\n      axios\n        .delete(`${baseUrl}pmtct/anc/delete/anc/${row.recordId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          toast.success(\"Record Deleted Successfully\");\n          PatientHistory();\n          toggle();\n          setSaving(false);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    } else if (row.path === \"pmtct-enrollment\") {\n      setSaving(true);\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\n      axios\n        .delete(`${baseUrl}pmtct/anc/delete/pmtct/${row.recordId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          toast.success(\"Record Deleted Successfully\");\n          PatientHistory();\n          toggle();\n          setSaving(false);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    } else if (row.path === \"anc-delivery\") {\n      setSaving(false);\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\n      axios\n        .delete(`${baseUrl}pmtct/anc/delete/delivery/${row.recordId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          toast.success(\"Record Deleted Successfully\");\n          PatientHistory();\n          toggle();\n          setSaving(false);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    } else if (row.path === \"anc-mother-visit\") {\n      setSaving(true);\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\n      axios\n        .delete(`${baseUrl}pmtct/anc/delete/delivery/${row.recordId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          toast.success(\"Record Deleted Successfully\");\n          PatientHistory();\n          toggle();\n          setSaving(false);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    } else if (row.path === \"pmtct_infant_visit\") {\n      setSaving(true);\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\n      axios\n        .delete(`${baseUrl}pmtct/anc/delete/infantvisit/${row.recordId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          toast.success(\"Record Deleted Successfully\");\n          PatientHistory();\n          toggle();\n          setSaving(false);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    } else if (row.path === \"pmtct_infant_information\") {\n      setSaving(true);\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\n      axios\n        .delete(`${baseUrl}pmtct/anc/delete/infantinfo/${row.recordId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          toast.success(\"Record Deleted Successfully\");\n          PatientHistory();\n          toggle();\n          setSaving(false);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    } else {\n    }\n  };\n  const LoadModal = (row) => {\n    toggle();\n    setRecord(row);\n  };\n\n  return (\n    <div>\n      <br />\n\n      <MaterialTable\n        icons={tableIcons}\n        title=\"Patient History \"\n        columns={[\n          { title: \"Description\", field: \"name\" },\n          {\n            title: \"Encounter Date\",\n            field: \"date\",\n          },\n          // { title: \"Status\", field: \"status\", filtering: false },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        isLoading={loading}\n        data={\n          recentActivities &&\n          recentActivities.map((row) => ({\n            name: row.activityName,\n            date: row.activityDate,\n            actions: !notToBeUpdated.includes(row.path) ? (\n              <div>\n                <Menu.Menu position=\"right\">\n                  <Menu.Item>\n                    <Button\n                      style={{ backgroundColor: \"rgb(153,46,98)\" }}\n                      primary\n                    >\n                      <Dropdown item text=\"Action\">\n                        <Dropdown.Menu style={{ marginTop: \"10px\" }}>\n                          {row.viewable && (\n                            <Dropdown.Item\n                              onClick={() => LoadViewPage(row, \"view\")}\n                            >\n                              {\" \"}\n                              <Icon name=\"eye\" />\n                              View{\" \"}\n                            </Dropdown.Item>\n                          )}\n                          {row.viewable && (\n                            <Dropdown.Item\n                              onClick={() => LoadViewPage(row, \"update\")}\n                            >\n                              <Icon name=\"edit\" />\n                              Edit\n                            </Dropdown.Item>\n                          )}\n                          <Dropdown.Item\n                            onClick={() => LoadModal(row, \"delete\")}\n                          >\n                            {\" \"}\n                            <Icon name=\"trash\" /> Delete\n                          </Dropdown.Item>\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </Button>\n                  </Menu.Item>\n                </Menu.Menu>\n              </div>\n            ) : (\n              \"\"\n            ),\n          }))\n        }\n        options={{\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n          },\n          searchFieldStyle: {\n            width: \"200%\",\n            margingLeft: \"250px\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n      />\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"md\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>\n            Are you Sure you want to delete{\" \"}\n            <b>{record && record.activityName}</b>\n          </h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={() => LoadDeletePage(record)}\n            style={{ backgroundColor: \"red\", color: \"#fff\" }}\n            disabled={saving}\n          >\n            {saving === false ? \"Yes\" : \"Deleting...\"}\n          </Button>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n            disabled={saving}\n          >\n            No\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default PatientnHistory;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\History\\RecentHistory.js",["797","798","799"],"import React, { Fragment, useState, useEffect } from \"react\";\n// BS\nimport { Dropdown } from \"react-bootstrap\";\n/// Scroll\n//import { makeStyles } from '@material-ui/core/styles';\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\n//import { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { url as baseUrl, token } from \"../../../api\";\n//import { Alert } from \"react-bootstrap\";\nimport { Card, Accordion } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { toast } from \"react-toastify\";\nimport { Modal } from \"react-bootstrap\";\nimport { Button } from \"semantic-ui-react\";\n\nconst RecentHistory = (props) => {\n  let history = useHistory();\n  const [recentActivities, setRecentActivities] = useState([]);\n  const [infants, setInfants] = useState([]);\n  const [open, setOpen] = React.useState(false);\n  const [saving, setSaving] = useState(false);\n  // const [entryValueDisplay, setEntryValueDisplay] = useState({});\n\n  const [record, setRecord] = useState(null);\n  const toggle = () => setOpen(!open);\n  let notToBeUpdated = [\"pmtct_infant_information\"];\n  const [summartChart, setSummaryChart] = useState({\n    motherVisit: 0,\n    childVisit: 1,\n    childAlive: 0,\n    childDead: 0,\n  });\n  const [activeAccordionHeaderShadow, setActiveAccordionHeaderShadow] =\n    useState(0);\n\n\n  console.log(props);\n  useEffect(() => {\n    if (props?.allEntryPoint) {\n      // getPatientEntryType();\n    }\n    InfantInfo();\n    RecentActivities();\n    SummaryChart();\n  }, [props.patientObj.id]);\n  ///GET LIST OF Infants\n\n  const InfantInfo = () => {\n    if (props.patientObj.ancNo) {\n      axios\n        .get(\n          `${baseUrl}pmtct/anc/get-infant-by-ancno/${props.patientObj.ancNo}`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        )\n        .then((response) => {\n          setInfants(response.data);\n        })\n\n        .catch((error) => {\n          //console.log(error);\n        });\n    } else {\n      axios\n        .get(\n          `${baseUrl}pmtct/anc/get-infant-by-mother-person-uuid/${\n            props.patientObj.person_uuid\n              ? props.patientObj.person_uuid\n              : props.patientObj.personUuid\n              ? props.patientObj.personUuid\n              : props.patientObj.uuid\n          }`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        )\n        .then((response) => {\n          setInfants(response.data);\n        })\n\n        .catch((error) => {\n          //console.log(error);\n        });\n    }\n  };\n\n  const RecentActivities = () => {\n    // if patient has ANC No\n    // if (props.patientObj.ancNo) {\n    //   axios\n    //     .get(`${baseUrl}${props.patientObj.ancNo}`, {\n    //       headers: { Authorization: `Bearer ${token}` },\n    //     })\n    //     .then((response) => {\n    //       setRecentActivities(response.data);\n    //     })\n    //     .catch((error) => {\n    //     });\n    // } else {\n    axios\n      .get(\n        `${baseUrl}pmtct/anc/getAllActivities/${\n          props.patientObj.person_uuid\n            ? props.patientObj.person_uuid\n            : props.patientObj.personUuid\n        }`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        console.log(response.data);\n        setRecentActivities(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n    // }\n  };\n  const SummaryChart = () => {\n    // if patient has ANC No\n\n    if (props.patientObj.ancNo) {\n      axios\n        .get(\n          `${baseUrl}pmtct/anc/get-summary-chart/${props.patientObj.ancNo}`,\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        )\n        .then((response) => {\n          setSummaryChart(response.data);\n        })\n        .catch((error) => {\n          //console.log(error);\n        });\n    } else {\n      axios\n        .get(\n          `${baseUrl}pmtct/anc/get-pmtct-summary-chart/${\n            props.patientObj.person_uuid\n              ? props.patientObj.person_uuid\n              : props.patientObj.personUuid\n          }`,\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        )\n        .then((response) => {\n          setSummaryChart(response.data);\n        })\n        .catch((error) => {\n          //console.log(error);\n        });\n    }\n  };\n  const ActivityName = (name) => {\n    if (name === \"pmtct-enrollment\") {\n      return \"PE\";\n    } else if (name === \"anc-enrollment\") {\n      return \"AE\";\n    } else if (name === \"anc-delivery\") {\n      return \"AD\";\n    } else if (name === \"anc-mother-visit\") {\n      return \"MV\";\n    } else if (name === \"pmtct_infant_visit\") {\n      return \"IV\";\n    } else if (name === \"pmtct_infant_information\") {\n      return \"II\";\n    } else {\n      return \"RA\";\n    }\n  };\n\n  const LoadViewPage = (row, action) => {\n    if (row.path === \"anc-enrollment\") {\n      //props.setActiveContent({...props.activeContent, route:'anc-enrollment', id:row.id, actionType:action})\n      history.push({\n        pathname: \"/update-patient\",\n        state: {\n          id: row.recordId,\n          patientObj: props.patientObj,\n          actionType: action,\n          postValue: \"ANC\",\n          entrypointValue: props.entrypointValue,\n        },\n      });\n    } else if (row.path === \"anc-delivery\") {\n      props.setActiveContent({\n        ...props.activeContent,\n        route: \"labour-delivery\",\n        id: row.recordId,\n        actionType: action,\n      });\n    } else if (row.path === \"pmtct-enrollment\") {\n      props.setActiveContent({\n        ...props.activeContent,\n        route: \"anc-pnc\",\n        id: row.recordId,\n        activeTab: \"history\",\n        actionType: action,\n      });\n    } else if (row.path === \"anc-mother-visit\") {\n      props.setActiveContent({\n        ...props.activeContent,\n        route: \"consultation\",\n        id: row.recordId,\n        activeTab: \"home\",\n        actionType: action,\n      });\n    } else if (row.path === \"pmtct_infant_visit\") {\n      props.setActiveContent({\n        ...props.activeContent,\n        route: \"consultation\",\n        id: row.recordId,\n        activeTab: \"child\",\n        actionType: action,\n      });\n    } else if (row.path === \"pmtct_infant_information\") {\n      props.setActiveContent({\n        ...props.activeContent,\n        route: \"add-infant\",\n        id: row.recordId,\n        activeTab: \"home\",\n        actionType: action,\n      });\n    } else {\n    }\n  };\n  const LoadDeletePage = (row) => {\n    if (row.path === \"anc-enrollment\") {\n      setSaving(true);\n      //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\n      axios\n        .delete(`${baseUrl}pmtct/anc/delete/anc/${row.recordId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          toast.success(\"Record Deleted Successfully\");\n          RecentActivities();\n          toggle();\n          setSaving(false);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    } else if (row.path === \"pmtct-enrollment\") {\n      setSaving(true);\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\n      axios\n        .delete(`${baseUrl}pmtct/anc/delete/pmtct/${row.recordId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          toast.success(\"Record Deleted Successfully\");\n          RecentActivities();\n          toggle();\n          setSaving(false);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    } else if (row.path === \"anc-delivery\") {\n      setSaving(false);\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\n      axios\n        .delete(`${baseUrl}pmtct/anc/delete/delivery/${row.recordId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          toast.success(\"Record Deleted Successfully\");\n          RecentActivities();\n          toggle();\n          setSaving(false);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    } else if (row.path === \"anc-mother-visit\") {\n      setSaving(true);\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\n      axios\n        .delete(`${baseUrl}pmtct/anc/delete/delivery/${row.recordId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          toast.success(\"Record Deleted Successfully\");\n          RecentActivities();\n          toggle();\n          setSaving(false);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    } else if (row.path === \"pmtct_infant_visit\") {\n      setSaving(true);\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\n      axios\n        .delete(`${baseUrl}pmtct/anc/delete/infantvisit/${row.recordId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          toast.success(\"Record Deleted Successfully\");\n          RecentActivities();\n          toggle();\n          setSaving(false);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    } else if (row.path === \"pmtct_infant_information\") {\n      setSaving(true);\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\n      axios\n        .delete(`${baseUrl}pmtct/anc/delete/infantinfo/${row.recordId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          toast.success(\"Record Deleted Successfully\");\n          RecentActivities();\n          toggle();\n          setSaving(false);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    } else {\n    }\n  };\n  const LoadModal = (row) => {\n    toggle();\n    setRecord(row);\n  };\n  const index = 0;\n\n  return (\n    <Fragment>\n      {/* <Ext /> */}\n\n      <div className=\"row\">\n        <div className=\"col-xl-4 col-xxl-4 col-lg-4\">\n          <div className=\"card\">\n            <div className=\"card-header  border-0 pb-0\">\n              <h4 className=\"card-title\"> Recent Activities</h4>\n            </div>\n            <div className=\"card-body\">\n              <PerfectScrollbar\n                style={{ height: \"370px\" }}\n                id=\"DZ_W_Todo1\"\n                className=\"widget-media dz-scroll ps ps--active-y\"\n              >\n                <Accordion\n                  className=\"accordion accordion-header-bg accordion-header-shadow accordion-rounded \"\n                  defaultActiveKey=\"0\"\n                >\n                  <>\n                    {recentActivities &&\n                      recentActivities.map((data, i) => (\n                        <div className=\"accordion-item\" key={i}>\n                          <Accordion.Toggle\n                            as={Card.Text}\n                            eventKey={`${i}`}\n                            className={`accordion-header ${\n                              activeAccordionHeaderShadow === 1\n                                ? \"\"\n                                : \"collapsed\"\n                            } accordion-header-info`}\n                            onClick={() =>\n                              setActiveAccordionHeaderShadow(\n                                activeAccordionHeaderShadow === 1 ? -1 : i\n                              )\n                            }\n                          >\n                            <span className=\"accordion-header-icon\"></span>\n                            <span className=\"accordion-header-text\">\n                              Visit Date :{\" \"}\n                              <span className=\"\">{data.activityName}</span>{\" \"}\n                            </span>\n                            <span className=\"accordion-header-indicator\"></span>\n                          </Accordion.Toggle>\n                          <Accordion.Collapse\n                            eventKey={`${i}`}\n                            className=\"accordion__body\"\n                          >\n                            <div className=\"accordion-body-text\">\n                              <ul className=\"timeline\">\n                                <li>\n                                  <div className=\"timeline-panel\">\n                                    <div\n                                      className={\n                                        i % 2 == 0\n                                          ? \"media me-2 media-info\"\n                                          : \"media me-2 media-success\"\n                                      }\n                                    >\n                                      {ActivityName(data.path)}\n                                    </div>\n                                    <div className=\"media-body\">\n                                      <h5 className=\"mb-1\">\n                                        {data.activityName}\n                                      </h5>\n                                      <small className=\"d-block\">\n                                        {data.activityDate}\n                                      </small>\n                                    </div>\n                                    {!notToBeUpdated.includes(data.path) ? (\n                                      <Dropdown className=\"dropdown\">\n                                        <Dropdown.Toggle\n                                          variant=\" light\"\n                                          className=\"i-false p-0 btn-info sharp\"\n                                        >\n                                          <svg\n                                            width=\"18px\"\n                                            height=\"18px\"\n                                            viewBox=\"0 0 24 24\"\n                                            version=\"1.1\"\n                                          >\n                                            <g\n                                              stroke=\"none\"\n                                              strokeWidth=\"1\"\n                                              fill=\"none\"\n                                              fillRule=\"evenodd\"\n                                            >\n                                              <rect\n                                                x=\"0\"\n                                                y=\"0\"\n                                                width=\"24\"\n                                                height=\"24\"\n                                              />\n                                              <circle\n                                                fill=\"#000000\"\n                                                cx=\"5\"\n                                                cy=\"12\"\n                                                r=\"2\"\n                                              />\n                                              <circle\n                                                fill=\"#000000\"\n                                                cx=\"12\"\n                                                cy=\"12\"\n                                                r=\"2\"\n                                              />\n                                              <circle\n                                                fill=\"#000000\"\n                                                cx=\"19\"\n                                                cy=\"12\"\n                                                r=\"2\"\n                                              />\n                                            </g>\n                                          </svg>\n                                        </Dropdown.Toggle>\n                                        <Dropdown.Menu className=\"dropdown-menu\">\n                                          <Dropdown.Item\n                                            className=\"dropdown-item\"\n                                            onClick={() =>\n                                              LoadViewPage(data, \"view\")\n                                            }\n                                          >\n                                            View\n                                          </Dropdown.Item>\n                                          <Dropdown.Item\n                                            className=\"dropdown-item\"\n                                            onClick={() =>\n                                              LoadViewPage(data, \"update\")\n                                            }\n                                          >\n                                            Update\n                                          </Dropdown.Item>\n                                          <Dropdown.Item\n                                            className=\"dropdown-item\"\n                                            onClick={() =>\n                                              LoadModal(data, \"delete\")\n                                            }\n                                          >\n                                            Delete\n                                          </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                      </Dropdown>\n                                    ) : (\n                                      \"\"\n                                    )}\n                                  </div>\n                                </li>\n                              </ul>\n                            </div>\n                          </Accordion.Collapse>\n                        </div>\n                      ))}\n                  </>\n                </Accordion>\n              </PerfectScrollbar>\n            </div>\n          </div>\n        </div>\n        {props.patientObj.dynamicHivStatus === \"Positive\" ||\n        props.patientObj.hivStatus === \"Positive\" ? (\n          <>\n            <div className=\"col-xl-8 col-xxl-8 col-lg-8\">\n              <div className=\"card\">\n                <div className=\"card-header border-0 pb-0\">\n                  <h4 className=\"card-title\">Patient Chart</h4>\n                </div>\n                <br />\n                <div className=\"row\">\n                  <div className=\"col-sm-6 col-md-6 col-lg-6\">\n                    <div className=\"col-xl-12 col-xxl-12 col-sm-12\">\n                      <div className=\"card overflow-hidden\">\n                        <div className=\"social-graph-wrapper widget-facebook\">\n                          <span className=\"s-icon\">\n                            <span style={{ fontSize: \"16px\" }}>\n                              Total Clinic Visit\n                            </span>\n                          </span>\n                        </div>\n                        <div className=\"row\">\n                          <div className=\"col-6 border-right\">\n                            <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\n                              <h4 className=\"m-1\">\n                                <span className=\"counter\">\n                                  <b>{summartChart.motherVisit}</b>\n                                </span>\n                              </h4>\n                              <p className=\"m-0\">\n                                <b>Mother Visit</b>\n                              </p>\n                            </div>\n                          </div>\n                          {infants.length > 0 && (\n                            <div className=\"col-6\">\n                              <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\n                                <h4 className=\"m-1\">\n                                  <span className=\"counter\">\n                                    <b>{summartChart.childVisit}</b>\n                                  </span>\n                                </h4>\n                                <p className=\"m-0\">\n                                  <b>Infant's Visit</b>\n                                </p>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"col-xl-12 col-xxl-12 col-sm-12\">\n                      <div className=\"card overflow-hidden\">\n                        <div className=\"social-graph-wrapper widget-linkedin\">\n                          <span className=\"s-icon\">\n                            <span style={{ fontSize: \"16px\" }}>\n                              No. of Infants{\" \"}\n                              {infants.length > 0 ? \" : \" + infants.length : \"\"}\n                            </span>\n                          </span>\n                        </div>\n                        <div className=\"row\">\n                          {infants.length > 0 ? (\n                            <>\n                              <div className=\"col-6 border-right\">\n                                <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\n                                  <h4 className=\"m-1\">\n                                    <span className=\"counter\">\n                                      {summartChart.childAlive}\n                                    </span>\n                                  </h4>\n                                  <p className=\"m-0\">\n                                    <b>Alive </b>\n                                  </p>\n                                </div>\n                              </div>\n                              <div className=\"col-6\">\n                                <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\n                                  <h4 className=\"m-1\">\n                                    <span className=\"counter\">\n                                      {summartChart.childDead}\n                                    </span>\n                                  </h4>\n                                  <p className=\"m-0\">\n                                    <b>Dead </b>\n                                  </p>\n                                </div>\n                              </div>\n                            </>\n                          ) : (\n                            <p>No Record</p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col-sm-6 col-md-6 col-lg-6\">\n                    <div className=\"card-body\">\n                      <h3>Current Infant's Details</h3>\n                      {infants.length > 0 ? (\n                        <PerfectScrollbar\n                          style={{ height: \"370px\" }}\n                          id=\"DZ_W_TimeLine1\"\n                          className=\"widget-timeline dz-scroll style-1 height370 ps ps--active-y\"\n                        >\n                          <ul className=\"timeline\">\n                            {infants.length > 0\n                              ? infants.map((obj) => (\n                                  <li key={index}>\n                                    <div\n                                      className={\n                                        index % 2 == 0\n                                          ? \"timeline-badge info\"\n                                          : \"timeline-badge success\"\n                                      }\n                                    ></div>\n                                    <span\n                                      className=\"timeline-panel text-muted\"\n                                      //onClick={()=>redirectLink()}\n                                      //to=\"\"\n                                    >\n                                      <h6 className=\"mb-0\">\n                                        Infant Given Name\n                                        <br />\n                                        {obj.firstName}\n                                      </h6>\n                                      <strong className=\"text-teal\">\n                                        Infant DOB\n                                        <br />\n                                        {obj.dateOfDelivery}\n                                      </strong>\n                                      <br />\n                                      <strong className=\"text-warning\">\n                                        Gender\n                                        <br />\n                                        {obj.sex}\n                                      </strong>\n                                    </span>\n                                  </li>\n                                ))\n                              : \"\"}\n                          </ul>\n                        </PerfectScrollbar>\n                      ) : (\n                        <p>No Record</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </>\n        ) : (\n          \"\"\n        )}\n        {console.log(\n          props.patientObj.dynamicHivStatus === \"Unknown\",\n          props.patientObj.hivStatus === \"Unknown\"\n        )}\n        {/* props.patientObj.dynamicHivStatus === \"Unknown\" || */}\n        <>\n          <div className=\"col-sm-6 col-md-6 col-lg-6\">\n            <div className=\"card-body\">\n              {props.patientObj.hivStatus === \"Unknown\" ||\n              props.patientObj.staticHivStatus === \"Unknown\" ? (\n                <b>Patient has no HTS record. Please refer for testing...</b>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n        </>\n\n        <Modal\n          show={open}\n          toggle={toggle}\n          className=\"fade\"\n          size=\"md\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n          backdrop=\"static\"\n        >\n          <Modal.Header>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n              Notification!\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <h4>\n              Are you Sure you want to delete{\" \"}\n              <b>{record && record.activityName}</b>\n            </h4>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              onClick={() => LoadDeletePage(record)}\n              style={{ backgroundColor: \"red\", color: \"#fff\" }}\n              disabled={saving}\n            >\n              {saving === false ? \"Yes\" : \"Deleting...\"}\n            </Button>\n            <Button\n              onClick={toggle}\n              style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n              disabled={saving}\n            >\n              No\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default RecentHistory;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PmtctServices\\PmtctEntryPoint\\index.js",["800","801","802","803","804","805","806","807","808","809","810"],"import Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { url as baseUrl, token } from \"../../../../api\";\nimport axios from \"axios\";\n\nimport React, { useState, Fragment, useEffect } from \"react\";\nconst PmtctEntryPoint = (props) => {\n  const [key, setKey] = useState(\"home\");\n  const [postPartumValue, setPostPartumValue] = useState(\"\");\n  const [entryPoint, setentryPoint] = useState([]);\n\n  const history = useHistory();\n\n  const POINT_ENTRY_PMTCT = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PMTCT_ENTRY_POINT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setentryPoint(response.data);\n        console.log(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    setKey(\"home\");\n    console.log(props);\n    POINT_ENTRY_PMTCT();\n  }, []);\n\n  return (\n    <div className=\"PMTCT-entryPoint\">\n      <Modal\n        {...props}\n        size=\"md\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            PMTCT Entry Point{\" \"}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4> </h4>\n\n          <div\n            className=\" \"\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            {entryPoint.map((each, i) => {\n              if (each.display === \"ANC\") {\n                return (\n                  <Link\n                    to={{\n                      pathname: props.route,\n                      state: {\n                        showANC: true,\n                        postValue: each.display,\n                        entrypointValue: each.code,\n                        ...props.info,\n                      },\n                    }}\n                  >\n                    <Button\n                      variant=\"primary\"\n                      color=\"primary\"\n                      className=\" mb-10 px-4\"\n                      style={{\n                        border: \"1px solid black\",\n                        color: \"white\",\n                        borderRadius: \"0\",\n                        width: \"120px\",\n                        height: \"35px\",\n                        backgroundColor: \"#007bb6\",\n                        borderRadius: \"3px\",\n                        border: \"none\",\n                        padding: \"0px\",\n                      }}\n                    >\n                      <span style={{ textTransform: \"capitalize\" }}>\n                        {each.display}\n                      </span>\n                    </Button>\n                  </Link>\n                );\n              } else if (each.display === \"L&D\") {\n                return (\n                  <Link\n                    to={{\n                      pathname: props.route,\n                      state: {\n                        showANC: false,\n                        postValue: each.display,\n                        entrypointValue: each.code,\n                        ...props.info,\n                      },\n                    }}\n                  >\n                    <Button\n                      variant=\"primary\"\n                      color=\"primary\"\n                      className=\" mb-10 px-4\"\n                      style={{\n                        border: \"1px solid black\",\n                        color: \"white\",\n                        borderRadius: \"0\",\n                        width: \"120px\",\n                        margin: \"10px 20px \",\n                        height: \"35px\",\n                        backgroundColor: \"rgb(153, 46, 98)\",\n                        borderRadius: \"3px\",\n                        border: \"none\",\n                      }}\n                    >\n                      <span style={{ textTransform: \"capitalize\" }}>\n                        {each.display}\n                      </span>\n                    </Button>\n                  </Link>\n                );\n              } else if (each.display === \"Post-Partum\") {\n                return (\n                  <select\n                    style={{\n                      border: \"1px solid black\",\n                      color: \"white\",\n                      borderRadius: \"0\",\n                      width: \"120px\",\n                      height: \"35px\",\n                      padding: \"0px 5px\",\n                      backgroundColor: \"#21ba45\",\n                      borderRadius: \"3px\",\n                      border: \"none\",\n                    }}\n                    onChange={(e) => {\n                      setPostPartumValue(e.target.value);\n                      history.push({\n                        pathname: props.route,\n                        state: {\n                          showANC: false,\n                          postValue: each.display,\n                          subPostValue: e.target.value,\n                          entrypointValue: each.code,\n\n                          ...props.info,\n                        },\n                      });\n                    }}\n                  >\n                    <option defaultValue={\"\"}>{each.display}</option>\n\n                    <option value=\"≤ 72 hrs\">{\"≤  72 hrs\"}</option>\n                    <option value=\"> 72 hrs - < 6 month\">\n                      {\"> 72 hrs - < 6 month\"}\n                    </option>\n                    <option value=\"> 6 months - 12 months\">\n                      {\"> 6 months - 12 months\"}\n                    </option>\n                  </select>\n                );\n              }\n            })}\n            {/* <Link\n              to={{\n                pathname: props.route,\n                state: {\n                  showANC: true,\n                  postValue: \"ANC\",\n                  entrypointValue: \"619\",\n                  ...props.info,\n                },\n              }}\n            >\n              <Button\n                variant=\"primary\"\n                color=\"primary\"\n                className=\" mb-10 px-4\"\n                style={{\n                  border: \"1px solid black\",\n                  color: \"white\",\n                  borderRadius: \"0\",\n                  width: \"120px\",\n                  height: \"35px\",\n                  backgroundColor: \"#007bb6\",\n                  borderRadius: \"3px\",\n                  border: \"none\",\n                }}\n              >\n                <span style={{ textTransform: \"capitalize\" }}>ANC</span>\n              </Button>\n            </Link>\n\n            <Link\n              to={{\n                pathname: props.route,\n                state: {\n                  showANC: false,\n                  postValue: \"L&D\",\n                  entrypointValue: \"620\",\n                  ...props.info,\n                },\n              }}\n            >\n              <Button\n                variant=\"primary\"\n                color=\"primary\"\n                className=\" mb-10 px-4\"\n                style={{\n                  border: \"1px solid black\",\n                  color: \"white\",\n                  borderRadius: \"0\",\n                  width: \"120px\",\n                  margin: \"10px 20px \",\n                  height: \"35px\",\n                  backgroundColor: \"rgb(153, 46, 98)\",\n                  borderRadius: \"3px\",\n                  border: \"none\",\n                }}\n              >\n                <span style={{ textTransform: \"capitalize\" }}>L&D</span>\n              </Button>\n            </Link>\n\n            <select\n              style={{\n                border: \"1px solid black\",\n                color: \"white\",\n                borderRadius: \"0\",\n                width: \"120px\",\n                height: \"35px\",\n                padding: \"0px 5px\",\n                backgroundColor: \"#21ba45\",\n                borderRadius: \"3px\",\n                border: \"none\",\n              }}\n              onChange={(e) => {\n                setPostPartumValue(e.target.value);\n                history.push({\n                  pathname: props.route,\n                  state: {\n                    showANC: false,\n                    postValue: e.target.value,\n                    entrypointValue: \"621\",\n\n                    ...props.info,\n                  },\n                });\n              }}\n            >\n              <option defaultValue={\"\"}>Post Partum</option>\n\n              <option value=\"< 72 hrs\">{\"< 72 hrs\"}</option>\n              <option value=\"> 72 hrs - < 6 month\">\n                {\"> 72 hrs - < 6 month\"}\n              </option>\n              <option value=\"> 6 months - 12 months\">\n                {\"> 6 months - 12 months\"}\n              </option>\n            </select> */}\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className=\" float-end mb-10\"\n            style={{ backgroundColor: \"#014d88\", color: \"white\" }}\n            onClick={props.onHide}\n          >\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default PmtctEntryPoint;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Consultation\\InfantVisit.js",["811","812","813"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\Consultation\\Home.js",["814","815","816","817","818","819","820","821","822","823","824","825","826","827","828"],"import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  Grid,\n  Segment,\n  Label,\n  Icon,\n  List,\n  Button,\n  Card,\n  Feed,\n} from \"semantic-ui-react\";\n// Page titie\nimport { FormGroup, Label as FormLabelName, Input } from \"reactstrap\";\nimport { url as baseUrl, token } from \"../../../api\";\nimport MatButton from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { toast } from \"react-toastify\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst ClinicVisit = (props) => {\n  let patientObj = props.patientObj ? props.patientObj : {};\n  const [errors, setErrors] = useState({});\n  const [disabledField, setDisabledField] = useState(false);\n  let temp = { ...errors };\n  const classes = useStyles();\n  const [saving, setSaving] = useState(false);\n  //const [clinicalStage, setClinicalStage] = useState([]);\n  const [dsdModelType, setDsdModelType] = useState([]);\n  // const [currentVitalSigns, setcurrentVitalSigns] = useState({})\n  // const [showCurrentVitalSigns, setShowCurrentVitalSigns] = useState(false)\n  const [visitStatus, setVisitStatus] = useState([]);\n  const [maternalCome, setMaternalCome] = useState([]);\n  const [fp, setFp] = useState([]);\n  const [entryPoint, setEntryPoint] = useState([]);\n  //Vital signs clinical decision support\n  const entrypointRef = useRef(null);\n  const [objValues, setObjValues] = useState({\n    ancNo: patientObj.ancNo,\n    dateOfViralLoad: \"\",\n    dateOfVisit: \"\",\n    dateOfmeternalOutcome: \"\",\n    dsd: \"\",\n    dsdModel: \"\",\n    dsdOption: \"\",\n    enteryPoint:\n      props.patientObj.entryPoint === \"619\"\n        ? \"POINT_ENTRY_PMTCT_ANC\"\n        : \"POINT_ENTRY_PMTCT\",\n    fpCounseling: \"\",\n    fpMethod: \"\",\n    gaOfViralLoad: \"\",\n    id: \"\",\n    maternalOutcome: \"\",\n    nextAppointmentDate: \"\",\n    personUuid: patientObj.person_uuid\n      ? patientObj.person_uuid\n      : patientObj.personUuid,\n    resultOfViralLoad: \"\",\n    transferTo: \"\",\n    visitStatus: \"\",\n    timeOfViralLoad: \"\",\n  });\n  const [entryValueDisplay, setEntryValueDisplay] = useState({});\n\n  console.log(objValues.enteryPoint);\n  const POINT_ENTRY_PMTCT = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PMTCT_ENTRY_POINT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setEntryPoint(response.data);\n        console.log(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const getPatientEntryType = (id) => {\n    entryPoint.map((each, i) => {\n  \n\n      if (Number(each.id) === Number(props.patientObj.entryPoint)) {\n        setEntryValueDisplay(each);\n      }\n    });\n  };\n\n  useEffect(() => {\n    ///VitalSigns();\n    VISIT_STATUS_PMTCT();\n    MATERNAL_OUTCOME();\n    FAMILY_PLANNING_METHOD();\n    POINT_ENTRY_PMTCT();\n    if (\n      props.activeContent.id &&\n      props.activeContent.id !== \"\" &&\n      props.activeContent.id !== null\n    ) {\n      GetVisit(props.activeContent.id);\n      setDisabledField(\n        props.activeContent.actionType === \"view\" ? true : false\n      );\n    }\n  }, [props.activeContent]);\n\n  useEffect(() => {\n    getPatientEntryType();\n  }, []);\n\n  const GetVisit = (id) => {\n    axios\n      .get(`${baseUrl}pmtct/anc/view-mother-visit/${props.activeContent.id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setObjValues(response.data);\n        DsdModelType(response.data.dsdModel);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const VISIT_STATUS_PMTCT = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/VISIT_STATUS_PMTCT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setVisitStatus(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  // const POINT_ENTRY_PMTCT = () => {\n  //   axios\n  //     .get(`${baseUrl}application-codesets/v2/POINT_ENTRY`, {\n  //       headers: { Authorization: `Bearer ${token}` },\n  //     })\n  //     .then((response) => {\n  //       console.log(response.data);\n  //       setEntryPoint(response.data);\n  //     })\n  //     .catch((error) => {\n  //       //console.log(error);\n  //     });\n  // };\n  const FAMILY_PLANNING_METHOD = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FAMILY_PLANNING_METHOD`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setFp(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const MATERNAL_OUTCOME = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/MATERNAL_OUTCOME`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setMaternalCome(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    if (e.target.name === \"dsdModel\") {\n      DsdModelType(e.target.value);\n    }\n    if (e.target.name === \"dateOfViralLoad\" && e.target.value !== \"\") {\n      async function getGa() {\n        const dateOfViralLoad = e.target.value;\n        //?ancNo=001&visitDate=2023-02-01\n        const response = await axios.get(\n          `${baseUrl}pmtct/anc/calculate-ga-from-person?personUuid=${\n            props.patientObj.person_uuid\n              ? props.patientObj.person_uuid\n              : props.patientObj.personUuid\n          }&visitDate=${dateOfViralLoad}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data > 0) {\n          objValues.gaOfViralLoad = response.data;\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\n        } else {\n          //toast.error(\"Please select a validate date\")\n          setObjValues({ ...objValues, [e.target.name]: e.target.value });\n        }\n      }\n      getGa();\n    }\n    if (e.target.name === \"fpCounseling\" && e.target.value === \"No\") {\n      objValues.fpMethod = \"\";\n      setObjValues({ ...objValues, [\"fpMethod\"]: \"\" });\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    }\n    if (e.target.name === \"dsd\" && e.target.value !== \"Yes\") {\n      objValues.dsdModel = \"\";\n      objValues.dsdOption = \"\";\n      setObjValues({ ...objValues, [\"dsdModel\"]: \"\" });\n      setObjValues({ ...objValues, [\"dsdOption\"]: \"\" });\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    } //objValues.visitStatus==='VISIT_STATUS_PMTCT_TRANSFER_OUT'\n    if (\n      e.target.name === \"visitStatus\" &&\n      e.target.value !== \"VISIT_STATUS_PMTCT_TRANSFER_OUT\"\n    ) {\n      objValues.transferTo = \"\";\n      setObjValues({ ...objValues, [\"transferTo\"]: \"\" });\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n\n  function DsdModelType(dsdmodel) {\n    const dsd =\n      dsdmodel === \"Facility\" ? \"DSD_MODEL_FACILITY\" : \"DSD_MODEL_COMMUNITY\";\n    axios\n      .get(`${baseUrl}application-codesets/v2/${dsd}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setDsdModelType(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n\n  //Validations of the forms\n  const validate = () => {\n    temp.visitStatus = objValues.visitStatus ? \"\" : \"This field is required\";\n    temp.dateOfVisit = objValues.dateOfVisit ? \"\" : \"This field is required\";\n    temp.dsd = objValues.dsd ? \"\" : \"This field is required\";\n    temp.enteryPoint = objValues.enteryPoint ? \"\" : \"This field is required\";\n    temp.fpCounseling = objValues.fpCounseling ? \"\" : \"This field is required\";\n    //temp.fpMethod = objValues.fpMethod ? \"\" : \"This field is required\"\n    temp.dateOfmeternalOutcome = objValues.dateOfmeternalOutcome\n      ? \"\"\n      : \"This field is required\";\n    temp.maternalOutcome = objValues.maternalOutcome\n      ? \"\"\n      : \"This field is required\";\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  /**** Submit Button Processing  */\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      setSaving(true);\n      if (props.activeContent && props.activeContent.actionType === \"update\") {\n        axios\n          .put(\n            `${baseUrl}pmtct/anc/update-mother-visit/${props.activeContent.id}`,\n            objValues,\n            { headers: { Authorization: `Bearer ${token}` } }\n          )\n          .then((response) => {\n            setSaving(false);\n            toast.success(\"Clinic Visit save successful\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            props.setActiveContent({\n              ...props.activeContent,\n              route: \"recent-history\",\n            });\n          })\n          .catch((error) => {\n            setSaving(false);\n            if (error.response && error.response.data) {\n              let errorMessage =\n                error.response.data.apierror &&\n                error.response.data.apierror.message !== \"\"\n                  ? error.response.data.apierror.message\n                  : \"Something went wrong, please try again\";\n              toast.error(errorMessage, {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            } else {\n              toast.error(\"Something went wrong. Please try again...\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            }\n          });\n      } else {\n        axios\n          .post(`${baseUrl}pmtct/anc/pmtct-visit`, objValues, {\n            headers: { Authorization: `Bearer ${token}` },\n          })\n          .then((response) => {\n            setSaving(false);\n            toast.success(\"Clinic Visit save successful\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            props.setActiveContent({\n              ...props.activeContent,\n              route: \"recent-history\",\n            });\n          })\n          .catch((error) => {\n            setSaving(false);\n            if (error.response && error.response.data) {\n              let errorMessage =\n                error.response.data.apierror &&\n                error.response.data.apierror.message !== \"\"\n                  ? error.response.data.apierror.message\n                  : \"Something went wrong, please try again\";\n              toast.error(errorMessage, {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            } else {\n              toast.error(\"Something went wrong. Please try again...\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            }\n          });\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col-md-8 \">\n          <h2>Mother Follow-up Visit</h2>\n        </div>\n      </div>\n      <Grid>\n        <Grid.Column>\n          <Segment>\n            <Label\n              as=\"a\"\n              color=\"blue\"\n              style={{ width: \"106%\", height: \"35px\" }}\n              ribbon\n            >\n              <h4 style={{ color: \"#fff\" }}>VITAL SIGNS</h4>\n            </Label>\n            <br />\n            <br />\n            <div className=\"row\">\n              <div className=\"form-group mb-3 col-md-3\">\n                <FormGroup>\n                  <FormLabelName>\n                    Date of Visit <span style={{ color: \"red\" }}> *</span>\n                  </FormLabelName>\n                  {console.log(\"visiting patient\", props.patientObj)}\n                  <Input\n                    type=\"date\"\n                    name=\"dateOfVisit\"\n                    id=\"dateOfVisit\"\n                    value={objValues.dateOfVisit}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    onChange={handleInputChange}\n                    min={props.patientObj.firstAncDate}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    //min={patientObj.pmtctEnrollmentRespondDto.pmtctEnrollmentDate}\n                    disabled={disabledField}\n                  />\n                  {errors.dateOfVisit !== \"\" ? (\n                    <span className={classes.error}>{errors.dateOfVisit}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              {console.log(patientObj.entryPoint)}\n              <div className=\" mb-3 col-md-3\">\n                <FormGroup>\n                  <FormLabelName>\n                    Point of Entry <span style={{ color: \"red\" }}> *</span>\n                  </FormLabelName>\n                  <Input\n                    type=\"select\"\n                    name=\"enteryPoint\"\n                    id=\"enteryPoint\"\n                    value={props.patientObj.entryPoint}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    disabled={true}\n                  >\n                    {/* <option value=\"select\">Select </option> */}\n\n                    {entryPoint.map((each, i) => {\n                      return (\n                        <option key={i} value={each.id}>\n                          {each.display}\n                        </option>\n                      );\n                    })}\n                  </Input>\n                  {errors.enteryPoint !== \"\" ? (\n                    <span className={classes.error}>{errors.enteryPoint}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\" mb-3 col-md-3\">\n                <FormGroup>\n                  <FormLabelName>\n                    FP Counselling <span style={{ color: \"red\" }}> *</span>\n                  </FormLabelName>\n                  <Input\n                    type=\"select\"\n                    name=\"fpCounseling\"\n                    id=\"fpCounseling\"\n                    value={objValues.fpCounseling}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    disabled={disabledField}\n                  >\n                    <option value=\"\">Select </option>\n                    <option value=\"Yes\">YES </option>\n                    <option value=\"No\">NO </option>\n                  </Input>\n                  {errors.fpCounseling !== \"\" ? (\n                    <span className={classes.error}>{errors.fpCounseling}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {objValues.fpCounseling === \"Yes\" && (\n                <div className=\" mb-3 col-md-3\">\n                  <FormGroup>\n                    <FormLabelName>FP Method </FormLabelName>\n                    <Input\n                      type=\"select\"\n                      name=\"fpMethod\"\n                      id=\"fpMethod\"\n                      value={objValues.fpMethod}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      disabled={disabledField}\n                    >\n                      <option value=\"select\">Select </option>\n                      {fp.map((value) => (\n                        <option key={value.id} value={value.id}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </Input>\n                    {errors.fpMethod !== \"\" ? (\n                      <span className={classes.error}>{errors.fpMethod}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n            </div>\n            <br />\n            <Label\n              as=\"a\"\n              color=\"teal\"\n              style={{ width: \"106%\", height: \"35px\" }}\n              ribbon\n            >\n              <h4 style={{ color: \"#fff\" }}> VIRAL LOAD </h4>\n            </Label>\n            <br />\n            <br />\n            {/* TB Screening Form */}\n            <div className=\"row\">\n              <div className=\" mb-3 col-md-4\">\n                <FormGroup>\n                  <FormLabelName>Viral Load Collection Date </FormLabelName>\n                  <Input\n                    type=\"date\"\n                    name=\"dateOfViralLoad\"\n                    id=\"dateOfViralLoad\"\n                    value={objValues.dateOfViralLoad}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    min={props.patientObj.firstAncDate}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    disabled={disabledField}\n                  />\n                  {errors.dateOfViralLoad !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.dateOfViralLoad}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\" mb-3 col-md-4\">\n                <FormGroup>\n                  <FormLabelName>GA at VL Collection </FormLabelName>\n                  <Input\n                    type=\"number\"\n                    name=\"gaOfViralLoad\"\n                    id=\"gaOfViralLoad\"\n                    value={objValues.gaOfViralLoad}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    min={props.patientObj.firstAncDate}\n                    disabled={disabledField === false ? true : disabledField}\n                  />\n                  {errors.gaOfViralLoad !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.gaOfViralLoad}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\" mb-3 col-md-4\">\n                <FormGroup>\n                  <FormLabelName>Result </FormLabelName>\n                  <Input\n                    type=\"number\"\n                    name=\"resultOfViralLoad\"\n                    id=\"resultOfViralLoad\"\n                    value={objValues.resultOfViralLoad}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    disabled={disabledField}\n                  />\n                  {errors.resultOfViralLoad !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.resultOfViralLoad}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n            </div>\n            <br />\n\n            <br />\n            <Label\n              as=\"a\"\n              color=\"black\"\n              style={{ width: \"106%\", height: \"35px\" }}\n              ribbon\n            >\n              <h4 style={{ color: \"#fff\" }}> DSD MODEL & OUTCOME</h4>\n            </Label>\n            <br />\n            <br />\n            {/*  */}\n            <div className=\"row\">\n              <div className=\" mb-3 col-md-4\">\n                <FormGroup>\n                  <FormLabelName>\n                    DSD <span style={{ color: \"red\" }}> *</span>\n                  </FormLabelName>\n                  <Input\n                    type=\"select\"\n                    name=\"dsd\"\n                    id=\"dsd\"\n                    value={objValues.dsd}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    disabled={disabledField}\n                  >\n                    <option value=\"\">Select </option>\n                    <option value=\"Yes\">YES </option>\n                    <option value=\"No\">NO </option>\n                  </Input>\n                  {errors.dsd !== \"\" ? (\n                    <span className={classes.error}>{errors.dsd}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {objValues.dsd === \"Yes\" && (\n                <>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <FormLabelName>DSD Model</FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"dsdModel\"\n                        id=\"dsdModel\"\n                        value={objValues.dsdModel}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"\">Select </option>\n                        <option value=\"Facility\">Facility </option>\n                        <option value=\"Community\">Community </option>\n                      </Input>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <FormLabelName>DSD Model Type</FormLabelName>\n                      <Input\n                        type=\"select\"\n                        name=\"dsdOption\"\n                        id=\"dsdOption\"\n                        value={objValues.dsdOption}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disabledField}\n                      >\n                        <option value=\"\">Select </option>\n                        {dsdModelType.map((value) => (\n                          <option key={value.code} value={value.code}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </Input>\n                    </FormGroup>\n                  </div>\n                </>\n              )}\n              <div className=\"form-group mb-3 col-md-3\">\n                <FormGroup>\n                  <FormLabelName>\n                    Maternal Outcome <span style={{ color: \"red\" }}> *</span>\n                  </FormLabelName>\n                  <Input\n                    type=\"select\"\n                    name=\"maternalOutcome\"\n                    id=\"maternalOutcome\"\n                    value={objValues.maternalOutcome}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    disabled={disabledField}\n                  >\n                    <option value=\"\">Select </option>\n                    {maternalCome.map((value) => (\n                      <option key={value.code} value={value.code}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </Input>\n                </FormGroup>\n              </div>\n              <div className=\" mb-3 col-md-3\">\n                <FormGroup>\n                  <FormLabelName>\n                    Date of Outcome <span style={{ color: \"red\" }}> *</span>\n                  </FormLabelName>\n                  <Input\n                    type=\"date\"\n                    name=\"dateOfmeternalOutcome\"\n                    id=\"dateOfmeternalOutcome\"\n                    value={objValues.dateOfmeternalOutcome}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    min={props.patientObj.firstAncDate}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    disabled={disabledField}\n                  />\n                  {errors.dateOfmeternalOutcome !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.dateOfmeternalOutcome}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group mb-3 col-md-3\">\n                <FormGroup>\n                  <FormLabelName>\n                    Client Visit Status <span style={{ color: \"red\" }}> *</span>\n                  </FormLabelName>\n                  <Input\n                    type=\"select\"\n                    name=\"visitStatus\"\n                    id=\"visitStatus\"\n                    value={objValues.visitStatus}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    disabled={disabledField}\n                  >\n                    <option value=\"\">Select </option>\n                    {visitStatus.map((value) => (\n                      <option key={value.code} value={value.code}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </Input>\n                  {errors.visitStatus !== \"\" ? (\n                    <span className={classes.error}>{errors.visitStatus}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {objValues.visitStatus === \"VISIT_STATUS_PMTCT_TRANSFER_OUT\" && (\n                <div className=\"form-group mb-3 col-md-3\">\n                  <FormGroup>\n                    <FormLabelName>Name of ART Facility </FormLabelName>\n                    <Input\n                      type=\"text\"\n                      name=\"transferTo\"\n                      id=\"transferTo\"\n                      value={objValues.transferTo}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      disabled={disabledField}\n                    />\n                    {errors.transferTo !== \"\" ? (\n                      <span className={classes.error}>{errors.transferTo}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n            </div>\n            <br />\n            {props.activeContent && props.activeContent.actionType ? (\n              <>\n                <MatButton\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  hidden={disabledField}\n                  className={classes.button}\n                  startIcon={<SaveIcon />}\n                  style={{ backgroundColor: \"#014d88\" }}\n                  onClick={handleSubmit}\n                  disabled={saving}\n                >\n                  {!saving ? (\n                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\n                  ) : (\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      Updating...\n                    </span>\n                  )}\n                </MatButton>\n              </>\n            ) : (\n              <>\n                <MatButton\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.button}\n                  startIcon={<SaveIcon />}\n                  style={{ backgroundColor: \"#014d88\" }}\n                  onClick={handleSubmit}\n                  disabled={saving}\n                >\n                  {!saving ? (\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                  ) : (\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      Saving...\n                    </span>\n                  )}\n                </MatButton>\n              </>\n            )}\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default ClinicVisit;\n","C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\RiskStratification.js",["829","830","831","832","833","834"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Others.js",["835","836","837","838","839","840","841","842","843","844"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\PostTest.js",["845","846","847","848","849"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\RecencyTesting.js",["850","851","852","853","854","855","856","857","858","859","860","861","862","863","864","865"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\HivTestResult.js",["866","867","868","869","870"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\PreTest.js",["871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900","901","902","903","904","905"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\BasicInfo.js",["906","907","908","909","910","911","912","913","914","915","916","917","918","919","920","921","922","923","924"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Elicitation\\Index.js",["925","926","927","928","929"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Elicitation\\IndexContactList.js",["930","931","932","933","934","935","936","937"],"C:\\Users\\ganiyat.yakub\\lamisplus\\modules\\PMTCT-Module-HI_COP_GROUP3\\src\\main\\webapp\\jsx\\components\\PMTCTHTSEnrollment\\Elicitation\\AddIndexContact.js",["938","939","940","941","942","943","944","945","946","947"],{"ruleId":"948","severity":1,"message":"949","line":4,"column":41,"nodeType":"950","messageId":"951","endLine":4,"endColumn":47},{"ruleId":"952","replacedBy":"953"},{"ruleId":"954","replacedBy":"955"},{"ruleId":"956","severity":1,"message":"957","line":24,"column":26,"nodeType":"958","messageId":"959","endLine":24,"endColumn":40,"fix":"960"},{"ruleId":"948","severity":1,"message":"961","line":64,"column":10,"nodeType":"950","messageId":"951","endLine":64,"endColumn":20},{"ruleId":"962","severity":1,"message":"963","line":144,"column":6,"nodeType":"964","endLine":144,"endColumn":8,"suggestions":"965"},{"ruleId":"948","severity":1,"message":"966","line":28,"column":10,"nodeType":"950","messageId":"951","endLine":28,"endColumn":15},{"ruleId":"948","severity":1,"message":"967","line":125,"column":18,"nodeType":"950","messageId":"951","endLine":125,"endColumn":27},{"ruleId":"948","severity":1,"message":"968","line":127,"column":23,"nodeType":"950","messageId":"951","endLine":127,"endColumn":37},{"ruleId":"948","severity":1,"message":"969","line":128,"column":10,"nodeType":"950","messageId":"951","endLine":128,"endColumn":17},{"ruleId":"948","severity":1,"message":"970","line":168,"column":10,"nodeType":"950","messageId":"951","endLine":168,"endColumn":25},{"ruleId":"962","severity":1,"message":"971","line":219,"column":6,"nodeType":"964","endLine":219,"endColumn":59,"suggestions":"972"},{"ruleId":"973","severity":1,"message":"974","line":446,"column":36,"nodeType":"975","messageId":"976","endLine":446,"endColumn":62,"fix":"977"},{"ruleId":"973","severity":1,"message":"978","line":447,"column":36,"nodeType":"975","messageId":"976","endLine":447,"endColumn":69,"fix":"979"},{"ruleId":"973","severity":1,"message":"980","line":448,"column":36,"nodeType":"975","messageId":"976","endLine":448,"endColumn":59,"fix":"981"},{"ruleId":"973","severity":1,"message":"980","line":459,"column":36,"nodeType":"975","messageId":"976","endLine":459,"endColumn":59,"fix":"982"},{"ruleId":"973","severity":1,"message":"978","line":460,"column":36,"nodeType":"975","messageId":"976","endLine":460,"endColumn":69,"fix":"983"},{"ruleId":"948","severity":1,"message":"967","line":102,"column":18,"nodeType":"950","messageId":"951","endLine":102,"endColumn":27},{"ruleId":"948","severity":1,"message":"968","line":104,"column":23,"nodeType":"950","messageId":"951","endLine":104,"endColumn":37},{"ruleId":"948","severity":1,"message":"969","line":105,"column":10,"nodeType":"950","messageId":"951","endLine":105,"endColumn":17},{"ruleId":"948","severity":1,"message":"970","line":136,"column":10,"nodeType":"950","messageId":"951","endLine":136,"endColumn":25},{"ruleId":"948","severity":1,"message":"984","line":156,"column":9,"nodeType":"950","messageId":"951","endLine":156,"endColumn":30},{"ruleId":"985","severity":1,"message":"986","line":171,"column":36,"nodeType":"987","messageId":"988","endLine":171,"endColumn":38},{"ruleId":"962","severity":1,"message":"989","line":196,"column":6,"nodeType":"964","endLine":196,"endColumn":41,"suggestions":"990"},{"ruleId":"962","severity":1,"message":"991","line":203,"column":6,"nodeType":"964","endLine":203,"endColumn":8,"suggestions":"992"},{"ruleId":"993","severity":1,"message":"994","line":321,"column":47,"nodeType":"995","messageId":"996","endLine":321,"endColumn":49},{"ruleId":"973","severity":1,"message":"974","line":418,"column":36,"nodeType":"975","messageId":"976","endLine":418,"endColumn":62,"fix":"997"},{"ruleId":"973","severity":1,"message":"978","line":419,"column":36,"nodeType":"975","messageId":"976","endLine":419,"endColumn":69,"fix":"998"},{"ruleId":"973","severity":1,"message":"980","line":420,"column":36,"nodeType":"975","messageId":"976","endLine":420,"endColumn":59,"fix":"999"},{"ruleId":"973","severity":1,"message":"980","line":431,"column":36,"nodeType":"975","messageId":"976","endLine":431,"endColumn":59,"fix":"1000"},{"ruleId":"973","severity":1,"message":"978","line":432,"column":36,"nodeType":"975","messageId":"976","endLine":432,"endColumn":69,"fix":"1001"},{"ruleId":"948","severity":1,"message":"1002","line":449,"column":15,"nodeType":"950","messageId":"951","endLine":449,"endColumn":23},{"ruleId":"948","severity":1,"message":"1003","line":4,"column":8,"nodeType":"950","messageId":"951","endLine":4,"endColumn":25},{"ruleId":"948","severity":1,"message":"1004","line":6,"column":10,"nodeType":"950","messageId":"951","endLine":6,"endColumn":14},{"ruleId":"948","severity":1,"message":"1005","line":31,"column":10,"nodeType":"950","messageId":"951","endLine":31,"endColumn":24},{"ruleId":"948","severity":1,"message":"1006","line":160,"column":10,"nodeType":"950","messageId":"951","endLine":160,"endColumn":36},{"ruleId":"948","severity":1,"message":"1007","line":177,"column":10,"nodeType":"950","messageId":"951","endLine":177,"endColumn":22},{"ruleId":"948","severity":1,"message":"1008","line":198,"column":18,"nodeType":"950","messageId":"951","endLine":198,"endColumn":30},{"ruleId":"948","severity":1,"message":"1009","line":210,"column":10,"nodeType":"950","messageId":"951","endLine":210,"endColumn":20},{"ruleId":"948","severity":1,"message":"970","line":212,"column":10,"nodeType":"950","messageId":"951","endLine":212,"endColumn":25},{"ruleId":"962","severity":1,"message":"1010","line":243,"column":6,"nodeType":"964","endLine":243,"endColumn":36,"suggestions":"1011"},{"ruleId":"993","severity":1,"message":"994","line":364,"column":24,"nodeType":"995","messageId":"996","endLine":364,"endColumn":26},{"ruleId":"993","severity":1,"message":"994","line":366,"column":31,"nodeType":"995","messageId":"996","endLine":366,"endColumn":33},{"ruleId":"993","severity":1,"message":"994","line":478,"column":47,"nodeType":"995","messageId":"996","endLine":478,"endColumn":49},{"ruleId":"993","severity":1,"message":"994","line":613,"column":47,"nodeType":"995","messageId":"996","endLine":613,"endColumn":49},{"ruleId":"948","severity":1,"message":"1012","line":625,"column":15,"nodeType":"950","messageId":"951","endLine":625,"endColumn":29},{"ruleId":"985","severity":1,"message":"986","line":628,"column":28,"nodeType":"987","messageId":"988","endLine":628,"endColumn":30},{"ruleId":"993","severity":1,"message":"994","line":685,"column":39,"nodeType":"995","messageId":"996","endLine":685,"endColumn":41},{"ruleId":"993","severity":1,"message":"994","line":805,"column":39,"nodeType":"995","messageId":"996","endLine":805,"endColumn":41},{"ruleId":"973","severity":1,"message":"974","line":1020,"column":36,"nodeType":"975","messageId":"976","endLine":1020,"endColumn":62,"fix":"1013"},{"ruleId":"973","severity":1,"message":"978","line":1021,"column":36,"nodeType":"975","messageId":"976","endLine":1021,"endColumn":69,"fix":"1014"},{"ruleId":"973","severity":1,"message":"980","line":1022,"column":36,"nodeType":"975","messageId":"976","endLine":1022,"endColumn":59,"fix":"1015"},{"ruleId":"973","severity":1,"message":"980","line":1033,"column":36,"nodeType":"975","messageId":"976","endLine":1033,"endColumn":59,"fix":"1016"},{"ruleId":"973","severity":1,"message":"978","line":1034,"column":36,"nodeType":"975","messageId":"976","endLine":1034,"endColumn":69,"fix":"1017"},{"ruleId":"948","severity":1,"message":"1018","line":3,"column":10,"nodeType":"950","messageId":"951","endLine":3,"endColumn":18},{"ruleId":"948","severity":1,"message":"1019","line":14,"column":9,"nodeType":"950","messageId":"951","endLine":14,"endColumn":16},{"ruleId":"948","severity":1,"message":"1020","line":18,"column":22,"nodeType":"950","messageId":"951","endLine":18,"endColumn":35},{"ruleId":"948","severity":1,"message":"1021","line":19,"column":10,"nodeType":"950","messageId":"951","endLine":19,"endColumn":20},{"ruleId":"948","severity":1,"message":"1022","line":22,"column":7,"nodeType":"950","messageId":"951","endLine":22,"endColumn":19},{"ruleId":"948","severity":1,"message":"1023","line":23,"column":7,"nodeType":"950","messageId":"951","endLine":23,"endColumn":30},{"ruleId":"985","severity":1,"message":"1024","line":25,"column":38,"nodeType":"987","messageId":"988","endLine":25,"endColumn":40},{"ruleId":"962","severity":1,"message":"1025","line":33,"column":7,"nodeType":"1026","endLine":33,"endColumn":77},{"ruleId":"985","severity":1,"message":"1024","line":38,"column":38,"nodeType":"987","messageId":"988","endLine":38,"endColumn":40},{"ruleId":"948","severity":1,"message":"1027","line":85,"column":9,"nodeType":"950","messageId":"951","endLine":85,"endColumn":21},{"ruleId":"948","severity":1,"message":"1028","line":61,"column":9,"nodeType":"950","messageId":"951","endLine":61,"endColumn":20},{"ruleId":"948","severity":1,"message":"1020","line":62,"column":22,"nodeType":"950","messageId":"951","endLine":62,"endColumn":35},{"ruleId":"948","severity":1,"message":"1029","line":63,"column":10,"nodeType":"950","messageId":"951","endLine":63,"endColumn":32},{"ruleId":"948","severity":1,"message":"1030","line":63,"column":34,"nodeType":"950","messageId":"951","endLine":63,"endColumn":59},{"ruleId":"948","severity":1,"message":"1031","line":67,"column":10,"nodeType":"950","messageId":"951","endLine":67,"endColumn":17},{"ruleId":"948","severity":1,"message":"1032","line":69,"column":9,"nodeType":"950","messageId":"951","endLine":69,"endColumn":15},{"ruleId":"948","severity":1,"message":"1033","line":71,"column":9,"nodeType":"950","messageId":"951","endLine":71,"endColumn":29},{"ruleId":"948","severity":1,"message":"1034","line":72,"column":10,"nodeType":"950","messageId":"951","endLine":72,"endColumn":19},{"ruleId":"948","severity":1,"message":"1035","line":74,"column":9,"nodeType":"950","messageId":"951","endLine":74,"endColumn":18},{"ruleId":"962","severity":1,"message":"1036","line":79,"column":6,"nodeType":"964","endLine":79,"endColumn":24,"suggestions":"1037"},{"ruleId":"956","severity":1,"message":"957","line":5,"column":10,"nodeType":"958","messageId":"959","endLine":5,"endColumn":24,"fix":"1038"},{"ruleId":"993","severity":1,"message":"994","line":89,"column":25,"nodeType":"995","messageId":"996","endLine":89,"endColumn":27},{"ruleId":"956","severity":1,"message":"957","line":4,"column":10,"nodeType":"958","messageId":"959","endLine":4,"endColumn":24,"fix":"1039"},{"ruleId":"956","severity":1,"message":"957","line":4,"column":10,"nodeType":"958","messageId":"959","endLine":4,"endColumn":24,"fix":"1040"},{"ruleId":"948","severity":1,"message":"1041","line":2,"column":10,"nodeType":"950","messageId":"951","endLine":2,"endColumn":18},{"ruleId":"948","severity":1,"message":"1042","line":10,"column":3,"nodeType":"950","messageId":"951","endLine":10,"endColumn":17},{"ruleId":"948","severity":1,"message":"1043","line":12,"column":19,"nodeType":"950","messageId":"951","endLine":12,"endColumn":32},{"ruleId":"948","severity":1,"message":"1044","line":16,"column":8,"nodeType":"950","messageId":"951","endLine":16,"endColumn":18},{"ruleId":"948","severity":1,"message":"1045","line":23,"column":10,"nodeType":"950","messageId":"951","endLine":23,"endColumn":17},{"ruleId":"948","severity":1,"message":"1046","line":94,"column":7,"nodeType":"950","messageId":"951","endLine":94,"endColumn":14},{"ruleId":"948","severity":1,"message":"1047","line":102,"column":10,"nodeType":"950","messageId":"951","endLine":102,"endColumn":20},{"ruleId":"948","severity":1,"message":"1048","line":103,"column":10,"nodeType":"950","messageId":"951","endLine":103,"endColumn":25},{"ruleId":"948","severity":1,"message":"1049","line":103,"column":27,"nodeType":"950","messageId":"951","endLine":103,"endColumn":45},{"ruleId":"985","severity":1,"message":"986","line":154,"column":38,"nodeType":"987","messageId":"988","endLine":154,"endColumn":40},{"ruleId":"985","severity":1,"message":"986","line":160,"column":41,"nodeType":"987","messageId":"988","endLine":160,"endColumn":43},{"ruleId":"962","severity":1,"message":"1050","line":221,"column":6,"nodeType":"964","endLine":221,"endColumn":8,"suggestions":"1051"},{"ruleId":"962","severity":1,"message":"1052","line":227,"column":6,"nodeType":"964","endLine":227,"endColumn":24,"suggestions":"1053"},{"ruleId":"962","severity":1,"message":"1054","line":234,"column":6,"nodeType":"964","endLine":234,"endColumn":14,"suggestions":"1055"},{"ruleId":"993","severity":1,"message":"994","line":343,"column":47,"nodeType":"995","messageId":"996","endLine":343,"endColumn":49},{"ruleId":"1056","severity":1,"message":"1057","line":388,"column":11,"nodeType":"1058","messageId":"996","endLine":388,"endColumn":21},{"ruleId":"948","severity":1,"message":"1044","line":13,"column":8,"nodeType":"950","messageId":"951","endLine":13,"endColumn":18},{"ruleId":"948","severity":1,"message":"1059","line":18,"column":10,"nodeType":"950","messageId":"951","endLine":18,"endColumn":20},{"ruleId":"962","severity":1,"message":"1060","line":150,"column":6,"nodeType":"964","endLine":150,"endColumn":48,"suggestions":"1061"},{"ruleId":"993","severity":1,"message":"994","line":341,"column":47,"nodeType":"995","messageId":"996","endLine":341,"endColumn":49},{"ruleId":"948","severity":1,"message":"1062","line":1,"column":27,"nodeType":"950","messageId":"951","endLine":1,"endColumn":36},{"ruleId":"948","severity":1,"message":"1046","line":91,"column":7,"nodeType":"950","messageId":"951","endLine":91,"endColumn":14},{"ruleId":"948","severity":1,"message":"1063","line":116,"column":9,"nodeType":"950","messageId":"951","endLine":116,"endColumn":17},{"ruleId":"993","severity":1,"message":"994","line":123,"column":47,"nodeType":"995","messageId":"996","endLine":123,"endColumn":49},{"ruleId":"956","severity":1,"message":"957","line":6,"column":26,"nodeType":"958","messageId":"959","endLine":6,"endColumn":40,"fix":"1064"},{"ruleId":"962","severity":1,"message":"1065","line":66,"column":6,"nodeType":"964","endLine":66,"endColumn":58,"suggestions":"1066"},{"ruleId":"956","severity":1,"message":"957","line":4,"column":27,"nodeType":"958","messageId":"959","endLine":4,"endColumn":41,"fix":"1067"},{"ruleId":"962","severity":1,"message":"1068","line":61,"column":10,"nodeType":"964","endLine":61,"endColumn":31,"suggestions":"1069"},{"ruleId":"962","severity":1,"message":"1070","line":47,"column":6,"nodeType":"964","endLine":47,"endColumn":27,"suggestions":"1071"},{"ruleId":"993","severity":1,"message":"994","line":450,"column":47,"nodeType":"995","messageId":"996","endLine":450,"endColumn":49},{"ruleId":"993","severity":1,"message":"994","line":663,"column":51,"nodeType":"995","messageId":"996","endLine":663,"endColumn":53},{"ruleId":"956","severity":1,"message":"957","line":5,"column":10,"nodeType":"958","messageId":"959","endLine":5,"endColumn":24,"fix":"1072"},{"ruleId":"962","severity":1,"message":"1068","line":70,"column":6,"nodeType":"964","endLine":70,"endColumn":27,"suggestions":"1073"},{"ruleId":"956","severity":1,"message":"957","line":4,"column":26,"nodeType":"958","messageId":"959","endLine":4,"endColumn":40,"fix":"1074"},{"ruleId":"962","severity":1,"message":"1075","line":73,"column":6,"nodeType":"964","endLine":73,"endColumn":8,"suggestions":"1076"},{"ruleId":"948","severity":1,"message":"1077","line":89,"column":9,"nodeType":"950","messageId":"951","endLine":89,"endColumn":19},{"ruleId":"962","severity":1,"message":"1078","line":125,"column":6,"nodeType":"964","endLine":125,"endColumn":48,"suggestions":"1079"},{"ruleId":"973","severity":1,"message":"1080","line":158,"column":32,"nodeType":"975","messageId":"976","endLine":158,"endColumn":56,"fix":"1081"},{"ruleId":"993","severity":1,"message":"994","line":178,"column":47,"nodeType":"995","messageId":"996","endLine":178,"endColumn":49},{"ruleId":"948","severity":1,"message":"1059","line":18,"column":10,"nodeType":"950","messageId":"951","endLine":18,"endColumn":20},{"ruleId":"948","severity":1,"message":"1082","line":22,"column":10,"nodeType":"950","messageId":"951","endLine":22,"endColumn":20},{"ruleId":"948","severity":1,"message":"1083","line":98,"column":29,"nodeType":"950","messageId":"951","endLine":98,"endColumn":49},{"ruleId":"962","severity":1,"message":"1084","line":134,"column":6,"nodeType":"964","endLine":134,"endColumn":51,"suggestions":"1085"},{"ruleId":"993","severity":1,"message":"994","line":192,"column":47,"nodeType":"995","messageId":"996","endLine":192,"endColumn":49},{"ruleId":"948","severity":1,"message":"1086","line":1,"column":16,"nodeType":"950","messageId":"951","endLine":1,"endColumn":27},{"ruleId":"948","severity":1,"message":"1087","line":2,"column":10,"nodeType":"950","messageId":"951","endLine":2,"endColumn":16},{"ruleId":"948","severity":1,"message":"1088","line":5,"column":25,"nodeType":"950","messageId":"951","endLine":5,"endColumn":30},{"ruleId":"948","severity":1,"message":"1004","line":8,"column":9,"nodeType":"950","messageId":"951","endLine":8,"endColumn":13},{"ruleId":"948","severity":1,"message":"1089","line":11,"column":22,"nodeType":"950","messageId":"951","endLine":11,"endColumn":28},{"ruleId":"948","severity":1,"message":"1019","line":37,"column":11,"nodeType":"950","messageId":"951","endLine":37,"endColumn":18},{"ruleId":"948","severity":1,"message":"1046","line":38,"column":11,"nodeType":"950","messageId":"951","endLine":38,"endColumn":18},{"ruleId":"948","severity":1,"message":"1090","line":40,"column":11,"nodeType":"950","messageId":"951","endLine":40,"endColumn":24},{"ruleId":"948","severity":1,"message":"1091","line":41,"column":12,"nodeType":"950","messageId":"951","endLine":41,"endColumn":18},{"ruleId":"948","severity":1,"message":"967","line":41,"column":20,"nodeType":"950","messageId":"951","endLine":41,"endColumn":29},{"ruleId":"948","severity":1,"message":"1092","line":44,"column":12,"nodeType":"950","messageId":"951","endLine":44,"endColumn":25},{"ruleId":"948","severity":1,"message":"1093","line":7,"column":27,"nodeType":"950","messageId":"951","endLine":7,"endColumn":35},{"ruleId":"948","severity":1,"message":"1094","line":9,"column":10,"nodeType":"950","messageId":"951","endLine":9,"endColumn":13},{"ruleId":"948","severity":1,"message":"1095","line":10,"column":10,"nodeType":"950","messageId":"951","endLine":10,"endColumn":25},{"ruleId":"962","severity":1,"message":"1096","line":33,"column":6,"nodeType":"964","endLine":33,"endColumn":8,"suggestions":"1097"},{"ruleId":"985","severity":1,"message":"1098","line":59,"column":39,"nodeType":"987","messageId":"1099","endLine":59,"endColumn":41},{"ruleId":"1056","severity":1,"message":"1100","line":84,"column":25,"nodeType":"1058","messageId":"996","endLine":84,"endColumn":37},{"ruleId":"1056","severity":1,"message":"1101","line":85,"column":25,"nodeType":"1058","messageId":"996","endLine":85,"endColumn":31},{"ruleId":"1056","severity":1,"message":"1100","line":120,"column":25,"nodeType":"1058","messageId":"996","endLine":120,"endColumn":37},{"ruleId":"1056","severity":1,"message":"1101","line":121,"column":25,"nodeType":"1058","messageId":"996","endLine":121,"endColumn":31},{"ruleId":"1056","severity":1,"message":"1100","line":141,"column":23,"nodeType":"1058","messageId":"996","endLine":141,"endColumn":35},{"ruleId":"1056","severity":1,"message":"1101","line":142,"column":23,"nodeType":"1058","messageId":"996","endLine":142,"endColumn":29},{"ruleId":"948","severity":1,"message":"1102","line":4,"column":8,"nodeType":"950","messageId":"951","endLine":4,"endColumn":17},{"ruleId":"948","severity":1,"message":"1103","line":5,"column":38,"nodeType":"950","messageId":"951","endLine":5,"endColumn":45},{"ruleId":"948","severity":1,"message":"1104","line":5,"column":52,"nodeType":"950","messageId":"951","endLine":5,"endColumn":56},{"ruleId":"948","severity":1,"message":"1105","line":8,"column":15,"nodeType":"950","messageId":"951","endLine":8,"endColumn":26},{"ruleId":"948","severity":1,"message":"1106","line":9,"column":8,"nodeType":"950","messageId":"951","endLine":9,"endColumn":16},{"ruleId":"948","severity":1,"message":"1107","line":12,"column":9,"nodeType":"950","messageId":"951","endLine":12,"endColumn":23},{"ruleId":"948","severity":1,"message":"1004","line":15,"column":9,"nodeType":"950","messageId":"951","endLine":15,"endColumn":13},{"ruleId":"948","severity":1,"message":"1108","line":15,"column":27,"nodeType":"950","messageId":"951","endLine":15,"endColumn":38},{"ruleId":"948","severity":1,"message":"1109","line":23,"column":8,"nodeType":"950","messageId":"951","endLine":23,"endColumn":18},{"ruleId":"948","severity":1,"message":"966","line":25,"column":11,"nodeType":"950","messageId":"951","endLine":25,"endColumn":16},{"ruleId":"948","severity":1,"message":"1046","line":103,"column":11,"nodeType":"950","messageId":"951","endLine":103,"endColumn":18},{"ruleId":"948","severity":1,"message":"1091","line":105,"column":12,"nodeType":"950","messageId":"951","endLine":105,"endColumn":18},{"ruleId":"948","severity":1,"message":"1110","line":106,"column":12,"nodeType":"950","messageId":"951","endLine":106,"endColumn":24},{"ruleId":"948","severity":1,"message":"1111","line":106,"column":26,"nodeType":"950","messageId":"951","endLine":106,"endColumn":41},{"ruleId":"948","severity":1,"message":"1112","line":110,"column":12,"nodeType":"950","messageId":"951","endLine":110,"endColumn":18},{"ruleId":"948","severity":1,"message":"1113","line":115,"column":12,"nodeType":"950","messageId":"951","endLine":115,"endColumn":27},{"ruleId":"948","severity":1,"message":"1114","line":116,"column":12,"nodeType":"950","messageId":"951","endLine":116,"endColumn":28},{"ruleId":"993","severity":1,"message":"994","line":283,"column":49,"nodeType":"995","messageId":"996","endLine":283,"endColumn":51},{"ruleId":"993","severity":1,"message":"994","line":523,"column":67,"nodeType":"995","messageId":"996","endLine":523,"endColumn":69},{"ruleId":"948","severity":1,"message":"1086","line":1,"column":16,"nodeType":"950","messageId":"951","endLine":1,"endColumn":27},{"ruleId":"948","severity":1,"message":"1115","line":3,"column":46,"nodeType":"950","messageId":"951","endLine":3,"endColumn":51},{"ruleId":"948","severity":1,"message":"1104","line":3,"column":52,"nodeType":"950","messageId":"951","endLine":3,"endColumn":56},{"ruleId":"948","severity":1,"message":"1116","line":95,"column":23,"nodeType":"950","messageId":"951","endLine":95,"endColumn":35},{"ruleId":"962","severity":1,"message":"1117","line":138,"column":8,"nodeType":"964","endLine":138,"endColumn":49,"suggestions":"1118"},{"ruleId":"948","severity":1,"message":"1103","line":4,"column":38,"nodeType":"950","messageId":"951","endLine":4,"endColumn":45},{"ruleId":"948","severity":1,"message":"1104","line":4,"column":52,"nodeType":"950","messageId":"951","endLine":4,"endColumn":56},{"ruleId":"948","severity":1,"message":"1119","line":21,"column":18,"nodeType":"950","messageId":"951","endLine":21,"endColumn":29},{"ruleId":"948","severity":1,"message":"1046","line":97,"column":11,"nodeType":"950","messageId":"951","endLine":97,"endColumn":18},{"ruleId":"948","severity":1,"message":"1091","line":103,"column":12,"nodeType":"950","messageId":"951","endLine":103,"endColumn":18},{"ruleId":"993","severity":1,"message":"994","line":270,"column":49,"nodeType":"995","messageId":"996","endLine":270,"endColumn":51},{"ruleId":"948","severity":1,"message":"1086","line":1,"column":16,"nodeType":"950","messageId":"951","endLine":1,"endColumn":27},{"ruleId":"948","severity":1,"message":"1104","line":3,"column":52,"nodeType":"950","messageId":"951","endLine":3,"endColumn":56},{"ruleId":"948","severity":1,"message":"1105","line":6,"column":15,"nodeType":"950","messageId":"951","endLine":6,"endColumn":26},{"ruleId":"948","severity":1,"message":"1116","line":101,"column":23,"nodeType":"950","messageId":"951","endLine":101,"endColumn":35},{"ruleId":"973","severity":1,"message":"1120","line":144,"column":39,"nodeType":"975","messageId":"976","endLine":144,"endColumn":78,"fix":"1121"},{"ruleId":"973","severity":1,"message":"1120","line":148,"column":39,"nodeType":"975","messageId":"976","endLine":148,"endColumn":75,"fix":"1122"},{"ruleId":"973","severity":1,"message":"1120","line":153,"column":39,"nodeType":"975","messageId":"976","endLine":153,"endColumn":77,"fix":"1123"},{"ruleId":"973","severity":1,"message":"1120","line":157,"column":39,"nodeType":"975","messageId":"976","endLine":157,"endColumn":76,"fix":"1124"},{"ruleId":"973","severity":1,"message":"1120","line":161,"column":39,"nodeType":"975","messageId":"976","endLine":161,"endColumn":76,"fix":"1125"},{"ruleId":"973","severity":1,"message":"1120","line":165,"column":39,"nodeType":"975","messageId":"976","endLine":165,"endColumn":69,"fix":"1126"},{"ruleId":"962","severity":1,"message":"1127","line":167,"column":7,"nodeType":"964","endLine":167,"endColumn":94,"suggestions":"1128"},{"ruleId":"948","severity":1,"message":"1063","line":203,"column":11,"nodeType":"950","messageId":"951","endLine":203,"endColumn":19},{"ruleId":"1129","severity":1,"message":"1130","line":205,"column":13,"nodeType":"1131","messageId":"1132","endLine":205,"endColumn":144},{"ruleId":"1129","severity":1,"message":"1130","line":206,"column":13,"nodeType":"1131","messageId":"1132","endLine":206,"endColumn":148},{"ruleId":"1129","severity":1,"message":"1130","line":207,"column":13,"nodeType":"1131","messageId":"1132","endLine":207,"endColumn":123},{"ruleId":"993","severity":1,"message":"994","line":209,"column":49,"nodeType":"995","messageId":"996","endLine":209,"endColumn":51},{"ruleId":"948","severity":1,"message":"1086","line":1,"column":16,"nodeType":"950","messageId":"951","endLine":1,"endColumn":27},{"ruleId":"948","severity":1,"message":"1062","line":1,"column":29,"nodeType":"950","messageId":"951","endLine":1,"endColumn":38},{"ruleId":"948","severity":1,"message":"1133","line":2,"column":8,"nodeType":"950","messageId":"951","endLine":2,"endColumn":13},{"ruleId":"948","severity":1,"message":"1087","line":4,"column":8,"nodeType":"950","messageId":"951","endLine":4,"endColumn":14},{"ruleId":"948","severity":1,"message":"1104","line":5,"column":52,"nodeType":"950","messageId":"951","endLine":5,"endColumn":56},{"ruleId":"948","severity":1,"message":"1134","line":6,"column":13,"nodeType":"950","messageId":"951","endLine":6,"endColumn":19},{"ruleId":"948","severity":1,"message":"1105","line":8,"column":15,"nodeType":"950","messageId":"951","endLine":8,"endColumn":26},{"ruleId":"948","severity":1,"message":"967","line":95,"column":20,"nodeType":"950","messageId":"951","endLine":95,"endColumn":29},{"ruleId":"948","severity":1,"message":"1135","line":96,"column":12,"nodeType":"950","messageId":"951","endLine":96,"endColumn":18},{"ruleId":"948","severity":1,"message":"1136","line":96,"column":20,"nodeType":"950","messageId":"951","endLine":96,"endColumn":29},{"ruleId":"948","severity":1,"message":"1086","line":1,"column":16,"nodeType":"950","messageId":"951","endLine":1,"endColumn":27},{"ruleId":"948","severity":1,"message":"1115","line":3,"column":46,"nodeType":"950","messageId":"951","endLine":3,"endColumn":51},{"ruleId":"948","severity":1,"message":"1104","line":3,"column":52,"nodeType":"950","messageId":"951","endLine":3,"endColumn":56},{"ruleId":"948","severity":1,"message":"1105","line":5,"column":15,"nodeType":"950","messageId":"951","endLine":5,"endColumn":26},{"ruleId":"948","severity":1,"message":"1119","line":15,"column":18,"nodeType":"950","messageId":"951","endLine":15,"endColumn":29},{"ruleId":"948","severity":1,"message":"1116","line":107,"column":23,"nodeType":"950","messageId":"951","endLine":107,"endColumn":35},{"ruleId":"962","severity":1,"message":"1137","line":184,"column":8,"nodeType":"964","endLine":184,"endColumn":26,"suggestions":"1138"},{"ruleId":"948","severity":1,"message":"1063","line":248,"column":12,"nodeType":"950","messageId":"951","endLine":248,"endColumn":20},{"ruleId":"1129","severity":1,"message":"1130","line":251,"column":12,"nodeType":"1131","messageId":"1132","endLine":251,"endColumn":194},{"ruleId":"1129","severity":1,"message":"1130","line":265,"column":13,"nodeType":"1131","messageId":"1132","endLine":265,"endColumn":177},{"ruleId":"1129","severity":1,"message":"1130","line":266,"column":13,"nodeType":"1131","messageId":"1132","endLine":266,"endColumn":182},{"ruleId":"1129","severity":1,"message":"1130","line":267,"column":13,"nodeType":"1131","messageId":"1132","endLine":267,"endColumn":194},{"ruleId":"1129","severity":1,"message":"1130","line":268,"column":13,"nodeType":"1131","messageId":"1132","endLine":268,"endColumn":198},{"ruleId":"1129","severity":1,"message":"1130","line":269,"column":13,"nodeType":"1131","messageId":"1132","endLine":269,"endColumn":202},{"ruleId":"1129","severity":1,"message":"1130","line":271,"column":13,"nodeType":"1131","messageId":"1132","endLine":271,"endColumn":161},{"ruleId":"1129","severity":1,"message":"1130","line":272,"column":13,"nodeType":"1131","messageId":"1132","endLine":272,"endColumn":167},{"ruleId":"1129","severity":1,"message":"1130","line":273,"column":13,"nodeType":"1131","messageId":"1132","endLine":273,"endColumn":189},{"ruleId":"1129","severity":1,"message":"1130","line":274,"column":13,"nodeType":"1131","messageId":"1132","endLine":274,"endColumn":205},{"ruleId":"1129","severity":1,"message":"1130","line":275,"column":13,"nodeType":"1131","messageId":"1132","endLine":275,"endColumn":155},{"ruleId":"1129","severity":1,"message":"1130","line":277,"column":13,"nodeType":"1131","messageId":"1132","endLine":277,"endColumn":147},{"ruleId":"1129","severity":1,"message":"1130","line":278,"column":13,"nodeType":"1131","messageId":"1132","endLine":278,"endColumn":147},{"ruleId":"1129","severity":1,"message":"1130","line":279,"column":13,"nodeType":"1131","messageId":"1132","endLine":279,"endColumn":189},{"ruleId":"1129","severity":1,"message":"1130","line":280,"column":13,"nodeType":"1131","messageId":"1132","endLine":280,"endColumn":185},{"ruleId":"1129","severity":1,"message":"1130","line":283,"column":13,"nodeType":"1131","messageId":"1132","endLine":283,"endColumn":141},{"ruleId":"1129","severity":1,"message":"1130","line":285,"column":13,"nodeType":"1131","messageId":"1132","endLine":285,"endColumn":153},{"ruleId":"1129","severity":1,"message":"1130","line":286,"column":13,"nodeType":"1131","messageId":"1132","endLine":286,"endColumn":131},{"ruleId":"1129","severity":1,"message":"1130","line":287,"column":13,"nodeType":"1131","messageId":"1132","endLine":287,"endColumn":145},{"ruleId":"1129","severity":1,"message":"1130","line":288,"column":13,"nodeType":"1131","messageId":"1132","endLine":288,"endColumn":175},{"ruleId":"1129","severity":1,"message":"1130","line":289,"column":13,"nodeType":"1131","messageId":"1132","endLine":289,"endColumn":149},{"ruleId":"1129","severity":1,"message":"1130","line":292,"column":13,"nodeType":"1131","messageId":"1132","endLine":292,"endColumn":186},{"ruleId":"1129","severity":1,"message":"1130","line":293,"column":13,"nodeType":"1131","messageId":"1132","endLine":293,"endColumn":166},{"ruleId":"1129","severity":1,"message":"1130","line":294,"column":13,"nodeType":"1131","messageId":"1132","endLine":294,"endColumn":167},{"ruleId":"1129","severity":1,"message":"1130","line":295,"column":13,"nodeType":"1131","messageId":"1132","endLine":295,"endColumn":194},{"ruleId":"1129","severity":1,"message":"1130","line":296,"column":13,"nodeType":"1131","messageId":"1132","endLine":296,"endColumn":160},{"ruleId":"993","severity":1,"message":"994","line":299,"column":49,"nodeType":"995","messageId":"996","endLine":299,"endColumn":51},{"ruleId":"948","severity":1,"message":"1086","line":1,"column":16,"nodeType":"950","messageId":"951","endLine":1,"endColumn":27},{"ruleId":"948","severity":1,"message":"1104","line":3,"column":52,"nodeType":"950","messageId":"951","endLine":3,"endColumn":56},{"ruleId":"948","severity":1,"message":"1105","line":6,"column":15,"nodeType":"950","messageId":"951","endLine":6,"endColumn":26},{"ruleId":"948","severity":1,"message":"1139","line":133,"column":11,"nodeType":"950","messageId":"951","endLine":133,"endColumn":28},{"ruleId":"993","severity":1,"message":"994","line":342,"column":49,"nodeType":"995","messageId":"996","endLine":342,"endColumn":51},{"ruleId":"948","severity":1,"message":"1140","line":3,"column":20,"nodeType":"950","messageId":"951","endLine":3,"endColumn":24},{"ruleId":"948","severity":1,"message":"1141","line":6,"column":10,"nodeType":"950","messageId":"951","endLine":6,"endColumn":20},{"ruleId":"948","severity":1,"message":"1004","line":7,"column":10,"nodeType":"950","messageId":"951","endLine":7,"endColumn":14},{"ruleId":"948","severity":1,"message":"1119","line":9,"column":18,"nodeType":"950","messageId":"951","endLine":9,"endColumn":29},{"ruleId":"948","severity":1,"message":"1142","line":19,"column":11,"nodeType":"950","messageId":"951","endLine":19,"endColumn":26},{"ruleId":"948","severity":1,"message":"1141","line":27,"column":10,"nodeType":"950","messageId":"951","endLine":27,"endColumn":20},{"ruleId":"948","severity":1,"message":"1018","line":29,"column":10,"nodeType":"950","messageId":"951","endLine":29,"endColumn":18},{"ruleId":"948","severity":1,"message":"1143","line":29,"column":27,"nodeType":"950","messageId":"951","endLine":29,"endColumn":31},{"ruleId":"948","severity":1,"message":"1144","line":29,"column":33,"nodeType":"950","messageId":"951","endLine":29,"endColumn":37},{"ruleId":"948","severity":1,"message":"1145","line":52,"column":7,"nodeType":"950","messageId":"951","endLine":52,"endColumn":16},{"ruleId":"948","severity":1,"message":"1146","line":101,"column":11,"nodeType":"950","messageId":"951","endLine":101,"endColumn":20},{"ruleId":"962","severity":1,"message":"1147","line":106,"column":10,"nodeType":"964","endLine":106,"endColumn":12,"suggestions":"1148"},{"ruleId":"948","severity":1,"message":"1149","line":123,"column":11,"nodeType":"950","messageId":"951","endLine":123,"endColumn":27},{"ruleId":"948","severity":1,"message":"1086","line":1,"column":16,"nodeType":"950","messageId":"951","endLine":1,"endColumn":27},{"ruleId":"948","severity":1,"message":"1104","line":2,"column":52,"nodeType":"950","messageId":"951","endLine":2,"endColumn":56},{"ruleId":"948","severity":1,"message":"1105","line":5,"column":15,"nodeType":"950","messageId":"951","endLine":5,"endColumn":26},{"ruleId":"948","severity":1,"message":"1136","line":94,"column":20,"nodeType":"950","messageId":"951","endLine":94,"endColumn":29},{"ruleId":"948","severity":1,"message":"1150","line":102,"column":12,"nodeType":"950","messageId":"951","endLine":102,"endColumn":26},{"ruleId":"948","severity":1,"message":"1151","line":102,"column":28,"nodeType":"950","messageId":"951","endLine":102,"endColumn":45},{"ruleId":"948","severity":1,"message":"1142","line":200,"column":11,"nodeType":"950","messageId":"951","endLine":200,"endColumn":26},{"ruleId":"993","severity":1,"message":"994","line":255,"column":28,"nodeType":"995","messageId":"996","endLine":255,"endColumn":30},{"ruleId":"993","severity":1,"message":"994","line":258,"column":35,"nodeType":"995","messageId":"996","endLine":258,"endColumn":37},{"ruleId":"993","severity":1,"message":"994","line":287,"column":74,"nodeType":"995","messageId":"996","endLine":287,"endColumn":76},{"ruleId":"948","severity":1,"message":"1077","line":63,"column":7,"nodeType":"950","messageId":"951","endLine":63,"endColumn":17},{"ruleId":"948","severity":1,"message":"1152","line":76,"column":10,"nodeType":"950","messageId":"951","endLine":76,"endColumn":31},{"ruleId":"962","severity":1,"message":"1153","line":155,"column":6,"nodeType":"964","endLine":155,"endColumn":51,"suggestions":"1154"},{"ruleId":"948","severity":1,"message":"1144","line":6,"column":3,"nodeType":"950","messageId":"951","endLine":6,"endColumn":7},{"ruleId":"948","severity":1,"message":"1155","line":7,"column":3,"nodeType":"950","messageId":"951","endLine":7,"endColumn":7},{"ruleId":"948","severity":1,"message":"1087","line":8,"column":3,"nodeType":"950","messageId":"951","endLine":8,"endColumn":9},{"ruleId":"948","severity":1,"message":"1140","line":9,"column":3,"nodeType":"950","messageId":"951","endLine":9,"endColumn":7},{"ruleId":"948","severity":1,"message":"1156","line":10,"column":3,"nodeType":"950","messageId":"951","endLine":10,"endColumn":7},{"ruleId":"948","severity":1,"message":"1157","line":81,"column":9,"nodeType":"950","messageId":"951","endLine":81,"endColumn":22},{"ruleId":"948","severity":1,"message":"1158","line":108,"column":10,"nodeType":"950","messageId":"951","endLine":108,"endColumn":27},{"ruleId":"985","severity":1,"message":"986","line":125,"column":30,"nodeType":"987","messageId":"988","endLine":125,"endColumn":32},{"ruleId":"962","severity":1,"message":"1159","line":150,"column":6,"nodeType":"964","endLine":150,"endColumn":27,"suggestions":"1160"},{"ruleId":"962","severity":1,"message":"1052","line":154,"column":6,"nodeType":"964","endLine":154,"endColumn":8,"suggestions":"1161"},{"ruleId":"973","severity":1,"message":"1162","line":255,"column":36,"nodeType":"975","messageId":"976","endLine":255,"endColumn":52,"fix":"1163"},{"ruleId":"973","severity":1,"message":"1164","line":261,"column":36,"nodeType":"975","messageId":"976","endLine":261,"endColumn":52,"fix":"1165"},{"ruleId":"973","severity":1,"message":"1166","line":262,"column":36,"nodeType":"975","messageId":"976","endLine":262,"endColumn":53,"fix":"1167"},{"ruleId":"973","severity":1,"message":"1168","line":270,"column":36,"nodeType":"975","messageId":"976","endLine":270,"endColumn":54,"fix":"1169"},{"ruleId":"993","severity":1,"message":"994","line":309,"column":47,"nodeType":"995","messageId":"996","endLine":309,"endColumn":49},{"ruleId":"948","severity":1,"message":"949","line":4,"column":41,"nodeType":"950","messageId":"951","endLine":4,"endColumn":47},{"ruleId":"952","replacedBy":"1170"},{"ruleId":"954","replacedBy":"1171"},{"ruleId":"948","severity":1,"message":"1003","line":4,"column":8,"nodeType":"950","messageId":"951","endLine":4,"endColumn":25},{"ruleId":"948","severity":1,"message":"1004","line":6,"column":10,"nodeType":"950","messageId":"951","endLine":6,"endColumn":14},{"ruleId":"956","severity":1,"message":"957","line":24,"column":26,"nodeType":"958","messageId":"959","endLine":24,"endColumn":40,"fix":"1172"},{"ruleId":"948","severity":1,"message":"961","line":64,"column":10,"nodeType":"950","messageId":"951","endLine":64,"endColumn":20},{"ruleId":"962","severity":1,"message":"963","line":144,"column":6,"nodeType":"964","endLine":144,"endColumn":8,"suggestions":"1173"},{"ruleId":"948","severity":1,"message":"967","line":102,"column":18,"nodeType":"950","messageId":"951","endLine":102,"endColumn":27},{"ruleId":"948","severity":1,"message":"968","line":104,"column":23,"nodeType":"950","messageId":"951","endLine":104,"endColumn":37},{"ruleId":"948","severity":1,"message":"969","line":105,"column":10,"nodeType":"950","messageId":"951","endLine":105,"endColumn":17},{"ruleId":"948","severity":1,"message":"970","line":138,"column":10,"nodeType":"950","messageId":"951","endLine":138,"endColumn":25},{"ruleId":"948","severity":1,"message":"1174","line":153,"column":10,"nodeType":"950","messageId":"951","endLine":153,"endColumn":26},{"ruleId":"948","severity":1,"message":"984","line":158,"column":9,"nodeType":"950","messageId":"951","endLine":158,"endColumn":30},{"ruleId":"985","severity":1,"message":"986","line":173,"column":36,"nodeType":"987","messageId":"988","endLine":173,"endColumn":38},{"ruleId":"962","severity":1,"message":"989","line":198,"column":6,"nodeType":"964","endLine":198,"endColumn":41,"suggestions":"1175"},{"ruleId":"962","severity":1,"message":"991","line":205,"column":6,"nodeType":"964","endLine":205,"endColumn":8,"suggestions":"1176"},{"ruleId":"948","severity":1,"message":"1177","line":207,"column":9,"nodeType":"950","messageId":"951","endLine":207,"endColumn":30},{"ruleId":"993","severity":1,"message":"994","line":337,"column":47,"nodeType":"995","messageId":"996","endLine":337,"endColumn":49},{"ruleId":"973","severity":1,"message":"974","line":434,"column":36,"nodeType":"975","messageId":"976","endLine":434,"endColumn":62,"fix":"1178"},{"ruleId":"973","severity":1,"message":"978","line":435,"column":36,"nodeType":"975","messageId":"976","endLine":435,"endColumn":69,"fix":"1179"},{"ruleId":"973","severity":1,"message":"980","line":436,"column":36,"nodeType":"975","messageId":"976","endLine":436,"endColumn":59,"fix":"1180"},{"ruleId":"973","severity":1,"message":"980","line":447,"column":36,"nodeType":"975","messageId":"976","endLine":447,"endColumn":59,"fix":"1181"},{"ruleId":"973","severity":1,"message":"978","line":448,"column":36,"nodeType":"975","messageId":"976","endLine":448,"endColumn":69,"fix":"1182"},{"ruleId":"948","severity":1,"message":"1002","line":465,"column":15,"nodeType":"950","messageId":"951","endLine":465,"endColumn":23},{"ruleId":"948","severity":1,"message":"966","line":28,"column":10,"nodeType":"950","messageId":"951","endLine":28,"endColumn":15},{"ruleId":"948","severity":1,"message":"967","line":125,"column":18,"nodeType":"950","messageId":"951","endLine":125,"endColumn":27},{"ruleId":"948","severity":1,"message":"968","line":127,"column":23,"nodeType":"950","messageId":"951","endLine":127,"endColumn":37},{"ruleId":"948","severity":1,"message":"969","line":128,"column":10,"nodeType":"950","messageId":"951","endLine":128,"endColumn":17},{"ruleId":"948","severity":1,"message":"970","line":170,"column":10,"nodeType":"950","messageId":"951","endLine":170,"endColumn":25},{"ruleId":"948","severity":1,"message":"1174","line":180,"column":10,"nodeType":"950","messageId":"951","endLine":180,"endColumn":26},{"ruleId":"962","severity":1,"message":"1183","line":221,"column":6,"nodeType":"964","endLine":221,"endColumn":59,"suggestions":"1184"},{"ruleId":"973","severity":1,"message":"974","line":462,"column":36,"nodeType":"975","messageId":"976","endLine":462,"endColumn":62,"fix":"1185"},{"ruleId":"973","severity":1,"message":"978","line":463,"column":36,"nodeType":"975","messageId":"976","endLine":463,"endColumn":69,"fix":"1186"},{"ruleId":"973","severity":1,"message":"980","line":464,"column":36,"nodeType":"975","messageId":"976","endLine":464,"endColumn":59,"fix":"1187"},{"ruleId":"973","severity":1,"message":"980","line":475,"column":36,"nodeType":"975","messageId":"976","endLine":475,"endColumn":59,"fix":"1188"},{"ruleId":"973","severity":1,"message":"978","line":476,"column":36,"nodeType":"975","messageId":"976","endLine":476,"endColumn":69,"fix":"1189"},{"ruleId":"948","severity":1,"message":"1005","line":31,"column":10,"nodeType":"950","messageId":"951","endLine":31,"endColumn":24},{"ruleId":"948","severity":1,"message":"1006","line":160,"column":10,"nodeType":"950","messageId":"951","endLine":160,"endColumn":36},{"ruleId":"948","severity":1,"message":"1007","line":177,"column":10,"nodeType":"950","messageId":"951","endLine":177,"endColumn":22},{"ruleId":"948","severity":1,"message":"1008","line":199,"column":18,"nodeType":"950","messageId":"951","endLine":199,"endColumn":30},{"ruleId":"948","severity":1,"message":"1009","line":211,"column":10,"nodeType":"950","messageId":"951","endLine":211,"endColumn":20},{"ruleId":"948","severity":1,"message":"1190","line":212,"column":10,"nodeType":"950","messageId":"951","endLine":212,"endColumn":24},{"ruleId":"948","severity":1,"message":"970","line":213,"column":10,"nodeType":"950","messageId":"951","endLine":213,"endColumn":25},{"ruleId":"962","severity":1,"message":"1010","line":246,"column":6,"nodeType":"964","endLine":246,"endColumn":36,"suggestions":"1191"},{"ruleId":"993","severity":1,"message":"994","line":382,"column":24,"nodeType":"995","messageId":"996","endLine":382,"endColumn":26},{"ruleId":"993","severity":1,"message":"994","line":384,"column":31,"nodeType":"995","messageId":"996","endLine":384,"endColumn":33},{"ruleId":"993","severity":1,"message":"994","line":496,"column":47,"nodeType":"995","messageId":"996","endLine":496,"endColumn":49},{"ruleId":"993","severity":1,"message":"994","line":631,"column":47,"nodeType":"995","messageId":"996","endLine":631,"endColumn":49},{"ruleId":"948","severity":1,"message":"1012","line":643,"column":15,"nodeType":"950","messageId":"951","endLine":643,"endColumn":29},{"ruleId":"985","severity":1,"message":"986","line":646,"column":28,"nodeType":"987","messageId":"988","endLine":646,"endColumn":30},{"ruleId":"993","severity":1,"message":"994","line":703,"column":39,"nodeType":"995","messageId":"996","endLine":703,"endColumn":41},{"ruleId":"993","severity":1,"message":"994","line":823,"column":39,"nodeType":"995","messageId":"996","endLine":823,"endColumn":41},{"ruleId":"948","severity":1,"message":"1192","line":935,"column":9,"nodeType":"950","messageId":"951","endLine":935,"endColumn":23},{"ruleId":"973","severity":1,"message":"974","line":1038,"column":36,"nodeType":"975","messageId":"976","endLine":1038,"endColumn":62,"fix":"1193"},{"ruleId":"973","severity":1,"message":"978","line":1039,"column":36,"nodeType":"975","messageId":"976","endLine":1039,"endColumn":69,"fix":"1194"},{"ruleId":"973","severity":1,"message":"980","line":1040,"column":36,"nodeType":"975","messageId":"976","endLine":1040,"endColumn":59,"fix":"1195"},{"ruleId":"973","severity":1,"message":"980","line":1051,"column":36,"nodeType":"975","messageId":"976","endLine":1051,"endColumn":59,"fix":"1196"},{"ruleId":"973","severity":1,"message":"978","line":1052,"column":36,"nodeType":"975","messageId":"976","endLine":1052,"endColumn":69,"fix":"1197"},{"ruleId":"956","severity":1,"message":"957","line":4,"column":10,"nodeType":"958","messageId":"959","endLine":4,"endColumn":24,"fix":"1198"},{"ruleId":"956","severity":1,"message":"957","line":4,"column":10,"nodeType":"958","messageId":"959","endLine":4,"endColumn":24,"fix":"1199"},{"ruleId":"948","severity":1,"message":"1028","line":61,"column":9,"nodeType":"950","messageId":"951","endLine":61,"endColumn":20},{"ruleId":"948","severity":1,"message":"1020","line":62,"column":22,"nodeType":"950","messageId":"951","endLine":62,"endColumn":35},{"ruleId":"948","severity":1,"message":"1029","line":63,"column":10,"nodeType":"950","messageId":"951","endLine":63,"endColumn":32},{"ruleId":"948","severity":1,"message":"1030","line":63,"column":34,"nodeType":"950","messageId":"951","endLine":63,"endColumn":59},{"ruleId":"948","severity":1,"message":"1031","line":67,"column":10,"nodeType":"950","messageId":"951","endLine":67,"endColumn":17},{"ruleId":"948","severity":1,"message":"1032","line":69,"column":9,"nodeType":"950","messageId":"951","endLine":69,"endColumn":15},{"ruleId":"948","severity":1,"message":"1033","line":71,"column":9,"nodeType":"950","messageId":"951","endLine":71,"endColumn":29},{"ruleId":"948","severity":1,"message":"1034","line":72,"column":10,"nodeType":"950","messageId":"951","endLine":72,"endColumn":19},{"ruleId":"948","severity":1,"message":"1035","line":74,"column":9,"nodeType":"950","messageId":"951","endLine":74,"endColumn":18},{"ruleId":"962","severity":1,"message":"1036","line":79,"column":6,"nodeType":"964","endLine":79,"endColumn":24,"suggestions":"1200"},{"ruleId":"948","severity":1,"message":"1018","line":3,"column":10,"nodeType":"950","messageId":"951","endLine":3,"endColumn":18},{"ruleId":"948","severity":1,"message":"1019","line":14,"column":9,"nodeType":"950","messageId":"951","endLine":14,"endColumn":16},{"ruleId":"948","severity":1,"message":"1020","line":18,"column":22,"nodeType":"950","messageId":"951","endLine":18,"endColumn":35},{"ruleId":"948","severity":1,"message":"1021","line":19,"column":10,"nodeType":"950","messageId":"951","endLine":19,"endColumn":20},{"ruleId":"948","severity":1,"message":"1022","line":22,"column":7,"nodeType":"950","messageId":"951","endLine":22,"endColumn":19},{"ruleId":"948","severity":1,"message":"1023","line":23,"column":7,"nodeType":"950","messageId":"951","endLine":23,"endColumn":30},{"ruleId":"985","severity":1,"message":"1024","line":25,"column":38,"nodeType":"987","messageId":"988","endLine":25,"endColumn":40},{"ruleId":"962","severity":1,"message":"1025","line":33,"column":7,"nodeType":"1026","endLine":33,"endColumn":77},{"ruleId":"985","severity":1,"message":"1024","line":38,"column":38,"nodeType":"987","messageId":"988","endLine":38,"endColumn":40},{"ruleId":"948","severity":1,"message":"1027","line":85,"column":9,"nodeType":"950","messageId":"951","endLine":85,"endColumn":21},{"ruleId":"956","severity":1,"message":"957","line":5,"column":10,"nodeType":"958","messageId":"959","endLine":5,"endColumn":24,"fix":"1201"},{"ruleId":"993","severity":1,"message":"994","line":89,"column":25,"nodeType":"995","messageId":"996","endLine":89,"endColumn":27},{"ruleId":"948","severity":1,"message":"1041","line":2,"column":10,"nodeType":"950","messageId":"951","endLine":2,"endColumn":18},{"ruleId":"948","severity":1,"message":"1042","line":10,"column":3,"nodeType":"950","messageId":"951","endLine":10,"endColumn":17},{"ruleId":"948","severity":1,"message":"1044","line":16,"column":8,"nodeType":"950","messageId":"951","endLine":16,"endColumn":18},{"ruleId":"948","severity":1,"message":"1045","line":23,"column":10,"nodeType":"950","messageId":"951","endLine":23,"endColumn":17},{"ruleId":"948","severity":1,"message":"1046","line":94,"column":7,"nodeType":"950","messageId":"951","endLine":94,"endColumn":14},{"ruleId":"948","severity":1,"message":"1047","line":102,"column":10,"nodeType":"950","messageId":"951","endLine":102,"endColumn":20},{"ruleId":"948","severity":1,"message":"1048","line":103,"column":10,"nodeType":"950","messageId":"951","endLine":103,"endColumn":25},{"ruleId":"948","severity":1,"message":"1049","line":103,"column":27,"nodeType":"950","messageId":"951","endLine":103,"endColumn":45},{"ruleId":"948","severity":1,"message":"1202","line":104,"column":10,"nodeType":"950","messageId":"951","endLine":104,"endColumn":23},{"ruleId":"985","severity":1,"message":"986","line":221,"column":38,"nodeType":"987","messageId":"988","endLine":221,"endColumn":40},{"ruleId":"985","severity":1,"message":"986","line":227,"column":41,"nodeType":"987","messageId":"988","endLine":227,"endColumn":43},{"ruleId":"962","severity":1,"message":"1050","line":290,"column":6,"nodeType":"964","endLine":290,"endColumn":8,"suggestions":"1203"},{"ruleId":"962","severity":1,"message":"1052","line":296,"column":6,"nodeType":"964","endLine":296,"endColumn":24,"suggestions":"1204"},{"ruleId":"962","severity":1,"message":"1054","line":303,"column":6,"nodeType":"964","endLine":303,"endColumn":14,"suggestions":"1205"},{"ruleId":"993","severity":1,"message":"994","line":418,"column":47,"nodeType":"995","messageId":"996","endLine":418,"endColumn":49},{"ruleId":"1056","severity":1,"message":"1057","line":466,"column":11,"nodeType":"1058","messageId":"996","endLine":466,"endColumn":21},{"ruleId":"948","severity":1,"message":"1044","line":13,"column":8,"nodeType":"950","messageId":"951","endLine":13,"endColumn":18},{"ruleId":"948","severity":1,"message":"1059","line":18,"column":10,"nodeType":"950","messageId":"951","endLine":18,"endColumn":20},{"ruleId":"962","severity":1,"message":"1060","line":153,"column":6,"nodeType":"964","endLine":153,"endColumn":48,"suggestions":"1206"},{"ruleId":"993","severity":1,"message":"994","line":357,"column":47,"nodeType":"995","messageId":"996","endLine":357,"endColumn":49},{"ruleId":"948","severity":1,"message":"1046","line":91,"column":7,"nodeType":"950","messageId":"951","endLine":91,"endColumn":14},{"ruleId":"948","severity":1,"message":"1063","line":118,"column":9,"nodeType":"950","messageId":"951","endLine":118,"endColumn":17},{"ruleId":"993","severity":1,"message":"994","line":125,"column":47,"nodeType":"995","messageId":"996","endLine":125,"endColumn":49},{"ruleId":"948","severity":1,"message":"1077","line":89,"column":9,"nodeType":"950","messageId":"951","endLine":89,"endColumn":19},{"ruleId":"962","severity":1,"message":"1078","line":125,"column":6,"nodeType":"964","endLine":125,"endColumn":48,"suggestions":"1207"},{"ruleId":"973","severity":1,"message":"1080","line":158,"column":32,"nodeType":"975","messageId":"976","endLine":158,"endColumn":56,"fix":"1208"},{"ruleId":"993","severity":1,"message":"994","line":178,"column":47,"nodeType":"995","messageId":"996","endLine":178,"endColumn":49},{"ruleId":"948","severity":1,"message":"1059","line":20,"column":10,"nodeType":"950","messageId":"951","endLine":20,"endColumn":20},{"ruleId":"948","severity":1,"message":"1082","line":24,"column":10,"nodeType":"950","messageId":"951","endLine":24,"endColumn":20},{"ruleId":"948","severity":1,"message":"1209","line":25,"column":10,"nodeType":"950","messageId":"951","endLine":25,"endColumn":14},{"ruleId":"948","severity":1,"message":"1210","line":25,"column":16,"nodeType":"950","messageId":"951","endLine":25,"endColumn":23},{"ruleId":"948","severity":1,"message":"1155","line":25,"column":32,"nodeType":"950","messageId":"951","endLine":25,"endColumn":36},{"ruleId":"948","severity":1,"message":"1083","line":101,"column":29,"nodeType":"950","messageId":"951","endLine":101,"endColumn":49},{"ruleId":"948","severity":1,"message":"1211","line":102,"column":32,"nodeType":"950","messageId":"951","endLine":102,"endColumn":55},{"ruleId":"962","severity":1,"message":"1084","line":219,"column":6,"nodeType":"964","endLine":219,"endColumn":51,"suggestions":"1212"},{"ruleId":"993","severity":1,"message":"994","line":289,"column":47,"nodeType":"995","messageId":"996","endLine":289,"endColumn":49},{"ruleId":"948","severity":1,"message":"1086","line":1,"column":16,"nodeType":"950","messageId":"951","endLine":1,"endColumn":27},{"ruleId":"948","severity":1,"message":"1087","line":2,"column":10,"nodeType":"950","messageId":"951","endLine":2,"endColumn":16},{"ruleId":"948","severity":1,"message":"1088","line":5,"column":25,"nodeType":"950","messageId":"951","endLine":5,"endColumn":30},{"ruleId":"948","severity":1,"message":"1004","line":8,"column":9,"nodeType":"950","messageId":"951","endLine":8,"endColumn":13},{"ruleId":"948","severity":1,"message":"1089","line":11,"column":22,"nodeType":"950","messageId":"951","endLine":11,"endColumn":28},{"ruleId":"948","severity":1,"message":"1019","line":37,"column":11,"nodeType":"950","messageId":"951","endLine":37,"endColumn":18},{"ruleId":"948","severity":1,"message":"1046","line":38,"column":11,"nodeType":"950","messageId":"951","endLine":38,"endColumn":18},{"ruleId":"948","severity":1,"message":"1090","line":40,"column":11,"nodeType":"950","messageId":"951","endLine":40,"endColumn":24},{"ruleId":"948","severity":1,"message":"1091","line":41,"column":12,"nodeType":"950","messageId":"951","endLine":41,"endColumn":18},{"ruleId":"948","severity":1,"message":"967","line":41,"column":20,"nodeType":"950","messageId":"951","endLine":41,"endColumn":29},{"ruleId":"948","severity":1,"message":"1092","line":44,"column":12,"nodeType":"950","messageId":"951","endLine":44,"endColumn":25},{"ruleId":"956","severity":1,"message":"957","line":6,"column":26,"nodeType":"958","messageId":"959","endLine":6,"endColumn":40,"fix":"1213"},{"ruleId":"962","severity":1,"message":"1065","line":66,"column":6,"nodeType":"964","endLine":66,"endColumn":58,"suggestions":"1214"},{"ruleId":"956","severity":1,"message":"957","line":4,"column":26,"nodeType":"958","messageId":"959","endLine":4,"endColumn":40,"fix":"1215"},{"ruleId":"962","severity":1,"message":"1075","line":73,"column":6,"nodeType":"964","endLine":73,"endColumn":8,"suggestions":"1216"},{"ruleId":"956","severity":1,"message":"957","line":4,"column":27,"nodeType":"958","messageId":"959","endLine":4,"endColumn":41,"fix":"1217"},{"ruleId":"962","severity":1,"message":"1068","line":61,"column":10,"nodeType":"964","endLine":61,"endColumn":31,"suggestions":"1218"},{"ruleId":"956","severity":1,"message":"957","line":5,"column":10,"nodeType":"958","messageId":"959","endLine":5,"endColumn":24,"fix":"1219"},{"ruleId":"962","severity":1,"message":"1068","line":70,"column":6,"nodeType":"964","endLine":70,"endColumn":27,"suggestions":"1220"},{"ruleId":"962","severity":1,"message":"1070","line":47,"column":6,"nodeType":"964","endLine":47,"endColumn":27,"suggestions":"1221"},{"ruleId":"993","severity":1,"message":"994","line":450,"column":47,"nodeType":"995","messageId":"996","endLine":450,"endColumn":49},{"ruleId":"993","severity":1,"message":"994","line":663,"column":51,"nodeType":"995","messageId":"996","endLine":663,"endColumn":53},{"ruleId":"948","severity":1,"message":"1093","line":7,"column":27,"nodeType":"950","messageId":"951","endLine":7,"endColumn":35},{"ruleId":"948","severity":1,"message":"1094","line":9,"column":10,"nodeType":"950","messageId":"951","endLine":9,"endColumn":13},{"ruleId":"948","severity":1,"message":"1095","line":10,"column":10,"nodeType":"950","messageId":"951","endLine":10,"endColumn":25},{"ruleId":"962","severity":1,"message":"1096","line":33,"column":6,"nodeType":"964","endLine":33,"endColumn":8,"suggestions":"1222"},{"ruleId":"985","severity":1,"message":"1098","line":59,"column":39,"nodeType":"987","messageId":"1099","endLine":59,"endColumn":41},{"ruleId":"1056","severity":1,"message":"1100","line":84,"column":25,"nodeType":"1058","messageId":"996","endLine":84,"endColumn":37},{"ruleId":"1056","severity":1,"message":"1101","line":85,"column":25,"nodeType":"1058","messageId":"996","endLine":85,"endColumn":31},{"ruleId":"1056","severity":1,"message":"1100","line":120,"column":25,"nodeType":"1058","messageId":"996","endLine":120,"endColumn":37},{"ruleId":"1056","severity":1,"message":"1101","line":121,"column":25,"nodeType":"1058","messageId":"996","endLine":121,"endColumn":31},{"ruleId":"1056","severity":1,"message":"1100","line":141,"column":23,"nodeType":"1058","messageId":"996","endLine":141,"endColumn":35},{"ruleId":"1056","severity":1,"message":"1101","line":142,"column":23,"nodeType":"1058","messageId":"996","endLine":142,"endColumn":29},{"ruleId":"948","severity":1,"message":"1077","line":63,"column":7,"nodeType":"950","messageId":"951","endLine":63,"endColumn":17},{"ruleId":"948","severity":1,"message":"1152","line":76,"column":10,"nodeType":"950","messageId":"951","endLine":76,"endColumn":31},{"ruleId":"962","severity":1,"message":"1153","line":155,"column":6,"nodeType":"964","endLine":155,"endColumn":51,"suggestions":"1223"},{"ruleId":"948","severity":1,"message":"1144","line":6,"column":3,"nodeType":"950","messageId":"951","endLine":6,"endColumn":7},{"ruleId":"948","severity":1,"message":"1155","line":7,"column":3,"nodeType":"950","messageId":"951","endLine":7,"endColumn":7},{"ruleId":"948","severity":1,"message":"1087","line":8,"column":3,"nodeType":"950","messageId":"951","endLine":8,"endColumn":9},{"ruleId":"948","severity":1,"message":"1140","line":9,"column":3,"nodeType":"950","messageId":"951","endLine":9,"endColumn":7},{"ruleId":"948","severity":1,"message":"1156","line":10,"column":3,"nodeType":"950","messageId":"951","endLine":10,"endColumn":7},{"ruleId":"948","severity":1,"message":"1157","line":81,"column":9,"nodeType":"950","messageId":"951","endLine":81,"endColumn":22},{"ruleId":"948","severity":1,"message":"1158","line":108,"column":10,"nodeType":"950","messageId":"951","endLine":108,"endColumn":27},{"ruleId":"985","severity":1,"message":"986","line":125,"column":30,"nodeType":"987","messageId":"988","endLine":125,"endColumn":32},{"ruleId":"962","severity":1,"message":"1159","line":150,"column":6,"nodeType":"964","endLine":150,"endColumn":27,"suggestions":"1224"},{"ruleId":"962","severity":1,"message":"1052","line":154,"column":6,"nodeType":"964","endLine":154,"endColumn":8,"suggestions":"1225"},{"ruleId":"973","severity":1,"message":"1162","line":255,"column":36,"nodeType":"975","messageId":"976","endLine":255,"endColumn":52,"fix":"1226"},{"ruleId":"973","severity":1,"message":"1164","line":261,"column":36,"nodeType":"975","messageId":"976","endLine":261,"endColumn":52,"fix":"1227"},{"ruleId":"973","severity":1,"message":"1166","line":262,"column":36,"nodeType":"975","messageId":"976","endLine":262,"endColumn":53,"fix":"1228"},{"ruleId":"973","severity":1,"message":"1168","line":270,"column":36,"nodeType":"975","messageId":"976","endLine":270,"endColumn":54,"fix":"1229"},{"ruleId":"993","severity":1,"message":"994","line":309,"column":47,"nodeType":"995","messageId":"996","endLine":309,"endColumn":49},{"ruleId":"948","severity":1,"message":"1103","line":4,"column":38,"nodeType":"950","messageId":"951","endLine":4,"endColumn":45},{"ruleId":"948","severity":1,"message":"1104","line":4,"column":52,"nodeType":"950","messageId":"951","endLine":4,"endColumn":56},{"ruleId":"948","severity":1,"message":"1119","line":21,"column":18,"nodeType":"950","messageId":"951","endLine":21,"endColumn":29},{"ruleId":"948","severity":1,"message":"1046","line":97,"column":11,"nodeType":"950","messageId":"951","endLine":97,"endColumn":18},{"ruleId":"948","severity":1,"message":"1091","line":103,"column":12,"nodeType":"950","messageId":"951","endLine":103,"endColumn":18},{"ruleId":"993","severity":1,"message":"994","line":270,"column":49,"nodeType":"995","messageId":"996","endLine":270,"endColumn":51},{"ruleId":"948","severity":1,"message":"1086","line":1,"column":16,"nodeType":"950","messageId":"951","endLine":1,"endColumn":27},{"ruleId":"948","severity":1,"message":"1062","line":1,"column":29,"nodeType":"950","messageId":"951","endLine":1,"endColumn":38},{"ruleId":"948","severity":1,"message":"1133","line":2,"column":8,"nodeType":"950","messageId":"951","endLine":2,"endColumn":13},{"ruleId":"948","severity":1,"message":"1087","line":4,"column":8,"nodeType":"950","messageId":"951","endLine":4,"endColumn":14},{"ruleId":"948","severity":1,"message":"1104","line":5,"column":52,"nodeType":"950","messageId":"951","endLine":5,"endColumn":56},{"ruleId":"948","severity":1,"message":"1134","line":6,"column":13,"nodeType":"950","messageId":"951","endLine":6,"endColumn":19},{"ruleId":"948","severity":1,"message":"1105","line":8,"column":15,"nodeType":"950","messageId":"951","endLine":8,"endColumn":26},{"ruleId":"948","severity":1,"message":"967","line":95,"column":20,"nodeType":"950","messageId":"951","endLine":95,"endColumn":29},{"ruleId":"948","severity":1,"message":"1135","line":96,"column":12,"nodeType":"950","messageId":"951","endLine":96,"endColumn":18},{"ruleId":"948","severity":1,"message":"1136","line":96,"column":20,"nodeType":"950","messageId":"951","endLine":96,"endColumn":29},{"ruleId":"948","severity":1,"message":"1086","line":1,"column":16,"nodeType":"950","messageId":"951","endLine":1,"endColumn":27},{"ruleId":"948","severity":1,"message":"1115","line":3,"column":46,"nodeType":"950","messageId":"951","endLine":3,"endColumn":51},{"ruleId":"948","severity":1,"message":"1104","line":3,"column":52,"nodeType":"950","messageId":"951","endLine":3,"endColumn":56},{"ruleId":"948","severity":1,"message":"1116","line":95,"column":23,"nodeType":"950","messageId":"951","endLine":95,"endColumn":35},{"ruleId":"962","severity":1,"message":"1117","line":138,"column":8,"nodeType":"964","endLine":138,"endColumn":49,"suggestions":"1230"},{"ruleId":"948","severity":1,"message":"1086","line":1,"column":16,"nodeType":"950","messageId":"951","endLine":1,"endColumn":27},{"ruleId":"948","severity":1,"message":"1104","line":3,"column":52,"nodeType":"950","messageId":"951","endLine":3,"endColumn":56},{"ruleId":"948","severity":1,"message":"1105","line":6,"column":15,"nodeType":"950","messageId":"951","endLine":6,"endColumn":26},{"ruleId":"948","severity":1,"message":"1116","line":101,"column":23,"nodeType":"950","messageId":"951","endLine":101,"endColumn":35},{"ruleId":"973","severity":1,"message":"1120","line":144,"column":39,"nodeType":"975","messageId":"976","endLine":144,"endColumn":78,"fix":"1231"},{"ruleId":"973","severity":1,"message":"1120","line":148,"column":39,"nodeType":"975","messageId":"976","endLine":148,"endColumn":75,"fix":"1232"},{"ruleId":"973","severity":1,"message":"1120","line":153,"column":39,"nodeType":"975","messageId":"976","endLine":153,"endColumn":77,"fix":"1233"},{"ruleId":"973","severity":1,"message":"1120","line":157,"column":39,"nodeType":"975","messageId":"976","endLine":157,"endColumn":76,"fix":"1234"},{"ruleId":"973","severity":1,"message":"1120","line":161,"column":39,"nodeType":"975","messageId":"976","endLine":161,"endColumn":76,"fix":"1235"},{"ruleId":"973","severity":1,"message":"1120","line":165,"column":39,"nodeType":"975","messageId":"976","endLine":165,"endColumn":69,"fix":"1236"},{"ruleId":"962","severity":1,"message":"1127","line":167,"column":7,"nodeType":"964","endLine":167,"endColumn":94,"suggestions":"1237"},{"ruleId":"948","severity":1,"message":"1063","line":203,"column":11,"nodeType":"950","messageId":"951","endLine":203,"endColumn":19},{"ruleId":"1129","severity":1,"message":"1130","line":205,"column":13,"nodeType":"1131","messageId":"1132","endLine":205,"endColumn":144},{"ruleId":"1129","severity":1,"message":"1130","line":206,"column":13,"nodeType":"1131","messageId":"1132","endLine":206,"endColumn":148},{"ruleId":"1129","severity":1,"message":"1130","line":207,"column":13,"nodeType":"1131","messageId":"1132","endLine":207,"endColumn":123},{"ruleId":"993","severity":1,"message":"994","line":209,"column":49,"nodeType":"995","messageId":"996","endLine":209,"endColumn":51},{"ruleId":"948","severity":1,"message":"1086","line":1,"column":16,"nodeType":"950","messageId":"951","endLine":1,"endColumn":27},{"ruleId":"948","severity":1,"message":"1104","line":3,"column":52,"nodeType":"950","messageId":"951","endLine":3,"endColumn":56},{"ruleId":"948","severity":1,"message":"1105","line":6,"column":15,"nodeType":"950","messageId":"951","endLine":6,"endColumn":26},{"ruleId":"948","severity":1,"message":"1139","line":133,"column":11,"nodeType":"950","messageId":"951","endLine":133,"endColumn":28},{"ruleId":"993","severity":1,"message":"994","line":342,"column":49,"nodeType":"995","messageId":"996","endLine":342,"endColumn":51},{"ruleId":"948","severity":1,"message":"1086","line":1,"column":16,"nodeType":"950","messageId":"951","endLine":1,"endColumn":27},{"ruleId":"948","severity":1,"message":"1115","line":3,"column":46,"nodeType":"950","messageId":"951","endLine":3,"endColumn":51},{"ruleId":"948","severity":1,"message":"1104","line":3,"column":52,"nodeType":"950","messageId":"951","endLine":3,"endColumn":56},{"ruleId":"948","severity":1,"message":"1105","line":5,"column":15,"nodeType":"950","messageId":"951","endLine":5,"endColumn":26},{"ruleId":"948","severity":1,"message":"1119","line":15,"column":18,"nodeType":"950","messageId":"951","endLine":15,"endColumn":29},{"ruleId":"948","severity":1,"message":"1116","line":107,"column":23,"nodeType":"950","messageId":"951","endLine":107,"endColumn":35},{"ruleId":"962","severity":1,"message":"1137","line":184,"column":8,"nodeType":"964","endLine":184,"endColumn":26,"suggestions":"1238"},{"ruleId":"948","severity":1,"message":"1063","line":248,"column":12,"nodeType":"950","messageId":"951","endLine":248,"endColumn":20},{"ruleId":"1129","severity":1,"message":"1130","line":251,"column":12,"nodeType":"1131","messageId":"1132","endLine":251,"endColumn":194},{"ruleId":"1129","severity":1,"message":"1130","line":265,"column":13,"nodeType":"1131","messageId":"1132","endLine":265,"endColumn":177},{"ruleId":"1129","severity":1,"message":"1130","line":266,"column":13,"nodeType":"1131","messageId":"1132","endLine":266,"endColumn":182},{"ruleId":"1129","severity":1,"message":"1130","line":267,"column":13,"nodeType":"1131","messageId":"1132","endLine":267,"endColumn":194},{"ruleId":"1129","severity":1,"message":"1130","line":268,"column":13,"nodeType":"1131","messageId":"1132","endLine":268,"endColumn":198},{"ruleId":"1129","severity":1,"message":"1130","line":269,"column":13,"nodeType":"1131","messageId":"1132","endLine":269,"endColumn":202},{"ruleId":"1129","severity":1,"message":"1130","line":271,"column":13,"nodeType":"1131","messageId":"1132","endLine":271,"endColumn":161},{"ruleId":"1129","severity":1,"message":"1130","line":272,"column":13,"nodeType":"1131","messageId":"1132","endLine":272,"endColumn":167},{"ruleId":"1129","severity":1,"message":"1130","line":273,"column":13,"nodeType":"1131","messageId":"1132","endLine":273,"endColumn":189},{"ruleId":"1129","severity":1,"message":"1130","line":274,"column":13,"nodeType":"1131","messageId":"1132","endLine":274,"endColumn":205},{"ruleId":"1129","severity":1,"message":"1130","line":275,"column":13,"nodeType":"1131","messageId":"1132","endLine":275,"endColumn":155},{"ruleId":"1129","severity":1,"message":"1130","line":277,"column":13,"nodeType":"1131","messageId":"1132","endLine":277,"endColumn":147},{"ruleId":"1129","severity":1,"message":"1130","line":278,"column":13,"nodeType":"1131","messageId":"1132","endLine":278,"endColumn":147},{"ruleId":"1129","severity":1,"message":"1130","line":279,"column":13,"nodeType":"1131","messageId":"1132","endLine":279,"endColumn":189},{"ruleId":"1129","severity":1,"message":"1130","line":280,"column":13,"nodeType":"1131","messageId":"1132","endLine":280,"endColumn":185},{"ruleId":"1129","severity":1,"message":"1130","line":283,"column":13,"nodeType":"1131","messageId":"1132","endLine":283,"endColumn":141},{"ruleId":"1129","severity":1,"message":"1130","line":285,"column":13,"nodeType":"1131","messageId":"1132","endLine":285,"endColumn":153},{"ruleId":"1129","severity":1,"message":"1130","line":286,"column":13,"nodeType":"1131","messageId":"1132","endLine":286,"endColumn":131},{"ruleId":"1129","severity":1,"message":"1130","line":287,"column":13,"nodeType":"1131","messageId":"1132","endLine":287,"endColumn":145},{"ruleId":"1129","severity":1,"message":"1130","line":288,"column":13,"nodeType":"1131","messageId":"1132","endLine":288,"endColumn":175},{"ruleId":"1129","severity":1,"message":"1130","line":289,"column":13,"nodeType":"1131","messageId":"1132","endLine":289,"endColumn":149},{"ruleId":"1129","severity":1,"message":"1130","line":292,"column":13,"nodeType":"1131","messageId":"1132","endLine":292,"endColumn":186},{"ruleId":"1129","severity":1,"message":"1130","line":293,"column":13,"nodeType":"1131","messageId":"1132","endLine":293,"endColumn":166},{"ruleId":"1129","severity":1,"message":"1130","line":294,"column":13,"nodeType":"1131","messageId":"1132","endLine":294,"endColumn":167},{"ruleId":"1129","severity":1,"message":"1130","line":295,"column":13,"nodeType":"1131","messageId":"1132","endLine":295,"endColumn":194},{"ruleId":"1129","severity":1,"message":"1130","line":296,"column":13,"nodeType":"1131","messageId":"1132","endLine":296,"endColumn":160},{"ruleId":"993","severity":1,"message":"994","line":299,"column":49,"nodeType":"995","messageId":"996","endLine":299,"endColumn":51},{"ruleId":"948","severity":1,"message":"1102","line":4,"column":8,"nodeType":"950","messageId":"951","endLine":4,"endColumn":17},{"ruleId":"948","severity":1,"message":"1103","line":5,"column":38,"nodeType":"950","messageId":"951","endLine":5,"endColumn":45},{"ruleId":"948","severity":1,"message":"1104","line":5,"column":52,"nodeType":"950","messageId":"951","endLine":5,"endColumn":56},{"ruleId":"948","severity":1,"message":"1105","line":8,"column":15,"nodeType":"950","messageId":"951","endLine":8,"endColumn":26},{"ruleId":"948","severity":1,"message":"1106","line":9,"column":8,"nodeType":"950","messageId":"951","endLine":9,"endColumn":16},{"ruleId":"948","severity":1,"message":"1107","line":12,"column":9,"nodeType":"950","messageId":"951","endLine":12,"endColumn":23},{"ruleId":"948","severity":1,"message":"1004","line":15,"column":9,"nodeType":"950","messageId":"951","endLine":15,"endColumn":13},{"ruleId":"948","severity":1,"message":"1108","line":15,"column":27,"nodeType":"950","messageId":"951","endLine":15,"endColumn":38},{"ruleId":"948","severity":1,"message":"1109","line":23,"column":8,"nodeType":"950","messageId":"951","endLine":23,"endColumn":18},{"ruleId":"948","severity":1,"message":"966","line":25,"column":11,"nodeType":"950","messageId":"951","endLine":25,"endColumn":16},{"ruleId":"948","severity":1,"message":"1046","line":103,"column":11,"nodeType":"950","messageId":"951","endLine":103,"endColumn":18},{"ruleId":"948","severity":1,"message":"1091","line":105,"column":12,"nodeType":"950","messageId":"951","endLine":105,"endColumn":18},{"ruleId":"948","severity":1,"message":"1110","line":106,"column":12,"nodeType":"950","messageId":"951","endLine":106,"endColumn":24},{"ruleId":"948","severity":1,"message":"1111","line":106,"column":26,"nodeType":"950","messageId":"951","endLine":106,"endColumn":41},{"ruleId":"948","severity":1,"message":"1112","line":110,"column":12,"nodeType":"950","messageId":"951","endLine":110,"endColumn":18},{"ruleId":"948","severity":1,"message":"1113","line":115,"column":12,"nodeType":"950","messageId":"951","endLine":115,"endColumn":27},{"ruleId":"948","severity":1,"message":"1114","line":116,"column":12,"nodeType":"950","messageId":"951","endLine":116,"endColumn":28},{"ruleId":"993","severity":1,"message":"994","line":283,"column":49,"nodeType":"995","messageId":"996","endLine":283,"endColumn":51},{"ruleId":"993","severity":1,"message":"994","line":523,"column":67,"nodeType":"995","messageId":"996","endLine":523,"endColumn":69},{"ruleId":"948","severity":1,"message":"1140","line":3,"column":20,"nodeType":"950","messageId":"951","endLine":3,"endColumn":24},{"ruleId":"948","severity":1,"message":"1141","line":6,"column":10,"nodeType":"950","messageId":"951","endLine":6,"endColumn":20},{"ruleId":"948","severity":1,"message":"1004","line":7,"column":10,"nodeType":"950","messageId":"951","endLine":7,"endColumn":14},{"ruleId":"948","severity":1,"message":"1119","line":9,"column":18,"nodeType":"950","messageId":"951","endLine":9,"endColumn":29},{"ruleId":"948","severity":1,"message":"1142","line":19,"column":11,"nodeType":"950","messageId":"951","endLine":19,"endColumn":26},{"ruleId":"948","severity":1,"message":"1141","line":27,"column":10,"nodeType":"950","messageId":"951","endLine":27,"endColumn":20},{"ruleId":"948","severity":1,"message":"1018","line":29,"column":10,"nodeType":"950","messageId":"951","endLine":29,"endColumn":18},{"ruleId":"948","severity":1,"message":"1143","line":29,"column":27,"nodeType":"950","messageId":"951","endLine":29,"endColumn":31},{"ruleId":"948","severity":1,"message":"1144","line":29,"column":33,"nodeType":"950","messageId":"951","endLine":29,"endColumn":37},{"ruleId":"948","severity":1,"message":"1145","line":52,"column":7,"nodeType":"950","messageId":"951","endLine":52,"endColumn":16},{"ruleId":"948","severity":1,"message":"1146","line":101,"column":11,"nodeType":"950","messageId":"951","endLine":101,"endColumn":20},{"ruleId":"962","severity":1,"message":"1147","line":106,"column":10,"nodeType":"964","endLine":106,"endColumn":12,"suggestions":"1239"},{"ruleId":"948","severity":1,"message":"1149","line":123,"column":11,"nodeType":"950","messageId":"951","endLine":123,"endColumn":27},{"ruleId":"948","severity":1,"message":"1086","line":1,"column":16,"nodeType":"950","messageId":"951","endLine":1,"endColumn":27},{"ruleId":"948","severity":1,"message":"1104","line":2,"column":52,"nodeType":"950","messageId":"951","endLine":2,"endColumn":56},{"ruleId":"948","severity":1,"message":"1105","line":5,"column":15,"nodeType":"950","messageId":"951","endLine":5,"endColumn":26},{"ruleId":"948","severity":1,"message":"1136","line":94,"column":20,"nodeType":"950","messageId":"951","endLine":94,"endColumn":29},{"ruleId":"948","severity":1,"message":"1150","line":102,"column":12,"nodeType":"950","messageId":"951","endLine":102,"endColumn":26},{"ruleId":"948","severity":1,"message":"1151","line":102,"column":28,"nodeType":"950","messageId":"951","endLine":102,"endColumn":45},{"ruleId":"948","severity":1,"message":"1142","line":200,"column":11,"nodeType":"950","messageId":"951","endLine":200,"endColumn":26},{"ruleId":"993","severity":1,"message":"994","line":255,"column":28,"nodeType":"995","messageId":"996","endLine":255,"endColumn":30},{"ruleId":"993","severity":1,"message":"994","line":258,"column":35,"nodeType":"995","messageId":"996","endLine":258,"endColumn":37},{"ruleId":"993","severity":1,"message":"994","line":287,"column":74,"nodeType":"995","messageId":"996","endLine":287,"endColumn":76},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["1240"],"no-negated-in-lhs",["1241"],"no-useless-rename","Import token unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"1242","text":"1243"},"'PersonInfo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'RecentActivities' and 'patientObj?.id'. Either include them or remove the dependency array.","ArrayExpression",["1244"],"'Modal' is defined but never used.","'setSaving' is assigned a value but never used.","'setAgeDisabled' is assigned a value but never used.","'genders' is assigned a value but never used.","'pregnancyStatus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'basicInfo', 'getSex', 'loadGenders', 'locationState', and 'objValues'. Either include them or remove the dependency array. You can also do a functional update 'setObjValues(o => ...)' if you only need 'objValues' in the 'setObjValues' call.",["1245"],"no-useless-computed-key","Unnecessarily computed property [\"testResultSyphilis\"] found.","Property","unnecessarilyComputedProperty",{"range":"1246","text":"1247"},"Unnecessarily computed property [\"referredSyphilisTreatment\"] found.",{"range":"1248","text":"1249"},"Unnecessarily computed property [\"treatedSyphilis\"] found.",{"range":"1250","text":"1251"},{"range":"1252","text":"1251"},{"range":"1253","text":"1249"},"'NEW_POINT_ENTRY_PMTCT' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'basicInfo', 'getSex', and 'loadGenders'. Either include them or remove the dependency array.",["1254"],"React Hook useEffect has missing dependencies: 'getPatientEntryType', 'locationState.entrypointValue', and 'viewANCInfo'. Either include them or remove the dependency array.",["1255"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"range":"1256","text":"1247"},{"range":"1257","text":"1249"},{"range":"1258","text":"1251"},{"range":"1259","text":"1251"},{"range":"1260","text":"1249"},"'response' is assigned a value but never used.","'ActiveANCPatients' is defined but never used.","'Link' is defined but never used.","'DateTimePicker' is defined but never used.","'topLevelUnitCountryOptions' is assigned a value but never used.","'femaleStatus' is assigned a value but never used.","'setEnrollDto' is assigned a value but never used.","'carePoints' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'basicInfo.dob', 'loadEducation', 'loadGenders', 'loadMaritalStatus', 'loadOccupation', 'loadRelationships', and 'loadTopLevelCountry'. Either include them or remove the dependency array.",["1261"],"'actualcontacts' is assigned a value but never used.",{"range":"1262","text":"1247"},{"range":"1263","text":"1249"},{"range":"1264","text":"1251"},{"range":"1265","text":"1251"},{"range":"1266","text":"1249"},"'Dropdown' is defined but never used.","'classes' is assigned a value but never used.","'setpatientObj' is assigned a value but never used.","'genderType' is assigned a value but never used.","'mentalStatus' is assigned a value but never used.","'initialEvaluationStatus' is assigned a value but never used.","Array.prototype.filter() expects a return value from arrow function.","Assignments to the 'gender' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ConditionalExpression","'loadPmtctHts' is assigned a value but never used.","'permissions' is assigned a value but never used.","'patientBiometricStatus' is assigned a value but never used.","'setPatientBiometricStatus' is assigned a value but never used.","'devices' is assigned a value but never used.","'toggle' is assigned a value but never used.","'BiometricModalToggle' is assigned a value but never used.","'hivStatus' is assigned a value but never used.","'Arttoggle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'PatientCurrentStatus' and 'patientObj'. Either include them or remove the dependency array.",["1267"],{"range":"1268","text":"1243"},{"range":"1269","text":"1243"},{"range":"1270","text":"1243"},"'Redirect' is defined but never used.","'InputGroupText' is defined but never used.","'FormLabelName' is defined but never used.","'CancelIcon' is defined but never used.","'Message' is defined but never used.","'history' is assigned a value but never used.","'entryPoint' is assigned a value but never used.","'entryPointValue' is assigned a value but never used.","'setentryPointValue' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'GetPatientPMTCT', 'POINT_ENTRY_PMTCT', 'enroll', 'locationState.patientObj.person_uuid', 'locationState.patientObj.person_uuidd', 'locationState.patientObj.uuid', 'props.activeContent.actionType', 'props.activeContent.id', 'props.patientObj.person_uuid', and 'props.patientObj?.uuid'. Either include them or remove the dependency array. If 'setSisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["1271"],"React Hook useEffect has a missing dependency: 'getPatientEntryType'. Either include it or remove the dependency array.",["1272"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1273"],"no-dupe-keys","Duplicate key 'personUuid'.","ObjectExpression","'useHistory' is defined but never used.","React Hook useEffect has a missing dependency: 'GetPatientLabourDTO'. Either include it or remove the dependency array.",["1274"],"'useEffect' is defined but never used.","'validate' is assigned a value but never used.",{"range":"1275","text":"1243"},"React Hook useEffect has a missing dependency: 'DeliveryInfo'. Either include it or remove the dependency array.",["1276"],{"range":"1277","text":"1243"},"React Hook useEffect has a missing dependency: 'PatientHistory'. Either include it or remove the dependency array.",["1278"],"React Hook useEffect has missing dependencies: 'InfantInfo', 'RecentActivities', 'SummaryChart', and 'props?.allEntryPoint'. Either include them or remove the dependency array.",["1279"],{"range":"1280","text":"1243"},["1281"],{"range":"1282","text":"1243"},"React Hook useEffect has missing dependencies: 'DeliveryInfo' and 'InfantInfoByUuid'. Either include them or remove the dependency array.",["1283"],"'patientObj' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.patientObj?.dynamicHivStatus', 'props.patientObj.hivStatus', and 'props.patientObj?.staticHivStatus'. Either include them or remove the dependency array. If 'setPartnerHivStatus' needs the current value of 'props.patientObj.hivStatus', you can also switch to useReducer instead of useState and read 'props.patientObj.hivStatus' in the reducer.",["1284"],"Unnecessarily computed property [\"referredToOthers\"] found.",{"range":"1285","text":"1286"},"'NoStroller' is defined but never used.","'setNewDateOfDelivery' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'infantInfo' and 'props.activeContent'. Either include them or remove the dependency array. You can also do a functional update 'setInfantInfo(i => ...)' if you only need 'infantInfo' in the 'setInfantInfo' call.",["1287"],"'useCallback' is defined but never used.","'Button' is defined but never used.","'toast' is defined but never used.","'Sticky' is defined but never used.","'locationState' is assigned a value but never used.","'saving' is assigned a value but never used.","'hideOtherMenu' is assigned a value but never used.","'Fragment' is defined but never used.","'key' is assigned a value but never used.","'postPartumValue' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["1288"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","Duplicate key 'borderRadius'.","Duplicate key 'border'.","'MatButton' is defined but never used.","'Spinner' is defined but never used.","'Form' is defined but never used.","'CardContent' is defined but never used.","'SaveIcon' is defined but never used.","'ToastContainer' is defined but never used.","'useLocation' is defined but never used.","'PhoneInput' is defined but never used.","'hideNumChild' is assigned a value but never used.","'setHideNumChild' is assigned a value but never used.","'gender' is assigned a value but never used.","'clientCodeetail' is assigned a value but never used.","'clientCodeetail2' is assigned a value but never used.","'Input' is defined but never used.","'setObjValues' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'postTest'. Either include it or remove the dependency array. You can also do a functional update 'setPostTest(p => ...)' if you only need 'postTest' in the 'setPostTest' call.",["1289"],"'LabelRibbon' is defined but never used.","Unnecessarily computed property ['rencencyInterpretation'] found.",{"range":"1290","text":"1291"},{"range":"1292","text":"1291"},{"range":"1293","text":"1291"},{"range":"1294","text":"1291"},{"range":"1295","text":"1291"},{"range":"1296","text":"1291"},"React Hook useEffect has a missing dependency: 'recency'. Either include it or remove the dependency array. You can also do a functional update 'setRecency(r => ...)' if you only need 'recency' in the 'setRecency' call.",["1297"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'axios' is defined but never used.","'moment' is defined but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'riskAssessment'. Either include it or remove the dependency array. You can also do a functional update 'setRiskAssessment(r => ...)' if you only need 'riskAssessment' in the 'setRiskAssessment' call.",["1298"],"'handleInputChange' is assigned a value but never used.","'Card' is defined but never used.","'FaUserPlus' is defined but never used.","'handleItemClick' is assigned a value but never used.","'Menu' is defined but never used.","'Icon' is defined but never used.","'useStyles' is assigned a value but never used.","'patientId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'patients'. Either include it or remove the dependency array.",["1299"],"'handleIEditIndex' is assigned a value but never used.","'objValuesIndex' is assigned a value but never used.","'setObjValuesIndex' is assigned a value but never used.","'timingOfArtInitiation' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'GetVisit' and 'InfantInfo'. Either include them or remove the dependency array.",["1300"],"'List' is defined but never used.","'Feed' is defined but never used.","'entrypointRef' is assigned a value but never used.","'entryValueDisplay' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetVisit'. Either include it or remove the dependency array.",["1301"],["1302"],"Unnecessarily computed property [\"fpMethod\"] found.",{"range":"1303","text":"1304"},"Unnecessarily computed property [\"dsdModel\"] found.",{"range":"1305","text":"1306"},"Unnecessarily computed property [\"dsdOption\"] found.",{"range":"1307","text":"1308"},"Unnecessarily computed property [\"transferTo\"] found.",{"range":"1309","text":"1310"},["1240"],["1241"],{"range":"1311","text":"1243"},["1312"],"'sourceOfReferral' is assigned a value but never used.",["1313"],["1314"],"'SOURCE_REFERRAL_PMTCT' is assigned a value but never used.",{"range":"1315","text":"1247"},{"range":"1316","text":"1249"},{"range":"1317","text":"1251"},{"range":"1318","text":"1251"},{"range":"1319","text":"1249"},"React Hook useEffect has missing dependencies: 'basicInfo', 'getSex', 'loadGenders', and 'objValues'. Either include them or remove the dependency array. You can also do a functional update 'setObjValues(o => ...)' if you only need 'objValues' in the 'setObjValues' call.",["1320"],{"range":"1321","text":"1247"},{"range":"1322","text":"1249"},{"range":"1323","text":"1251"},{"range":"1324","text":"1251"},{"range":"1325","text":"1249"},"'sourceReferral' is assigned a value but never used.",["1326"],"'SourceReferral' is assigned a value but never used.",{"range":"1327","text":"1247"},{"range":"1328","text":"1249"},{"range":"1329","text":"1251"},{"range":"1330","text":"1251"},{"range":"1331","text":"1249"},{"range":"1332","text":"1243"},{"range":"1333","text":"1243"},["1334"],{"range":"1335","text":"1243"},"'timeMotherArt' is assigned a value but never used.",["1336"],["1337"],["1338"],["1339"],["1340"],{"range":"1341","text":"1286"},"'Grid' is defined but never used.","'Segment' is defined but never used.","'setInfantHospitalNumber' is assigned a value but never used.",["1342"],{"range":"1343","text":"1243"},["1344"],{"range":"1345","text":"1243"},["1346"],{"range":"1347","text":"1243"},["1348"],{"range":"1349","text":"1243"},["1350"],["1351"],["1352"],["1353"],["1354"],["1355"],{"range":"1356","text":"1304"},{"range":"1357","text":"1306"},{"range":"1358","text":"1308"},{"range":"1359","text":"1310"},["1360"],{"range":"1361","text":"1291"},{"range":"1362","text":"1291"},{"range":"1363","text":"1291"},{"range":"1364","text":"1291"},{"range":"1365","text":"1291"},{"range":"1366","text":"1291"},["1367"],["1368"],["1369"],"no-global-assign","no-unsafe-negation",[1245,1259],"token",{"desc":"1370","fix":"1371"},{"desc":"1372","fix":"1373"},[14175,14197],"\"testResultSyphilis\"",[14242,14271],"\"referredSyphilisTreatment\"",[14316,14335],"\"treatedSyphilis\"",[14736,14755],[14800,14829],{"desc":"1374","fix":"1375"},{"desc":"1376","fix":"1377"},[12575,12597],[12641,12670],[12714,12733],[13123,13142],[13186,13215],{"desc":"1378","fix":"1379"},[34443,34465],[34510,34539],[34584,34603],[35004,35023],[35068,35097],{"desc":"1380","fix":"1381"},[145,159],[143,157],[143,157],{"desc":"1382","fix":"1383"},{"desc":"1384","fix":"1385"},{"desc":"1386","fix":"1387"},{"desc":"1388","fix":"1389"},[255,269],{"desc":"1390","fix":"1391"},[148,162],{"desc":"1392","fix":"1393"},{"desc":"1394","fix":"1395"},[185,199],{"desc":"1392","fix":"1396"},[151,165],{"desc":"1397","fix":"1398"},{"desc":"1399","fix":"1400"},[4300,4320],"\"referredToOthers\"",{"desc":"1401","fix":"1402"},{"desc":"1403","fix":"1404"},{"desc":"1405","fix":"1406"},[4666,4692],"'rencencyInterpretation'",[4929,4955],[5263,5289],[5529,5555],[5793,5819],[5913,5939],{"desc":"1407","fix":"1408"},{"desc":"1409","fix":"1410"},{"desc":"1411","fix":"1412"},{"desc":"1413","fix":"1414"},{"desc":"1415","fix":"1416"},{"desc":"1417","fix":"1418"},[7321,7333],"\"fpMethod\"",[7586,7598],"\"dsdModel\"",[7643,7656],"\"dsdOption\"",[7995,8009],"\"transferTo\"",[1222,1236],{"desc":"1370","fix":"1419"},{"desc":"1374","fix":"1420"},{"desc":"1376","fix":"1421"},[13052,13074],[13118,13147],[13191,13210],[13600,13619],[13663,13692],{"desc":"1422","fix":"1423"},[14177,14199],[14243,14272],[14316,14335],[14725,14744],[14788,14817],{"desc":"1378","fix":"1424"},[33904,33926],[33970,33999],[34043,34062],[34452,34471],[34515,34544],[140,154],[140,154],{"desc":"1380","fix":"1425"},[141,155],{"desc":"1382","fix":"1426"},{"desc":"1384","fix":"1427"},{"desc":"1386","fix":"1428"},{"desc":"1388","fix":"1429"},{"desc":"1399","fix":"1430"},[4300,4320],{"desc":"1401","fix":"1431"},[255,269],{"desc":"1390","fix":"1432"},[148,162],{"desc":"1397","fix":"1433"},[148,162],{"desc":"1392","fix":"1434"},[181,195],{"desc":"1392","fix":"1435"},{"desc":"1394","fix":"1436"},{"desc":"1403","fix":"1437"},{"desc":"1413","fix":"1438"},{"desc":"1415","fix":"1439"},{"desc":"1417","fix":"1440"},[7067,7079],[7326,7338],[7382,7395],[7726,7740],{"desc":"1405","fix":"1441"},[4666,4692],[4929,4955],[5263,5289],[5529,5555],[5793,5819],[5913,5939],{"desc":"1407","fix":"1442"},{"desc":"1409","fix":"1443"},{"desc":"1411","fix":"1444"},"Update the dependencies array to be: [RecentActivities, patientObj?.id]",{"range":"1445","text":"1446"},"Update the dependencies array to be: [patientObj, patientId, basicInfo.dateOfRegistration, locationState, loadGenders, getSex, basicInfo, objValues]",{"range":"1447","text":"1448"},"Update the dependencies array to be: [patientObj, patientId, actionType, loadGenders, getSex, basicInfo]",{"range":"1449","text":"1450"},"Update the dependencies array to be: [getPatientEntryType, locationState.entrypointValue, viewANCInfo]",{"range":"1451","text":"1452"},"Update the dependencies array to be: [basicInfo.dateOfRegistration, basicInfo.dob, loadEducation, loadGenders, loadMaritalStatus, loadOccupation, loadRelationships, loadTopLevelCountry]",{"range":"1453","text":"1454"},"Update the dependencies array to be: [PatientCurrentStatus, patientObj, props.patientObj]",{"range":"1455","text":"1456"},"Update the dependencies array to be: [GetPatientPMTCT, POINT_ENTRY_PMTCT, enroll, locationState.patientObj.person_uuid, locationState.patientObj.person_uuidd, locationState.patientObj.uuid, props.activeContent.actionType, props.activeContent.id, props.patientObj.person_uuid, props.patientObj?.uuid]",{"range":"1457","text":"1458"},"Update the dependencies array to be: [allNewEntryPoint, getPatientEntryType]",{"range":"1459","text":"1460"},"Update the dependencies array to be: [enroll, props]",{"range":"1461","text":"1462"},"Update the dependencies array to be: [props.patientObj.id, props.activeContent, GetPatientLabourDTO]",{"range":"1463","text":"1464"},"Update the dependencies array to be: [props.patientObj.id, props.activeContent.activeTab, DeliveryInfo]",{"range":"1465","text":"1466"},"Update the dependencies array to be: [PatientHistory, props.patientObj.id]",{"range":"1467","text":"1468"},"Update the dependencies array to be: [InfantInfo, RecentActivities, SummaryChart, props?.allEntryPoint, props.patientObj.id]",{"range":"1469","text":"1470"},{"range":"1471","text":"1468"},"Update the dependencies array to be: [DeliveryInfo, InfantInfoByUuid]",{"range":"1472","text":"1473"},"Update the dependencies array to be: [props.patientObj.id, props.activeContent, props.patientObj.hivStatus, props.patientObj?.staticHivStatus, props.patientObj?.dynamicHivStatus]",{"range":"1474","text":"1475"},"Update the dependencies array to be: [props.patientObj.id, props.activeContent.id, props.activeContent, infantInfo]",{"range":"1476","text":"1477"},"Update the dependencies array to be: [props]",{"range":"1478","text":"1479"},"Update the dependencies array to be: [props.patientObj, postTest.hivTestResult, postTest]",{"range":"1480","text":"1481"},"Update the dependencies array to be: [recency.longTermLine, recency.verififcationLine, recency.controlLine, props.patientObj, recency]",{"range":"1482","text":"1483"},"Update the dependencies array to be: [props.patientObj, riskAssessment]",{"range":"1484","text":"1485"},"Update the dependencies array to be: [patients]",{"range":"1486","text":"1487"},"Update the dependencies array to be: [props.patientObj.ancNo, props.activeContent, InfantInfo, GetVisit]",{"range":"1488","text":"1489"},"Update the dependencies array to be: [GetVisit, props.activeContent]",{"range":"1490","text":"1491"},"Update the dependencies array to be: [getPatientEntryType]",{"range":"1492","text":"1493"},{"range":"1494","text":"1446"},{"range":"1495","text":"1450"},{"range":"1496","text":"1452"},"Update the dependencies array to be: [patientObj, patientId, basicInfo.dateOfRegistration, loadGenders, getSex, basicInfo, objValues]",{"range":"1497","text":"1498"},{"range":"1499","text":"1454"},{"range":"1500","text":"1456"},{"range":"1501","text":"1458"},{"range":"1502","text":"1460"},{"range":"1503","text":"1462"},{"range":"1504","text":"1464"},{"range":"1505","text":"1475"},{"range":"1506","text":"1477"},{"range":"1507","text":"1466"},{"range":"1508","text":"1473"},{"range":"1509","text":"1468"},{"range":"1510","text":"1468"},{"range":"1511","text":"1470"},{"range":"1512","text":"1479"},{"range":"1513","text":"1489"},{"range":"1514","text":"1491"},{"range":"1515","text":"1493"},{"range":"1516","text":"1481"},{"range":"1517","text":"1483"},{"range":"1518","text":"1485"},{"range":"1519","text":"1487"},[4288,4290],"[RecentActivities, patientObj?.id]",[6630,6683],"[patientObj, patientId, basicInfo.dateOfRegistration, locationState, loadGenders, getSex, basicInfo, objValues]",[5608,5643],"[patientObj, patientId, actionType, loadGenders, getSex, basicInfo]",[5767,5769],"[getPatientEntryType, locationState.entrypointValue, viewANCInfo]",[7160,7190],"[basicInfo.dateOfRegistration, basicInfo.dob, loadEducation, loadGenders, loadMaritalStatus, loadOccupation, loadRelationships, loadTopLevelCountry]",[2673,2691],"[PatientCurrentStatus, patientObj, props.patientObj]",[6147,6149],"[GetPatientPMTCT, POINT_ENTRY_PMTCT, enroll, locationState.patientObj.person_uuid, locationState.patientObj.person_uuidd, locationState.patientObj.uuid, props.activeContent.actionType, props.activeContent.id, props.patientObj.person_uuid, props.patientObj?.uuid]",[6255,6273],"[allNewEntryPoint, getPatientEntryType]",[6413,6421],"[enroll, props]",[3957,3999],"[props.patientObj.id, props.activeContent, GetPatientLabourDTO]",[1918,1970],"[props.patientObj.id, props.activeContent.activeTab, DeliveryInfo]",[3100,3121],"[PatientHistory, props.patientObj.id]",[1608,1629],"[InfantInfo, RecentActivities, SummaryChart, props?.allEntryPoint, props.patientObj.id]",[3452,3473],[3478,3480],"[DeliveryInfo, InfantInfoByUuid]",[3192,3234],"[props.patientObj.id, props.activeContent, props.patientObj.hivStatus, props.patientObj?.staticHivStatus, props.patientObj?.dynamicHivStatus]",[3617,3662],"[props.patientObj.id, props.activeContent.id, props.activeContent, infantInfo]",[1002,1004],"[props]",[4817,4858],"[props.patientObj, postTest.hivTestResult, postTest]",[5963,6050],"[recency.longTermLine, recency.verififcationLine, recency.controlLine, props.patientObj, recency]",[6724,6742],"[props.patientObj, riskAssessment]",[3901,3903],"[patients]",[4304,4349],"[props.patientObj.ancNo, props.activeContent, InfantInfo, GetVisit]",[3980,4001],"[GetVisit, props.activeContent]",[4061,4063],"[getPatientEntryType]",[4145,4147],[5706,5741],[5865,5867],[6476,6529],"[patientObj, patientId, basicInfo.dateOfRegistration, loadGenders, getSex, basicInfo, objValues]",[7014,7044],[2595,2613],[8045,8047],[8147,8165],[8298,8306],[3921,3963],[3192,3234],[6365,6410],[1918,1970],[3406,3408],[3100,3121],[3383,3404],[1562,1583],[970,972],[4304,4349],[3831,3852],[3908,3910],[4817,4858],[5963,6050],[6724,6742],[3901,3903]]